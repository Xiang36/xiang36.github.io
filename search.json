[{"title":"[Day 01] 遠征 Kotlin × Spring Boot 前言","url":"/2020/10/11/ironman-2020-01/","content":"<h2 id=\"主題選定\"><a href=\"#主題選定\" class=\"headerlink\" title=\"主題選定\"></a>主題選定</h2><p>這次鐵人賽文章主要是想要介紹 Kotlin 運用在 Spring Boot 開發上，其實當時在思考主題時猶豫了很久，因為 JetBrains 有推出 Kotlin Web 框架－Ktor，個人對於這個框架也有興趣，但礙於所待的公司在技術生態系上還是偏向  Spring / Spring Boot 架構，最後決定還是先以 Kotlin 在 Spring Boot 框架當作這次分享內容。</p>\n<h2 id=\"接觸起源\"><a href=\"#接觸起源\" class=\"headerlink\" title=\"接觸起源\"></a>接觸起源</h2><p>個人在過去開發上，其實曾開發過 Java、C#、Swift、Python、JavaScript 等語言的專案開發，因 Kotlin 在語法上其實融合了 Scala、Groovy、Python、Swift 等語言特性，若閱讀者曾接觸過提及的語言，上手 Kotlin 應會容易許多，Kotlin 的誕生也彌補了許多過去使用Java進行開發時常出現的缺點。</p>\n<p>而第一次接觸 Kotlin 其實是在 Android 專案開發上，但因為個人目前開發所接觸的專案幾乎還是以 Web 居多，那時候就沒有花太多時間深入使用，後來也是在 2019 年在 Youtube 看到 KotlinConf 2018 Nicolas Frankel 的分享內容<a href=\"https://www.youtube.com/watch?v=pSiZVAeReeg\">《Kotlin and Spring Boot, a Match Made in Heaven 》</a>，才對於 Kotlin 重新點燃了興趣，喜愛 Kotlin 在 Spring Boot 開發時的簡潔與特性，就此開始對於 Kotlin 深入研究。</p>\n<h2 id=\"系列規劃\"><a href=\"#系列規劃\" class=\"headerlink\" title=\"系列規劃\"></a>系列規劃</h2><p>本系列文章目前安排會先介紹 Kotlin 程式語言基本語法，再介紹 Spring Boot 框架與一些後端開發技巧，相信閱讀者只要具備基礎程式語言能力就可以加入一起學習，閱讀的朋友們如果有地方說明不清楚的，希望再留言告知。</p>\n<p>系列預期目標希望讓閱讀者能夠認識 Kotlin 基本程式語法與特性，能夠因為此系列學習到 Spring Boot Web 開發，期望降低 Kotlin 與 Spring Boot 學習門檻，期待大家一起深入探索 Web 開發世界。</p>\n<h2 id=\"章節導覽\"><a href=\"#章節導覽\" class=\"headerlink\" title=\"章節導覽\"></a>章節導覽</h2><p><a href=\"https://ithelp.ithome.com.tw/articles/10233414\">[Day 01] 遠征 Kotlin × Spring Boot 前言</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10235427\">[Day 02] 遠征預備 Kotlin × 開發環境介紹</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10235987\">[Day 03] 遠征 Kotlin × 變數型別</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10236296\">[Day 04] 遠征 Kotlin × 流程控制</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10236676\">[Day 05] 遠征 Kotlin × 函數介紹</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10237200\">[Day 06] 遠征 Kotlin × Collections 介紹</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10237903\">[Day 07] 遠征 Kotlin × 類別與物件</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10238654\">[Day 08] 遠征 Kotlin × 類別繼承、介面、抽象</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10239514\">[Day 09] 遠征 Kotlin × 例外處理</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10239879\">[Day 10] 遠征 Kotlin × 泛型 Generic</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10240888\">[Day 11] 遠征 Kotlin × 函數式程式設計</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10241496\">[Day 12] 遠征 Kotlin × 進入 Spring Boot 世界</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10242205\">[Day 13] 遠征 Kotlin × 建置 Spring Boot 專案</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10242219\">[Day 14] 遠征 Kotlin × Spring Boot 專案配置介紹</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10243455\">[Day 15] 遠征 Kotlin × Spring Boot 設定資料庫與匯入初始資料</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10244151\">[Day 16] 遠征 Kotlin × 使用 Spring Data JPA 操作資料庫 (1)</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10244333\">[Day 17] 遠征 Kotlin × 使用 Spring Data JPA 操作資料庫 (2)</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10245346\">[Day 18] 遠征 Kotlin × Spring Boot 使用 RESTful API (1)</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10245979\">[Day 19] 遠征 Kotlin × Spring Boot 使用 RESTful API (2)</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10246576\">[Day 20] 遠征 Kotlin × Spring Boot 使用分層架構 Layered Architecture</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10247103\">[Day 21] 遠征 Kotlin × Spring Boot 爬蟲實戰教學</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10247468\">[Day 22] 遠征 Kotlin × Spring Boot 介紹單元測試 (1)</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10248136\">[Day 23] 遠征 Kotlin × Spring Boot 介紹單元測試 (2)</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10248225\">[Day 24] 遠征 Kotlin × Spring Boot 介紹 Template Engine (1)</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10249076\">[Day 25] 遠征 Kotlin × Spring Boot 介紹 Template Engine (2)</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10249535\">[Day 26] 遠征 Kotlin × Spring Boot 部署網站到 Heroku</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10249999\">[Day 27] 遠征 Kotlin × Spring Boot 介紹 Spring AOP 機制</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10250138\">[Day 28] 遠征 Kotlin × Spring Boot 介紹 WebSocket 實作</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10251035\">[Day 29] 遠征 Kotlin × Spring Boot 介紹多資料庫連線配置</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10251437\">[Day 30] 遠征 Kotlin × Spring Boot 完賽心得分享</a></p>\n<h2 id=\"學習資源\"><a href=\"#學習資源\" class=\"headerlink\" title=\"學習資源\"></a>學習資源</h2><p>此次系列主題會參考一些學習資源，這邊也將資源列出，供有興趣的朋友也可以前往學習：</p>\n<ol>\n<li>【網站】<a href=\"https://kotlinlang.org/\">Kotlin 官方文件</a></li>\n<li>【網站】<a href=\"https://tw.kotlin.tips/study-jams\">Kotlin 讀書會</a></li>\n<li>【書籍】<a href=\"https://www.tenlong.com.tw/products/9789864344796\">Kotlin 權威2.0：Android專家養成術</a></li>\n<li>【書籍】<a href=\"https://www.tenlong.com.tw/products/9781492046677\">Kotlin Cookbook</a></li>\n<li>【文章】<a href=\"https://www.chainnews.com/zh-hant/articles/266827806632.htm\">v1.4 發佈在即，誕生近 10 年的 Kotlin 取代 Java 了嗎？</a></li>\n</ol>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot","Kotlin"]},{"title":"[Day 02] 遠征預備 Kotlin  × 開發環境介紹","url":"/2020/10/11/ironman-2020-02/","content":"<p>為了遠征 <code>Spring Boot</code> 開發，我們預計會花幾天快速帶大家認識 <code>Kotlin 基本語法</code>。</p>\n<p>首先，在開始學習 Kotlin 程式語法與特性之前，我們先來稍微認識 Kotlin 程式語言，如果正在閱讀的朋友，先前有使用過 Intellij、PhpStorm、PyCharm、Rider、GoLand 等編輯器的話，其實 Kotlin 就是這間 IDE 軟體公司－JetBrains 設計開發並開源誕生，而 Kotlin 是在 Java虛擬機 (Java Virtual Machine, JVM）執行的靜態型別程式設計語言，<strong>在Google I/O 2017中，Google 宣布 Kotlin 成為 Android 官方開發語言，並在 2019 年 Kotlin 替代 Java 成為 Android 開發預設語言，Spring 也在 5.x 版本開始支持 Kotlin</strong>，而 Kotlin 在開發上更具有以下優勢（後續章節會再深入介紹）：</p>\n<ul>\n<li>開發上可以 100% 兼容 Java 程式語言，兩者語言甚至可互相混合開發</li>\n<li>開發上比 Java 更安全，例如可靜態檢測常見陷阱，例如 NullPointerException 檢測</li>\n<li>開發上比 Java 更簡潔、高閱讀性，例如 Scope Function、Extension function、Lambda 等語法特性</li>\n</ul>\n<p>接下來，為了幫助每位閱讀朋友能夠順利開發 Kotlin 程式，將一步步帶領大家進入 Kotlin 開發環境，而個人目前在開發 Kotlin 專案都是使用 JetBrains 的 Intellij 編輯器進行開發，其編輯器已內建許多工具方便開發者進行開發，例如重構、測試、版控等工具，推薦可以使用此編輯器進行開發。</p>\n<p>但礙於可能有許多撰寫 Java 的朋友已經習慣使用 Eclipse 開發專案，下面後半段也會附上如何在 Eclipse 開發 Kotlin 專案，給大家進行參考與選用。若有朋友暫時不想下載編輯器，僅想先學習基礎 Kotlin 語法，也可先使用 Kotlin 官方提供的 Playground 頁面體驗 Kotlin 開發，例如下圖在頁面嘗試印出「Hello Kotlin」字串程式：</p>\n<p><a href=\"http://bit.ly/ithome20200911\">範例測試連結</a><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179ASI5YegML6.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179ASI5YegML6.png\"></p>\n<hr>\n<p>下面內容將會逐步介紹 Intellij 編輯器如何安裝並建立專案執行 Kotlin 程式，後面也會介紹我們如何利用 Eclipse 進行Kotlin專案開發：</p>\n<h2 id=\"1-Intellij-安裝與執行-Kotlin-專案\"><a href=\"#1-Intellij-安裝與執行-Kotlin-專案\" class=\"headerlink\" title=\"1. Intellij 安裝與執行 Kotlin 專案\"></a>1. Intellij 安裝與執行 Kotlin 專案</h2><p>（1）我們可至 Intellij 頁面進行下載 Community 免費版：</p>\n<p>IntelliJ IDEA Community 版本下載：<a href=\"https://www.jetbrains.com/idea/download/index.html\">https://www.jetbrains.com/idea/download/index.html</a><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179IrTZ53sXHE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179IrTZ53sXHE.png\"></p>\n<p>（2）下載並安裝完畢後，可開啟 Intellij 建置新專案（Create New Project）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/201211795M225KVLQN.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/201211795M225KVLQN.png\"></p>\n<p>（3) 選擇左邊選單「Kotlin」專案，再選擇「JVM｜IDEA」，最後點擊「Next」即可<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179cNZwCRTQNI.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179cNZwCRTQNI.png\"></p>\n<p>（4）輸入專案名稱（Project Name ）與專案存放路徑<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179DPB4JXsSRv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179DPB4JXsSRv.png\"></p>\n<p>(5) 在 src 資料夾下新增 Kotlin 程式「hello.kt」</p>\n<blockquote>\n<p>註：Kotlin 程式檔案是以「 .kt 」副檔名作為結尾，如：hello.kt 、app.kt</p>\n</blockquote>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179Q1miznK8Pl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179Q1miznK8Pl.png\"></p>\n<p>(6) 輸入程式片段並執行左邊的綠色執行按鈕，即可得到下方「Hello Kotlin」結果，這邊要記得 Kotlin 在每行程式結尾不需要加上分號「；」<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179bMakTtPoCA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179bMakTtPoCA.png\"></p>\n<h2 id=\"2-Eclipse-安裝與執行-Kotlin-專案\"><a href=\"#2-Eclipse-安裝與執行-Kotlin-專案\" class=\"headerlink\" title=\"2. Eclipse 安裝與執行 Kotlin 專案\"></a>2. Eclipse 安裝與執行 Kotlin 專案</h2><p>(1) 開啟 Eclipse 後，點擊工作列上的「Help」→「Eclipse Marketplace…」<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179awxcyluTD4.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179awxcyluTD4.png\"></p>\n<p>(2) 在 Find 欄位上輸入 Kotlin 進行搜尋，點擊 Kotlin Plugin for Eclipse 的 Install 進行安裝<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179ptDsD2j1c0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179ptDsD2j1c0.png\"></p>\n<p>(3) 開啟 Window Perspective 設定<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/201211793PLPsYrJRH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/201211793PLPsYrJRH.png\"></p>\n<p>(4) 切換 Perspective 至 Kotlin 進行開發<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/201211797CCb0iPVp1.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/201211797CCb0iPVp1.png\"></p>\n<p>(5) 新增 Kotlin 專案與設定專案名稱、存放路徑<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179HHZt7xp5qS.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179HHZt7xp5qS.png\"><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179tyRYf6SpAW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179tyRYf6SpAW.png\"></p>\n<p>(6) 新增 Kotlin 程式「hello.kt」，並撰寫main程式輸出「Hello, Kotlin」<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179zpZJkpD79f.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200911/20121179zpZJkpD79f.png\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>【官方】<a href=\"https://kotlinlang.org/\">Kotlin 官方網站</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 03] 遠征 Kotlin × 變數型別","url":"/2020/10/11/ironman-2020-03/","content":"<p>在任何一種程式語言都有資料型別介紹，而此篇我們將來了解 Kotlin 在資料型別上的特性、操作、轉換等內容。</p>\n<p>在 Kotlin 官方文件中有提到：</p>\n<blockquote>\n<p>In Kotlin, everything is an object in the sense that we can call member functions and properties on any variable.</p>\n</blockquote>\n<p>上述內容得知，Kotlin 的任何東西都是一個物件，可以存取任何對象的相關方法與屬性，不像 Java 有區分<code>原始型別（Primitive Type）</code>與<code>參考型態（Reference Types）</code>，在開發上有時候甚至需要做轉換才可使用。而 Kotlin 在宣告變數時使用的是<code>靜態類型系統（static type system）</code>，即編輯器會按照變數類型辨識程式碼，判斷是否有存在類型與數值不符合的狀況發生，若有出現，編輯器會立即指出，例如下圖提示訊息：</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179s0fDvpLeBE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179s0fDvpLeBE.png\"></p>\n<h2 id=\"變數宣告\"><a href=\"#變數宣告\" class=\"headerlink\" title=\"變數宣告\"></a>變數宣告</h2><p>Kotlin 在變數宣告時主要會使用到兩種關鍵字 <code>val</code> 和 <code>var</code> ：</p>\n<ul>\n<li><code>val</code> 用於唯讀變數，一旦給值就無法再修改</li>\n<li><code>var</code> 用於需要重新修改數值的情況</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> readOnlyVariable = <span class=\"string\">&quot;鐵人賽第十二屆&quot;</span> <span class=\"comment\">// 宣告一個唯讀變數</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> playerName = <span class=\"string\">&quot;選手一號&quot;</span> <span class=\"comment\">// 宣告一個可重新修改數值的變數</span></span><br><span class=\"line\">    playerName = <span class=\"string\">&quot;選手二號&quot;</span> <span class=\"comment\">// 重新賦予新數值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Kotlin 官方這邊也有建議開發者在開發上建議優先使用 <code>val</code>，當遇到需要修改數值時再轉為 <code>var</code> 即可，若使用 <code>var</code> 宣告變數，開發者若沒有在程式中修改過，Intellij 編輯器也會提示建議改為 <code>val</code>，如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179ihruzGQCee.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179ihruzGQCee.png\"></p>\n<h2 id=\"空值型態\"><a href=\"#空值型態\" class=\"headerlink\" title=\"空值型態\"></a>空值型態</h2><p>還記得嗎？我們在上一章有提到 Kotlin 有一個優勢是可以避免以前 Java 開發中常見的 <code>NullPointerException</code> 情況發生，主要原因是因為 Kotlin 預設宣告都只能是非 <code>null</code> 型態，例如以下範例，當我們想要進行指派 <code>null</code> 值給 String 時會發生編譯錯誤狀況：</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179hI5ojOeMew.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179hI5ojOeMew.png\"></p>\n<p>這樣的錯誤檢查就能夠避免開發者經常會有出現錯誤的問題，而如果在開發情境上確實有必要使用 <code>null</code> 值，則可以將變數定義為 <code>nullable</code> 狀態，即在變數的型態定義上加上 <code>?</code> 即可，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test: String? = <span class=\"string\">&quot;鐵人賽&quot;</span></span><br><span class=\"line\">    test = <span class=\"literal\">null</span></span><br><span class=\"line\">    println(test) <span class=\"comment\">// 印出 null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"型別判斷處理\"><a href=\"#型別判斷處理\" class=\"headerlink\" title=\"型別判斷處理\"></a>型別判斷處理</h2><p>在介紹基本型別前，先介紹 Kotlin 在變數上有個特色是型別判斷處理，可對於已指派預設值的宣告變數自動定義型別，允許開發者省略型別定義，以下我們嘗試宣告一個變數，並輸出該變數的型別來看 Kotlin 是否有自動幫我們進行型別宣告，如下範例：</p>\n<p>此範例先宣告變數 name 為「鐵人賽」，再利用「::class.simpleName」印出變數型別結果為 String</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name = <span class=\"string\">&quot;鐵人賽&quot;</span></span><br><span class=\"line\">    println(name::<span class=\"keyword\">class</span>.simpleName) <span class=\"comment\">// 印出 String -&gt; 代表 Kotlin 自動幫我們定義型態</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"資料型別\"><a href=\"#資料型別\" class=\"headerlink\" title=\"資料型別\"></a>資料型別</h2><p>Kotlin 在資料型別與 Java 非常相似，只差在變數型態必須使用<code>首字大寫</code>，型別分別如下：</p>\n<ul>\n<li><p>數值型別 Numbers （種類可依長度區分）</p>\n<ul>\n<li><p>Byte (8 Bits)</p>\n</li>\n<li><p>Short (16 Bits)</p>\n</li>\n<li><p>Int (32 Bits)</p>\n</li>\n<li><p>Long (64 Bits)</p>\n</li>\n<li><p>Float (32 Bits)</p>\n</li>\n<li><p>Double (64 Bits)</p>\n<p>數值變數在操作上可直接宣告型態或是透過型別判斷進行操作：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> byte: <span class=\"built_in\">Byte</span> = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> short: <span class=\"built_in\">Short</span> = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> int: <span class=\"built_in\">Int</span> = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> long: <span class=\"built_in\">Long</span> = <span class=\"number\">4L</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> float: <span class=\"built_in\">Float</span> = <span class=\"number\">5f</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> double: <span class=\"built_in\">Double</span> = <span class=\"number\">6.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;Byte =&gt; <span class=\"variable\">$byte</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Short =&gt; <span class=\"variable\">$short</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Int =&gt; <span class=\"variable\">$int</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Long =&gt; <span class=\"variable\">$long</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Float =&gt; <span class=\"variable\">$float</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Double =&gt; <span class=\"variable\">$double</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前面有提到 Kotlin 的一切都是物件，在以前 Java 變數型態有分為<code>基本型別（Primitive type）</code>與<code>參考型別（Reference type）</code>，即 <code>int</code> 與 <code>Integer</code> 的差別，而在 <code>J2SE 5.0</code> 時有提供<code>自動裝箱（autoboxing）</code>與<code>拆箱（unboxing）</code>來進行包裹基本型態，但在 Kotlin 中，只存在數值的裝箱，不存在拆箱，因為 Kotlin 是沒有存在基本資料型態的，下面將示範如何進行裝箱操作：</p>\n<p>此範例操作須搭配上面提到的概念－空值型態達成裝箱效果，會發現裝箱前與裝箱後的數值都一樣</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> number: <span class=\"built_in\">Int</span> = <span class=\"number\">913</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> numberInBox: <span class=\"built_in\">Int</span>? = number</span><br><span class=\"line\">    println(<span class=\"string\">&quot;裝箱前數值： <span class=\"variable\">$number</span> , 裝箱後數值： <span class=\"variable\">$numberInBox</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 裝箱前數值： 913 , 裝箱後數值： 913</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面範例我們會發現兩個數值印出來雖然是相等的，但其實在 Kotlin 判斷數值是否相等有兩種比較方式（<code>==</code> 與 <code>===</code>），<code>==</code> 是判斷數值是否相等， <code>===</code> 則是判斷兩個數值在記憶體位置是否相等，而其實 Kotlin 在變數裝箱操作時，記憶體位置會根據其資料型別的數值範圍進行定義，我們可以利用下面範例進行示範：</p>\n<p>我們會發現當 a 變數為 127 時，判斷兩個裝箱變數會為 <code>true</code>，因為 Int 型態定義數值範圍為 <code>-128 ~ 127</code>，當 b 變數超過 127 數值時，Kotlin 在記憶體分配上會有不同位置狀況發生。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">127</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> boxedA: <span class=\"built_in\">Int</span>? = a</span><br><span class=\"line\">    <span class=\"keyword\">val</span> anotherBoxedA: <span class=\"built_in\">Int</span>? = a</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> b: <span class=\"built_in\">Int</span> = <span class=\"number\">128</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> boxedB: <span class=\"built_in\">Int</span>? = b</span><br><span class=\"line\">    <span class=\"keyword\">val</span> anotherBoxedB: <span class=\"built_in\">Int</span>? = b</span><br><span class=\"line\"></span><br><span class=\"line\">    println(boxedA === anotherBoxedA) <span class=\"comment\">// true</span></span><br><span class=\"line\">    println(boxedB === anotherBoxedB) <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Kotlin 在數值轉換上有分顯性轉換與隱性轉換，隱性轉換即 Kotlin 會自動幫我們進行轉換，但若兩個數值為不同型態時，會自動以定義數值範圍較大的型態為轉換後的最終型態，例如以下範例：</p>\n<p>此範例為兩數相加，999為 <code>Long</code> 型態，1為 <code>Int</code> 型態，兩數相加後的結果 number 為 <code>Long</code> 型態</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> number = <span class=\"number\">999L</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    println(number::<span class=\"keyword\">class</span>.simpleName) <span class=\"comment\">// 印出資料型別為 Long</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而為了避免隱性轉換時自動選擇型態問題，我們在開發上可使用顯性轉換方式，即下面範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> number: <span class=\"built_in\">Int</span> = <span class=\"number\">65</span></span><br><span class=\"line\">    println(number.toByte())    <span class=\"comment\">// 印出 65</span></span><br><span class=\"line\">    println(number.toShort())   <span class=\"comment\">// 印出 65</span></span><br><span class=\"line\">    println(number.toLong())    <span class=\"comment\">// 印出 65</span></span><br><span class=\"line\">    println(number.toFloat())   <span class=\"comment\">// 印出 65.0</span></span><br><span class=\"line\">    println(number.toDouble())  <span class=\"comment\">// 印出 65.0</span></span><br><span class=\"line\">    println(number.toChar())    <span class=\"comment\">// 印出 A</span></span><br><span class=\"line\">    println(number.toString())  <span class=\"comment\">// 印出 65</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>字元型別 Char</p>\n<p>  Char 表示字元類型，字元變數必須使用單引號（‘’）表示，在轉換上可利用顯性轉換為數字型態，如以下範例：</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> char: <span class=\"built_in\">Char</span> = <span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\">    println(char.toInt())    <span class=\"comment\">// 印出 65</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字串型別 String</p>\n<p>  String 表示字串類型，在輸出時可使用字串模板表示式處理字串組成，再進行輸出，如下範例：</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> username: String = <span class=\"string\">&quot;Devin&quot;</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;第十二屆鐵人賽 參加者 <span class=\"variable\">$username</span>&quot;</span>) <span class=\"comment\">// 印出「第十二屆鐵人賽 參加者 Devin」</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>布林型別 Boolean</p>\n<p>  Boolean 表示為布林類型，其值有 <code>true</code> 與 <code>false</code></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> isFalse: <span class=\"built_in\">Boolean</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> isTrue: <span class=\"built_in\">Boolean</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(isFalse &amp;&amp; isTrue) <span class=\"comment\">// 印出「false」</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>陣列型別 Array<code>&lt;T&gt;</code></p>\n<p>  Kotlin 的 Array 型別在宣告上是以 <code>Array&lt;T&gt;</code> 表示，我們可以到 Kotlin 的 <code>Array</code> 型態定義查看，會發現原始型態已經幫我們定義 get、set、size 與 iterator 方法：</p>\n<p>  <img src=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179oKLvyrROGy.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179oKLvyrROGy.png\"></p>\n<p>  故我們在 Array 操作上可以如下範例進行操作：</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>: Array&lt;<span class=\"built_in\">Int</span>&gt; = arrayOf(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">// 宣告Array並賦予 1-5 數值</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span>.forEach &#123; println(it) &#125;  <span class=\"comment\">// 利用 forEach 分別印出數值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Const-作用\"><a href=\"#Const-作用\" class=\"headerlink\" title=\"Const 作用\"></a>Const 作用</h2><p>在前述有提到唯讀變數 <code>val</code> 不允許重新設定數值，但其實 <code>val</code> 是在程式執行階段（Run time）才進行<code>賦值（Assign Value）</code>動作，而我們若要限制程式在編輯階段（Compile time）就進行賦值動作，應使用 <code>const</code> 關鍵字搭配 <code>val</code> 進行變數宣告，我們可用一個範例來說明 <code>const</code> 與 <code>val</code> 的差異：</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179O9kWjS1nt1.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179O9kWjS1nt1.png\"></p>\n<p>透過上面範例我們會發現兩件事：</p>\n<ol>\n<li><code>normalVariable</code> 可利用 getRandomValue() 隨機取得 1 - 6 數值，表示程式是先在執行階段利用 getRandomValue() 方法取得數值後，才對 <code>normalVariable</code> 進行賦值</li>\n<li>當我們嘗試將 <code>constVariableFromGetValue</code> 賦予 getRandomValue 方法時，會出現 const val 只能接受常數（constant value）</li>\n</ol>\n<h2 id=\"型別檢測與轉換\"><a href=\"#型別檢測與轉換\" class=\"headerlink\" title=\"型別檢測與轉換\"></a>型別檢測與轉換</h2><ul>\n<li><p>is 運算子</p>\n<p>  is運算子可檢查物件或變數是否屬於某資料型別，如Int、String等，類似於Java的 instanceof</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">    println(<span class=\"keyword\">data</span> <span class=\"keyword\">is</span> String);   <span class=\"comment\">// 印出 true</span></span><br><span class=\"line\">    println(<span class=\"keyword\">data</span> <span class=\"keyword\">is</span> Any);      <span class=\"comment\">// 印出 true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>as 運算子進行型別轉換</p>\n<p>  as運算子用於型別轉換，若要轉換的數值與指定型別相容，轉換就會成功；如果型別不相容，使用 as? 運算子就會返回值null，如下範例：</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> x: <span class=\"built_in\">Int</span> = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> y: <span class=\"built_in\">Int</span> = x <span class=\"keyword\">as</span> <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> z: String? = y <span class=\"keyword\">as</span>? String</span><br><span class=\"line\"></span><br><span class=\"line\">    println(y) <span class=\"comment\">// 印出 2</span></span><br><span class=\"line\">    println(z) <span class=\"comment\">// 印出 null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"特殊型別\"><a href=\"#特殊型別\" class=\"headerlink\" title=\"特殊型別\"></a>特殊型別</h2><p>除了上述基本型別以外，Kotlin 還有一些特殊型別運用於物件或函數上，這邊會先進行簡單介紹，會在後續章節介紹時會再深入說明：</p>\n<h3 id=\"1-Any-型別\"><a href=\"#1-Any-型別\" class=\"headerlink\" title=\"1. Any 型別\"></a>1. Any 型別</h3><p>根據 Kotlin 官方文件所述：</p>\n<blockquote>\n<p>The root of the Kotlin class hierarchy. Every Kotlin class has [Any] as a superclass.</p>\n</blockquote>\n<p>在此篇文章一開始介紹說明，Kotlin的一切都是物件，而每個物件其實都是繼承 Any 這個型別，此型別相當於Java的 Object 型別，而此型別也可再細分為 Any 與 Any?，Any屬於非空型別的根物件，Any?屬於可空型別的根物件。</p>\n<h3 id=\"2-Unit-型別\"><a href=\"#2-Unit-型別\" class=\"headerlink\" title=\"2. Unit 型別\"></a>2. Unit 型別</h3><p>在 Java 中，當我們所設計的 function 不需回傳值時，我們會使用到 void 型別，而在 Kotlin 可使用 Unit 型別代替，而且若我們不特地為 function 設定回傳型態時，Kotlin 會自動幫我們預設型態為 Unit 型別，會返回 Unit 型別，例如以下範例。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> username = getUserName()</span><br><span class=\"line\">    println(username::<span class=\"keyword\">class</span>.simpleName) <span class=\"comment\">// 印出 Unit 型別</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserName</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Nothing-型別\"><a href=\"#3-Nothing-型別\" class=\"headerlink\" title=\"3. Nothing 型別\"></a>3. Nothing 型別</h3><p>Nothing 型別其實類似於 Unit，Nothing 型別也是不返回任何東西，但差別在於 Nothing 型別意味著此函數不可能成功執行完成，只會拋出異常或是再也回不去函數呼叫的地方。</p>\n<p>而 Nothing? 型別則會有一個使用情境，在 Java 中，void不能是變數的型別。也不能被當數值列印輸出。但是，在Java中有個包裝類Void是 void 的自動裝箱型別，如果我們想讓 function 返回型別永遠是 null 的話，可以把返回型別置為這個大寫的V的Void型別，而 Void 即對應 Kotlin 中的 Nothing? 型別。</p>\n<p>範例(1) 使用 Nothing 型別</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    getUserName() <span class=\"comment\">// 使用 Nothing 型別</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserName</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Nothing</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> NotImplementedError() <span class=\"comment\">// 丟出異常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>範例(2) 使用 Nothing? 型別</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    getUserName() <span class=\"comment\">// 使用 Nothing? 型別</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserName</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Nothing</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 保持回傳 null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kotlin-轉換-Java-Code\"><a href=\"#Kotlin-轉換-Java-Code\" class=\"headerlink\" title=\"Kotlin 轉換 Java Code\"></a>Kotlin 轉換 Java Code</h2><p>有時候我們可能會好奇在 Kotlin 所撰寫的程式，實際轉換為 Java 會是怎麼樣的語法，此時我們可以利用 intellij 內建的工具進行轉換觀察。</p>\n<p>在 Intellij 連續按 Shift 鍵兩次，搜尋「show kotlin」關鍵字，選擇「Show Kotlin Bytecode」，會出現Kotlin位元組碼工具視窗，再點擊「Decompile」按鈕即可觀看轉譯的Java 程式碼。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179AFv0fulGrw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200912/20121179AFv0fulGrw.png\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[官方] <a href=\"https://kotlinlang.org/docs/tutorials/kotlin-for-py/introduction.html\">Kotlin 官方文件</a></li>\n<li>[網站] <a href=\"http://blog.tonycube.com/2020/07/kotlin-by-example-2-basic-variable-types.html\">Kotlin 實戰範例</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 04] 遠征 Kotlin × 流程控制","url":"/2020/10/11/ironman-2020-04/","content":"<p>此篇將介紹 Kotlin 在流程控制相關語法與特性，在 Kotlin 世界中，條件運算式、迴圈使用方式與其他程式語言相似，這邊快速帶大家了解在 Kotlin 中如何操作。</p>\n<h2 id=\"條件判斷\"><a href=\"#條件判斷\" class=\"headerlink\" title=\"條件判斷\"></a>條件判斷</h2><h3 id=\"1-if-else-操作\"><a href=\"#1-if-else-操作\" class=\"headerlink\" title=\"1. if..else 操作\"></a>1. if..else 操作</h3><p>在專案開發中，我們經常會使用到條件判斷來處理邏輯問題，我們可以直接利用下面範例來觀看 Kotlin 在 <code>if..else</code> 的操作，參考如下：</p>\n<p>範例是當我們輸入分數（0-100）時，程式會依據所輸入的分數輸出對應的訊息</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;請輸入分數：&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 宣告 Score 變數並將使用者輸入數值轉為 Int</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> score: <span class=\"built_in\">Int</span> = readLine()!!.toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 利用 if 判斷輸出對應結果</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (score == <span class=\"number\">100</span>) &#123;        <span class=\"comment\">// 當分數為 100 時</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;恭喜考滿分&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) &#123;  <span class=\"comment\">// 當分數大於 60 時</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;恭喜及格&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">0</span>) &#123;   <span class=\"comment\">// 當分數大於 0 且小於 60 時</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;再接再勵&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;數值必須介於 0 - 100 之間&quot;</span>)  <span class=\"comment\">// 當數值不是介於 0 - 100 時</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>備註： <code>!!</code> 操作符號為<code>非空斷言（Not-null assertion operator）</code>，表示我們認為輸入的數值不會是空值，若為空值則會立即出現錯誤狀況，而假如我們不使用 <code>!!</code> 操作符號時，Intellij 編輯器會告訴我們轉型會有錯誤，可參考下圖實際狀況：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200913/20121179wHHDQvaUeD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200913/20121179wHHDQvaUeD.png\"></p>\n</blockquote>\n<p>而與其他語言相比，Kotlin 比較特別的是條件判斷式可根據條件同時進行變數賦值，我們將上面範例改為以下程式：</p>\n<p>此範例我們改變上面範例，使用判斷式賦值方法將分數所對應的回應字串回傳給 <code>output</code> 變數，再印出結果</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;請輸入分數：&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 宣告 score 變數並將使用者輸入數值轉為 Int</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> score: <span class=\"built_in\">Int</span> = readLine()!!.toInt()</span><br><span class=\"line\">    <span class=\"comment\">// 宣告 output 變數儲存分數對應的回應字串</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> output: String =</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score == <span class=\"number\">100</span>) <span class=\"comment\">// 當分數為 100 時</span></span><br><span class=\"line\">            <span class=\"string\">&quot;恭喜考滿分&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) <span class=\"comment\">// 當分數大於 60 時</span></span><br><span class=\"line\">            <span class=\"string\">&quot;恭喜及格&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">0</span>) <span class=\"comment\">// 當分數大於 0 且小於 60 時</span></span><br><span class=\"line\">            <span class=\"string\">&quot;再接再勵&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">// 當數值不是介於 0 - 100 時</span></span><br><span class=\"line\">            <span class=\"string\">&quot;成績輸入錯誤&quot;</span></span><br><span class=\"line\">    println(output)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-When-運算式\"><a href=\"#2-When-運算式\" class=\"headerlink\" title=\"2. When 運算式\"></a>2. When 運算式</h3><p>Kotlin 與其他程式語言比較不同的還有 <code>when</code> 運算式， 在 Kotlin 中，沒有提供其他語言常見的 <code>switch</code> 表達式，而是提供 <code>when</code> 表達式，<code>when</code> 是 Kotlin 的另一個控制流程語法，允許開發者編寫條件式，當滿足某個條件時執行對應程式碼，語法上非常簡潔，條件與執行程式用 <code>→</code> 箭頭符號語法進行配對，此方法適合三到四個流程情況使用，範例如下：</p>\n<p>此範例先定義一個 <code>score</code> 變數，再利用 <code>when</code> 表達式進行分數判斷，再回傳對應的訊息，此部份記得此表達式與傳統 <code>switch</code> 不同，<code>when</code> 在條件結束時不需要加上 <code>break</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;請輸入分數：&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 宣告 score 變數並將使用者輸入數值轉為 Int</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> score: <span class=\"built_in\">Int</span> = readLine()!!.toInt()</span><br><span class=\"line\">    <span class=\"comment\">// 宣告 comment 變數並將分數對應的回應字串儲存</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> comment: String = <span class=\"keyword\">when</span> (score) &#123;</span><br><span class=\"line\">        <span class=\"number\">100</span> -&gt; <span class=\"string\">&quot;恭喜滿分&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">60</span>..<span class=\"number\">99</span> -&gt; <span class=\"string\">&quot;恭喜及格&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">60</span> -&gt; <span class=\"string\">&quot;再接再勵&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"string\">&quot;分數輸入錯誤&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(comment)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>when</code> 也可以同時多條件判斷，我們試著將上面範例修改為以下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;請輸入分數：&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 宣告 score 變數並將使用者輸入數值轉為 Int</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> score: <span class=\"built_in\">Int</span> = readLine()!!.toInt()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> comment: String = <span class=\"keyword\">when</span> (score) &#123;</span><br><span class=\"line\">        <span class=\"number\">100</span> -&gt; <span class=\"string\">&quot;恭喜滿分&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">60</span>..<span class=\"number\">99</span> -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;表現優良&quot;</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;恭喜及格&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">60</span> -&gt; <span class=\"string\">&quot;再接再勵&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"string\">&quot;分數輸入錯誤&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(comment)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Elvis-語法進行null-判斷\"><a href=\"#3-Elvis-語法進行null-判斷\" class=\"headerlink\" title=\"3. Elvis 語法進行null 判斷\"></a>3. Elvis 語法進行null 判斷</h3><p>Kotlin 還有提供一個簡潔的語法－<code>Elvis</code>，在實務開發中，我們經常會遇到需要判斷該變數目前是否為 <code>null</code> 的情況，若為 <code>null</code>，則有預設值進行替代或拋出錯誤提醒，原先情況我們可能會如下範例進行撰寫：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> username: String? = <span class=\"string\">&quot;Devin&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> usernameLength: <span class=\"built_in\">Int</span> =</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (username == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            username.length</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    println(usernameLength) <span class=\"comment\">// 輸出 username 字元長度 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而 Kotlin 提供 <code>elvis</code> 語法，可以簡單處理這種情況：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若為空，則回傳 0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> username: String? = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> usernameLength: <span class=\"built_in\">Int</span> = username?.length ?: <span class=\"number\">0</span></span><br><span class=\"line\">    println(usernameLength) <span class=\"comment\">// 輸出 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拋出錯誤</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> password: String? = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> passwordLength: <span class=\"built_in\">Int</span> = password?.length ?: <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">&quot;資料為 null&quot;</span>)</span><br><span class=\"line\">    println(passwordLength) <span class=\"comment\">// 輸出 Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: 資料為 null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>?:</code> 即可檢查對應的值是否為 <code>null</code>，若為否，則回傳右邊的數值，此數值若開發者不想賦予任何值，也可以使用 <code>return</code> 回傳</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> username: String? = <span class=\"string\">&quot;Devin&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> usernameLength: <span class=\"built_in\">Int</span> = username?.length ?: <span class=\"keyword\">return</span></span><br><span class=\"line\">println(usernameLength) <span class=\"comment\">// 此行不會執行</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迴圈使用\"><a href=\"#迴圈使用\" class=\"headerlink\" title=\"迴圈使用\"></a>迴圈使用</h2><p>迴圈是程式依據設定的條件進行重複工作，當條件為真就持續進行，反之就結束，而 Kotlin 在迴圈方法上提供與Java 相同，都有 <code>for</code> 、<code>while</code>、 <code>do while</code> 等方法，其中 Kotlin 迴圈操作的方式非常像 Python，如下範例所示 － 利用 <code>for</code> 迴圈將集合內所有元素逐步印出：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 for in 迴圈</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> names = listOf(<span class=\"string\">&quot;Anne&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Jeff&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> names) &#123;</span><br><span class=\"line\">    println(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 while 迴圈</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (number &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    println(number)</span><br><span class=\"line\">    number++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 do...while 迴圈</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> doorPassword = <span class=\"string\">&quot;20200913&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> keyInAmount= <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;請輸入密碼進門&quot;</span>）</span><br><span class=\"line\">    <span class=\"keyword\">val</span> password = readLine()!! <span class=\"comment\">// 轉換 nullable to non-nullable</span></span><br><span class=\"line\">    keyInAmount++</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (password != doorPassword &amp;&amp; keyInAmount &lt; <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Kotlin 也提供 <code>Ranges</code> 表達式可讓開發者快速建立兩個值的區間，一般通常會與<code>in</code> 、<code>in!</code> 一起使用，其餘操作如下說明與實作範例，建議閱讀朋友可以直接：</p>\n<ol>\n<li><code>..</code> 操作符號表示為數值區間，例如 <code>x..y</code> 即為數值範圍在 <code>x</code> 與 <code>y</code> 區間</li>\n<li><code>until</code> 類似 <code>..</code> 操作符號，差別在於最後的數值會是<code>目標值 -1</code>，例如 <code>1 until 3</code> 會印出「1 2」</li>\n<li><code>rangeTo</code> 與 <code>..</code> 屬於相同效果</li>\n<li><code>downTo</code> 表示為反向區間，例如 <code>x downTo y</code> 即為 <code>x</code> 遞減到 <code>y</code></li>\n<li><code>step</code> 為指定區間遞增或遞減值，例如 <code>x .. y step 2</code> 即為 <code>x</code> 每次遞增 <code>2</code> 到目標值 <code>y</code></li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立1-4區間數值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">4</span>) print(i) <span class=\"comment\">// 此段會印出「1 2 3 4」</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// rangeTo 與 .. 屬於相同效果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span>.rangeTo(<span class=\"number\">4</span>)) println(i) <span class=\"comment\">//此段會印出「1 2 3 4」</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// until 與 .. 類似相同效果，差別在最終值會-1，</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span> until <span class=\"number\">4</span>) println(i) <span class=\"comment\">// 此段會印出「1 2 3」</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// downTo 為反向區間使用</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">4</span> downTo <span class=\"number\">1</span>) print(i) <span class=\"comment\">// 此段會印出「4 3 2 1」</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// last方法會只輸出區間最後一個值，若要輸出第一個值，可以使用 first 方法</span></span><br><span class=\"line\">    println((<span class=\"number\">1</span>..<span class=\"number\">12</span> step <span class=\"number\">2</span>).last)  <span class=\"comment\">// 此段會印出「11」</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 組合 downTo 與 step 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">8</span> downTo <span class=\"number\">5</span> step <span class=\"number\">2</span>) print(i)  <span class=\"comment\">// 此段會印出「8 6」</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 區間也可以使用字母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"string\">&#x27;a&#x27;</span> .. <span class=\"string\">&#x27;d&#x27;</span>) println(i) <span class=\"comment\">// 此段會印出「a b c d」</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在其他程式語言中，我們常會看見迴圈可以搭配 <code>break</code> 與 <code>continue</code> 方法， <code>break</code> 可讓當前迴圈直接整個結束，<code>continue</code> 則是可讓迴圈結束單次運行，而在 Kotlin 可以為迴圈指定名稱，當我們今天運用巢狀迴圈時，可指定要讓哪一個迴圈結束，如下範例：</p>\n<p>迴圈在 <code>item1</code> 為 1 與 <code>item2</code> 為 0 時，結束外層單次中斷</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 命名外層迴圈為名稱「a」</span></span><br><span class=\"line\">    <span class=\"symbol\">a@</span><span class=\"keyword\">for</span>(item1 <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 命名內層迴圈為名稱「b」</span></span><br><span class=\"line\">        <span class=\"symbol\">b@</span><span class=\"keyword\">for</span>(item2 <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 當符合條件時結束外層（a）迴圈跳過此次運行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(item1 == <span class=\"number\">1</span> &amp;&amp; item2 == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span><span class=\"symbol\">@a</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"variable\">$element1</span> =&gt; <span class=\"variable\">$element2</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 印出結果為</span></span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; 2</span></span><br><span class=\"line\"><span class=\"comment\">// 2 =&gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// 2 =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2 =&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>迴圈在 <code>item1</code> 為 1 與 <code>item2</code> 為 1 時，結束外層迴圈</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 命名外層迴圈為名稱「a」</span></span><br><span class=\"line\">    <span class=\"symbol\">a@</span><span class=\"keyword\">for</span>(item1 <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 命名內層迴圈為名稱「b」</span></span><br><span class=\"line\">        <span class=\"symbol\">b@</span><span class=\"keyword\">for</span>(item2 <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;<span class=\"variable\">$element</span> =&gt; <span class=\"variable\">$element1</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 當符合條件時結束整個外層（a）迴圈</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(item1 == <span class=\"number\">1</span> &amp;&amp; item2 == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span><span class=\"symbol\">@a</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 印出結果為</span></span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; 2</span></span><br><span class=\"line\"><span class=\"comment\">// 1 =&gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1 =&gt; 1</span></span><br></pre></td></tr></table></figure>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 05] 遠征 Kotlin × 函數介紹","url":"/2020/10/11/ironman-2020-05/","content":"<p>這篇將帶大家了解 Kotlin 在函數 Function 的基本操作，函數 Function 在程式設計中扮演非常重要的角色，通常使用 function 會有以下好處：</p>\n<ul>\n<li>減少撰寫重複程式碼，提高程式維護性</li>\n<li>將程式碼以有意義的命名進行組織</li>\n<li>若有相同流程的行為，可藉由參數傳遞進行處理</li>\n</ul>\n<h2 id=\"函數定義\"><a href=\"#函數定義\" class=\"headerlink\" title=\"函數定義\"></a>函數定義</h2><p>Function 是我們為了能夠完成某項特定任務或可重新使用的程式碼區塊，在 Kotlin 中是使用 fun 關鍵字來定義一個函式，其定義格式可參考下圖與利用一個範例進行說明：</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200914/20121179arGftABTNX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200914/20121179arGftABTNX.png\"></p>\n<p>此範例建立一個 <code>getSumValue</code> Function 進行兩數加總，在 <code>main</code> function 進行呼叫並印出結果</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = getSumValue(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 傳入參數 1 和 參數 2</span></span><br><span class=\"line\">    println(sum) <span class=\"comment\">// 印出 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getSumValue</span><span class=\"params\">(x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = x + y <span class=\"comment\">// 計算</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"預設參數值\"><a href=\"#預設參數值\" class=\"headerlink\" title=\"預設參數值\"></a>預設參數值</h2><p>Kotlin 在 Function 中提供預設函數參數值方法，假設我們想呼叫某一個函數，但不傳遞任何參數，此時就可以使用參數預設值作為函數的參數值，範例如下：</p>\n<p>修改前一個範例，當我們沒有傳入任何參數給 <code>getSumValue</code> 方法時，照理應回傳 <code>0</code> 的結果，此時可設定兩個參數預設值為 <code>0</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = getSumValue()</span><br><span class=\"line\">    println(sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 利用預設參數 x = 0, y = 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getSumValue</span><span class=\"params\">(x: <span class=\"type\">Int</span> = <span class=\"number\">0</span>, y: <span class=\"type\">Int</span> = <span class=\"number\">0</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = x + y <span class=\"comment\">// 計算</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"具名參數\"><a href=\"#具名參數\" class=\"headerlink\" title=\"具名參數\"></a>具名參數</h2><p>在前面第一個範例中，我們會發現 Function 呼叫時，必須根據函式參數順序（x, y）進行參數傳遞，而 Kotlin 有提供「具名參數」方法，讓我們可以不用照著函數定義時的參數順序進行呼叫，而是呼叫時搭配參數名稱進行賦值呼叫，此作法可以讓我們的程式碼更清晰直觀，例如以下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = getSumValue(y = <span class=\"number\">20</span>, x = <span class=\"number\">30</span>) <span class=\"comment\">// 加入參數名稱就可以不用管實際函數參數順序</span></span><br><span class=\"line\">    println(sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getSumValue</span><span class=\"params\">(x: <span class=\"type\">Int</span> = <span class=\"number\">0</span>, y: <span class=\"type\">Int</span> = <span class=\"number\">0</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sum = x + y <span class=\"comment\">// 計算</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名函數-Anonymous-Function\"><a href=\"#匿名函數-Anonymous-Function\" class=\"headerlink\" title=\"匿名函數 Anonymous Function\"></a>匿名函數 Anonymous Function</h2><p>前面介紹的函數其實都是使用<code>具名函數</code>來定義，使用此方法就必須賦予一個函數名稱，而<code>匿名函數</code>則相反，不需要給予函數名稱，<code>匿名函數</code>也可稱為 <code>Lambda 運算式</code>，它通常具有以下特性：</p>\n<ol>\n<li>此函數不需要 <code>return</code> 關鍵字返回資料，則是會隱式自動回傳函數最後一行結果或運算式</li>\n<li>在定義<code>只有一個參數</code>的匿名函數中，可以使用 <code>it</code> 關鍵字進行呼叫表示該參數</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = arrayOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 原始資料</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> multiply = &#123;x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Int</span> -&gt; x * y&#125; <span class=\"comment\">// 提供一個乘法匿名函數，自動回傳最後一行運算式（x * y）</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span>.forEach &#123; println(multiply(it, <span class=\"number\">3</span>)) &#125; <span class=\"comment\">// 只有一個參數時，可使用 it 代替 item 數值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出 3 6 9</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高階函數-Higher-Order-Functions\"><a href=\"#高階函數-Higher-Order-Functions\" class=\"headerlink\" title=\"高階函數 Higher-Order Functions\"></a>高階函數 Higher-Order Functions</h2><p>在 Kotlin 中支援 <code>Higher - Order Function（高階函數）</code> 方法，所謂高階函數是指我們可以將 <code>Function 作為變數</code>來進行傳遞，或是 Function 的返回值是一個 <code>Function 類型進行回傳</code>，此種特性也代表 Kotlin Function 是支援 <code>First-class-object （第一類物件）函數</code>。</p>\n<p>我們利用字串反轉應用為範例如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 宣告反轉函數</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> reverseMethod: (String) -&gt; String = &#123; text: String -&gt; text.reversed() &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 呼叫欲反轉字串與帶入反轉函數</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result: String = getReverseResult(<span class=\"string\">&quot;字串反轉&quot;</span>, reverseMethod)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;反轉結果為： <span class=\"variable\">$result</span>&quot;</span>) <span class=\"comment\">// 反轉結果為： 轉反串字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 傳入字串與 Function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getReverseResult</span><span class=\"params\">(text: <span class=\"type\">String</span>, callMethod: (<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callMethod(text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函數返回值為一個函數類型，可參考下面的範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = listOf(<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>) <span class=\"comment\">// 定義一個數值 List</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> dividedByTwo = <span class=\"keyword\">data</span>.filter(divide(<span class=\"number\">2</span>)) <span class=\"comment\">//被2整除的元素列表</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> dividedByThree = <span class=\"keyword\">data</span>.filter(divide(<span class=\"number\">3</span>)) <span class=\"comment\">//被3整除的元素列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出「可被 2 整除的數值有: [10, 12, 14]」</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;可被 2 整除的數值有: <span class=\"variable\">$dividedByTwo</span>&quot;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出「可被 3 整除的數值有: [12, 15]」</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;可被 3 整除的數值有: <span class=\"variable\">$dividedByThree</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 傳入要除的數值，回傳則為一個函數 function，傳入一個數值判斷是否可整除（回傳 Boolean）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">divide</span><span class=\"params\">(number: <span class=\"type\">Int</span>)</span></span>: (<span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; it: <span class=\"built_in\">Int</span> -&gt; it % number == <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 06] 遠征 Kotlin × Collections 介紹","url":"/2020/10/11/ironman-2020-06/","content":"<p>集合（Collections）是可以儲存一群相同型別資料的物件，Kotlin 集合類型主要有 <code>List</code>、<code>Set</code>、<code>Map</code>，又可再細分為<code>可變（mutable ）集合</code>與<code>不可變（immutable）集合</code>， Kotlin 官方這邊有提供一張 Collection 結構圖（<a href=\"https://kotlinlang.org/docs/reference/collections-overview.html\">參考 Kotlin 官方文件</a>）：</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200915/20121179jcIlfB7fvR.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200915/20121179jcIlfB7fvR.png\"></p>\n<p>我們可以從上圖觀察出 Collection 是集合結構的根節點 <code>root</code>，而 Collection 還繼承了 <code>Iterable</code> interface<code>&lt;T&gt;</code>，其中 <code>Iterable</code>、<code>Collection</code>、<code>List</code>、<code>Set</code>與<code>Map</code> 都會再延伸出可變（Mutable）集合，清楚表達出集合成員們的關係。</p>\n<p>Collection 既然作為根節點，我們可以觀察它內部是如何定義，下圖會發現它的內部除了繼承 Iterable 以外，也包含了 <code>size</code>、<code>isEmpty</code>、<code>contains</code>與 <code>override iterator</code> 迭代元素的操作：</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200915/20121179l4vP4g08Is.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200915/20121179l4vP4g08Is.png\"></p>\n<p>我們利用一個範例進行測試，在下面範例中我們先定義一個 <code>List</code> 與一個 <code>Set</code> 的集合，再定義一個參數為 Collection 的函數，觀察兩者是否會印出一樣的值：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定義一個 List 集合</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> stringList = listOf(<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>)</span><br><span class=\"line\">    printAll(stringList) <span class=\"comment\">// 印出 one two three</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定義一個 Set 集合</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> stringSet = setOf(<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>)</span><br><span class=\"line\">    printAll(stringSet) <span class=\"comment\">// 印出 one two three</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printAll</span><span class=\"params\">(strings: <span class=\"type\">Collection</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(s <span class=\"keyword\">in</span> strings) print(<span class=\"string\">&quot;<span class=\"variable\">$s</span> &quot;</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合類型\"><a href=\"#集合類型\" class=\"headerlink\" title=\"集合類型\"></a>集合類型</h2><ul>\n<li><p>List 是一個<code>有序</code>集合，可利用<code>索引</code>來存取項目（item）資料，同樣的項目數值在 list 中<strong>可重複出現多次</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> numbers = listOf(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 印出集合共有幾個元素</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;集合共有 <span class=\"subst\">$&#123;numbers.size&#125;</span> 個元素&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 索引起始值為 0，故 get(2) 是取得第三個數值</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;第三個元素為 <span class=\"subst\">$&#123;numbers.get(<span class=\"number\">2</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 同上，索引起始值為 0，故 numbers[3] 是取得第四個數值</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;第四個元素為 <span class=\"subst\">$&#123;numbers[<span class=\"number\">3</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 數值 3 所在索引值為 2</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;利用數值找出所在的索引值 <span class=\"subst\">$&#123;numbers.indexOf(<span class=\"number\">3</span>)&#125;</span>&quot;</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 此段程式會印出下列訊息：</span></span><br><span class=\"line\">    <span class=\"comment\">// 集合共有 4 個元素</span></span><br><span class=\"line\">    <span class=\"comment\">// 第三個元素為 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 第四個元素為 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 利用數值找出所在的索引值 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Set 是一個<code>無序</code>集合，與 List 最大差別在於 Set <strong>不可儲存重複數值項目</strong>，對於 Set 來說，元素的顺序並不重要</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> numbers = setOf&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 因 set 集合元素值不會重複，故 size 會為 3</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;集合共有 <span class=\"subst\">$&#123;numbers.size&#125;</span> 個元素&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回傳 true</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;集合是否存在 3 的元素 <span class=\"subst\">$&#123;numbers.contains(<span class=\"number\">3</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出下列訊息：</span></span><br><span class=\"line\">    <span class=\"comment\">// 集合共有 3 個元素</span></span><br><span class=\"line\">    <span class=\"comment\">// 集合是否存在 3 的元素 true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Map 是由<code>鍵值（Key）</code>與<code>數值（Value）</code>所組成的集合，Key <strong>必須符合唯一性</strong>，每個 Key 值都會搭配一個 Value</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> numbers = mapOf&lt;String, <span class=\"built_in\">Int</span>&gt;(<span class=\"string\">&quot;key1&quot;</span> to <span class=\"number\">1</span>, <span class=\"string\">&quot;key2&quot;</span> to <span class=\"number\">4</span>, <span class=\"string\">&quot;key3&quot;</span> to  <span class=\"number\">3</span>, <span class=\"string\">&quot;key4&quot;</span> to  <span class=\"number\">4</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;集合共有 <span class=\"subst\">$&#123;numbers.size&#125;</span> 個元素&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 檢查是否有該索引值，若存在則回傳 true</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;集合是否存在 key2 的索引值 <span class=\"subst\">$&#123;<span class=\"string\">&quot;key2&quot;</span> in numbers&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 檢查是否有該數值，若有則回傳 true</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;集合是否存在 4 的數值 <span class=\"subst\">$&#123;numbers.containsValue(<span class=\"number\">4</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出下列訊息：</span></span><br><span class=\"line\">    <span class=\"comment\">// 集合共有 4 個元素</span></span><br><span class=\"line\">    <span class=\"comment\">// 集合是否存在 key2 的索引值 true</span></span><br><span class=\"line\">    <span class=\"comment\">// 集合是否存在 4 的數值 true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"可變（mutable）與不可變（immutable）\"><a href=\"#可變（mutable）與不可變（immutable）\" class=\"headerlink\" title=\"可變（mutable）與不可變（immutable）\"></a>可變（mutable）與不可變（immutable）</h3><p>在文章開頭有提到， Kotlin 在集合這塊會再細分為<code>可變（mutable）集合</code>與<code>不可變（immutable）集合</code>，依照文章開頭的 Kotlin 官方集合結構圖會發現，所有的可變集合都是繼承自不可變的集合，兩者只差在可變集合可以<strong>改變原集合的元素數值、順序、數量</strong>等，而不可變集合只能對元素進行<strong>讀取和查詢</strong>，我們利用下面範例進行測試：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定義一個不可變集合 List，將無法針對內容修改</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> list = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定義一個可變集合 mutableList，此集合可修改內容</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> mutableList = mutableListOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    list[<span class=\"number\">0</span>] = <span class=\"number\">1</span> <span class=\"comment\">// 此行會出現編譯錯誤，錯誤訊息可參考下圖</span></span><br><span class=\"line\">    mutableList[<span class=\"number\">0</span>] = <span class=\"number\">5</span>  <span class=\"comment\">// 成功編譯</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>編譯錯誤可參考下圖訊息，會發現到 list 集合無法修改內容：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200915/201211791zQUFsuHwr.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200915/201211791zQUFsuHwr.png\"></p>\n<h2 id=\"集合操作\"><a href=\"#集合操作\" class=\"headerlink\" title=\"集合操作\"></a>集合操作</h2><p>在實務開發中，我們經常會遇到產品的某個業務邏輯問題需要操作集合，此時就會需要了解集合的操作方式，像是如何建立一個空集合、如何加入元素到集合、如何進行集合複製、如何逐步印出集合內所有元素、如何在集合取得特定條件的元素等方法，我們利用一個範例進行深入探討：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立一個空集合 List</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> list: MutableList&lt;<span class=\"built_in\">Int</span>&gt; = mutableListOf&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">    list.add(<span class=\"number\">1</span>) <span class=\"comment\">// 加入元素 1</span></span><br><span class=\"line\">    list.add(<span class=\"number\">2</span>) <span class=\"comment\">// 加入元素 2</span></span><br><span class=\"line\">    list.add(<span class=\"number\">3</span>) <span class=\"comment\">// 加入元素 3</span></span><br><span class=\"line\">    list.add(<span class=\"number\">4</span>) <span class=\"comment\">// 加入元素 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 此段會進行集合複製，利用 toMutableList() 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> copyList = list.toMutableList()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 嘗試印出 copyList 共有幾個元素，此段會印出 「copyList 有 4 個元素」</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;copyList 有 <span class=\"subst\">$&#123;copyList.size&#125;</span> 個元素&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 嘗試利用 forEach 方法逐步印出集合內元素，結果印出「1 2 3 4 」結果</span></span><br><span class=\"line\">    copyList.forEach &#123; print(<span class=\"string\">&quot;<span class=\"variable\">$it</span> &quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 嘗試利用 filter 方法加入偶數判斷條件，印出「2 4」結果</span></span><br><span class=\"line\">    copyList.filter &#123; it % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;.forEach &#123; print(<span class=\"string\">&quot;<span class=\"variable\">$it</span> &quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;集合取值方法&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// slice 是利用區間索引值進行取值，此行會印出 [2, 3, 4]</span></span><br><span class=\"line\">    println(copyList.slice(<span class=\"number\">1</span>..<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// take 是取得0-2的元素，此行會印出 [1, 2]</span></span><br><span class=\"line\">    println(copyList.take(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// takeList 則是取得倒數0-2的元素，此行會印出 [3, 4]</span></span><br><span class=\"line\">    println(copyList.takeLast(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// drop 會回傳指定索引的後面全部元素，此行會印出 [3, 4]</span></span><br><span class=\"line\">    println(copyList.drop(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 此段會印出 copyList 共有 4 個元素</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;copyList 有 <span class=\"subst\">$&#123;copyList.size&#125;</span> 個元素&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://kotlinlang.org/docs/reference/collections-overview.html\">Kotlin 官方文件－Collection</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 07] 遠征 Kotlin × 類別與物件","url":"/2020/10/11/ironman-2020-07/","content":"<h2 id=\"類別定義\"><a href=\"#類別定義\" class=\"headerlink\" title=\"類別定義\"></a>類別定義</h2><p>Kotlin 在物件導向這塊與其他程式語言類似，類別上也包含建構式、函式、屬性、物件宣告等，而所謂類別就像一張藍圖，以蓋房子為例，它只是給予我們如何蓋出房子的細節，並非是一棟蓋好的房子。</p>\n<p>在 Kotlin 使用關鍵字 <code>class</code> 宣告類別，主要包含兩類內容：<code>行為</code> 和 <code>資料</code>，以 <code>類別函數</code> 定義類別的<code>行為</code>，以 <code>類別屬性</code> 增加類別的 <code>資料</code>，操作如下範例所示：</p>\n<p>我們可以透過下面範例觀察出三件事</p>\n<ol>\n<li>在定義類別時，我們會使用到 <code>class</code> 關鍵字進行定義</li>\n<li>在呼叫類別時，不會像 Java 需要使用 <code>new</code> 關鍵字進行實現（Instance），而是直接<strong>使用類別名稱再加上括號 ( )</strong> 即可</li>\n<li>在建立屬性時，若我們有 <code>取值 get</code> 或 <code>賦值 set</code> 需求時，不需要像 Java 必須在類別裡面建立 <code>getter</code> 與 <code>setter</code>，這些屬性的 <code>getter</code> 與 <code>setter</code> 是 Kotlin 編譯器為我們自動產生的，讓我們在程式碼中保持</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 呼叫類別與呼叫 printName 函數</span></span><br><span class=\"line\">    Person().printName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立 Person 類別（Class）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立 userName 屬性（Property）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userName: String = <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立 printName 函數（Function）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Name is <span class=\"variable\">$userName</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Kotlin 中，如果一個類別是空的，沒有內容，括號是可以直接省略的</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建構函數-Constructor\"><a href=\"#建構函數-Constructor\" class=\"headerlink\" title=\"建構函數 Constructor\"></a>建構函數 Constructor</h2><p>在 Java 的建構函數（Constructor）可以讓我們建構出多個不同參數的建構函數，但是 Java 每個建構函數都是同級別的，而在 Kotlin 中卻是分成兩級運算子（主建構函數與次建構函數），主建構函數是直接包含在類別名稱之後，次建構函數則是在類別裡面進行實現，我們利用下面範例進行觀察：</p>\n<p>下面範例是當我們加入主建構函數時的程式操作狀況</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在呼叫類別時，傳進去的參數是由主建構函式進行定義</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> person = Person(<span class=\"string\">&quot;devin&quot;</span>, <span class=\"string\">&quot;abc@gmail.com&quot;</span>)</span><br><span class=\"line\">    print(person.name) <span class=\"comment\">// 印出 Devin</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主建構函式定義臨時變數 _name 與 _email</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(_name: String, _email: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = _name</span><br><span class=\"line\">        <span class=\"comment\">// 呼叫 capitalize 方法會為數值設定為首字大寫</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field.capitalize()</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 呼叫 trim 方法會為傳進來的數值去除空白再儲存</span></span><br><span class=\"line\">            field = value.trim()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> email = _email</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面範例是加入次建構函數時，增加初始值設定與初始邏輯判斷</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> person = Person()</span><br><span class=\"line\">    print(person.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出下列結果</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用者未輸入參數</span></span><br><span class=\"line\">    <span class=\"comment\">// 路人甲</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(_name: String, _email: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = _name</span><br><span class=\"line\">        <span class=\"comment\">// 呼叫 capitalize 方法會為數值設定為首字大寫</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field.capitalize()</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 呼叫 trim 方法會為傳進來的數值去除空白再儲存</span></span><br><span class=\"line\">            field = value.trim()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> email = _email</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 若主建構函數沒有帶入參數，則自動帶入預設值</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() : <span class=\"keyword\">this</span>(_name = <span class=\"string\">&quot;路人甲&quot;</span>, _email = <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 帶入初始邏輯條件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"string\">&quot;路人甲&quot;</span>) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;使用者未輸入參數&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面範例中，我們在次建構函數使用了預設參數方法，但實際上此方法在主建構函數與次建構函數都可以使用，我們也可以將上面範例的預設值改為在主建構函數使用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> person = Person()</span><br><span class=\"line\">    print(person.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出下列結果</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用者未輸入參數</span></span><br><span class=\"line\">    <span class=\"comment\">// 路人甲</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改主建構函數預設值</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(_name: String = <span class=\"string\">&quot;路人甲&quot;</span>, _email: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = _name</span><br><span class=\"line\">        <span class=\"comment\">// 呼叫 capitalize 方法會為數值設定為首字大寫</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field.capitalize()</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 呼叫 trim 方法會為傳進來的數值去除空白再儲存</span></span><br><span class=\"line\">            field = value.trim()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> email = _email</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() : <span class=\"keyword\">this</span>(_email = <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 帶入初始邏輯條件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"string\">&quot;路人甲&quot;</span>) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;使用者未輸入參數&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了主次建構函數可設置初始值以外，我們也可以另外為函數定義一個初始化區塊 init，此區塊除了設定初始值以外，也可以進行數值的有效性檢查，可觀察以下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> person = Person(<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    print(person.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出下列結果</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用者未輸入參數</span></span><br><span class=\"line\">    <span class=\"comment\">// 路人甲</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(_name: String, _email: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = _name</span><br><span class=\"line\">        <span class=\"comment\">// 呼叫 capitalize 方法會為數值設定為首字大寫</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field.capitalize()</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 呼叫 trim 方法會為傳進來的數值去除空白再儲存</span></span><br><span class=\"line\">            field = value.trim()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> email = _email</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 利用初始化區塊（init）進行初始值設定與有效值檢查</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        name = <span class=\"string\">&quot;路人甲&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// 帶入參數檢查判斷，若檢查不通過，則拋出 IllegalArgumentException 異常</span></span><br><span class=\"line\">        <span class=\"comment\">// 異常結果可看下面圖片顯示</span></span><br><span class=\"line\">        require(name.isNotBlank()) &#123; <span class=\"string\">&quot;使用者未輸入姓名參數&quot;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當我們在呼叫類別時，可加入有效值判斷，當檢查不通過時，會如下面圖片呈現出 IllegalArgumentException 的錯誤訊息</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200916/201211799cesvTZGJy.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200916/201211799cesvTZGJy.png\"></p>\n<h2 id=\"物件（Object）介紹\"><a href=\"#物件（Object）介紹\" class=\"headerlink\" title=\"物件（Object）介紹\"></a>物件（Object）介紹</h2><p>前面我們介紹類別（Class）的介紹，我們會發現，假設我們有很多個類別需求，只需多次呼叫類別即可，但產生多個類別的時候，我們可能會遇到一個問題－如何進行類別之間的資料溝通，此時我們就必須要為這樣的需求進行處理。</p>\n<p>而假設我們需求只想要使用一個實例（Instance）來管理整個程式的狀態，我們就可以定義一個單例（Singleton）即可，而在 Kotlin 程式語言，根據上述需求，我們可以使用 object 關鍵字進行定義出一個在應用程式中只有它存在的實例</p>\n<p>故我們可以歸納出物件（Object）有幾個特性：</p>\n<ul>\n<li>整個應用程式中只會存在一個實例（Instance）</li>\n<li>相當於 Singleton 設計模式</li>\n</ul>\n<h2 id=\"物件宣告\"><a href=\"#物件宣告\" class=\"headerlink\" title=\"物件宣告\"></a>物件宣告</h2><p>物件宣告主要會利用 <code>object</code> 關鍵字進行定義物件（Object），在定義上類似於類別，也有初始區塊、屬性資料等操作方法，相對於類別，物件可自動實例化（Instance），但在 <code>object</code> 無法使用建構函數 Constructor，即無法在初始化時從外部傳遞參數進行實現，但我們利用一個範例進行觀察：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 呼叫Family object</span></span><br><span class=\"line\">    Family</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立物件</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Family &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立 object 資料</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> person = Person(_name = <span class=\"string\">&quot;devin&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始區塊</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;歡迎來到 Family 家族&quot;</span>)</span><br><span class=\"line\">        printFamilyMember()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立 object function</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printFamilyMember</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        print(<span class=\"string\">&quot;目前家族成員有：&quot;</span>)</span><br><span class=\"line\">        println(person.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"物件運算\"><a href=\"#物件運算\" class=\"headerlink\" title=\"物件運算\"></a>物件運算</h2><p>原本使用類別進行處理很重要，能夠幫助我們減少重複邏輯一再出現，而將邏輯抽象為一個新事物概念，但往往有時候需求上不見得都會有重複使用的狀況發生，有時候只會有一次性使用，這時候object 就可以幫助我們進行處理這樣的情境，將 object 作為<code>匿名類別</code>來使用，可參考下面範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立 object 匿名類別</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> userName: String = <span class=\"string\">&quot;Devin&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> email: String = <span class=\"string\">&quot;abc@gmail.com&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(person.userName) <span class=\"comment\">// 輸出「Devin」</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"伴生物件\"><a href=\"#伴生物件\" class=\"headerlink\" title=\"伴生物件\"></a>伴生物件</h2><p>如果我們在開發上想要把<code>類別實現</code>與<code>物件初始化</code>綁在一起，此時就可以考慮使用伴生物件，使用 <code>companion</code> 關鍵字，我們直接利用下面範例進行觀察：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 呼叫 Person 類別的伴生物件，再呼叫類別方法</span></span><br><span class=\"line\">    Person.<span class=\"keyword\">data</span>.printUserName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(_name: String = <span class=\"string\">&quot;&quot;</span>, _email: String = <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: String = _name</span><br><span class=\"line\">    <span class=\"keyword\">val</span> email: String = _email</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立伴生物件</span></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = Person(<span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;abc@gmail.com&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printUserName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 範例輸出結果為 Devin</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"資料類別\"><a href=\"#資料類別\" class=\"headerlink\" title=\"資料類別\"></a>資料類別</h2><p>在物件導向程式設計中，我們經常會建立專門儲存資料的類別，再將此類別進行實例化物件進行資料溝通，此物件我們會稱為<code>資料傳輸物件</code>（Data Transfer Object, DTO），在 Kotlin 中特別針對此物件設計一個「資料類別（Data Class）」，我們直接用一個範例來示範：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 實例化 person 物件</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> person1 = Person(<span class=\"string\">&quot;devin&quot;</span>, <span class=\"string\">&quot;abc@gmail.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 輸出</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;person1 姓名：<span class=\"subst\">$&#123;person1.name&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 資料拷貝</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> person2 = person1.copy()</span><br><span class=\"line\">    <span class=\"comment\">// 輸出</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;person2 姓名：<span class=\"subst\">$&#123;person2.name&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解構數值</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> (name, email) = person2</span><br><span class=\"line\">    <span class=\"comment\">// 輸出</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;解構輸出姓名：<span class=\"subst\">$&#123;name&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最後輸出結果</span></span><br><span class=\"line\">    <span class=\"comment\">// person1 姓名：devin</span></span><br><span class=\"line\">    <span class=\"comment\">// person2 姓名：devin</span></span><br><span class=\"line\">    <span class=\"comment\">// 解構輸出姓名：devin</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立 Person 資料類別</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> email: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 08] 遠征 Kotlin × 類別繼承、介面、抽象","url":"/2020/10/11/ironman-2020-08/","content":"<p>昨日我們已經介紹 Kotlin 類別的基本使用方式，接下來我們來談<code>繼承</code>、<code>介面</code>與<code>抽象</code>的使用方法，在 Kotlin 中，我們要使用<code>繼承</code>時，會有以下三件事要注意：</p>\n<ol>\n<li>需要使用 <code>：</code> 操作符號</li>\n<li>被繼承的類別必須在 <code>class</code> 前面加上 <code>open</code> 關鍵字</li>\n<li>若父類別的主建構函數（Primary Constructor）有參數，必須在繼承時帶入資料</li>\n</ol>\n<p>我們利用上面三點事項撰寫下面範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 呼叫 Author 類別</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> author = Author(<span class=\"string\">&quot;Devin&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出 Devin</span></span><br><span class=\"line\">    println(author.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加上 open 關鍵字代表此類別可被繼承</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(name: String)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: String = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立一個 Author 類別繼承 Person 類別</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span></span>(name: String) : Person(name)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>而當<code>子類別</code>繼承後，如果子類別要使用父類別的函數，我們就要使用到 <code>super</code> 關鍵字進行呼叫，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> man1 = SuperMan(<span class=\"string\">&quot;Devin&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> man2 = SuperMan(<span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;Eric@Eric.com&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    println(man1.name)    <span class=\"comment\">// 印出 Devin</span></span><br><span class=\"line\">    println(man1.email)   <span class=\"comment\">// 印出 &quot;&quot;</span></span><br><span class=\"line\">    println(man2.name)    <span class=\"comment\">// 印出 Eric</span></span><br><span class=\"line\">    println(man2.email)   <span class=\"comment\">// 印出 &quot;Eric@Eric.com&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> name: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> email: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: String, email: String) : <span class=\"keyword\">this</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperMan</span> : <span class=\"type\">Person &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: String) : <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: String, email: String) : <span class=\"keyword\">super</span>(name, email)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當子類別繼承父類別後，若子類別想要覆寫函數可使用 <code>override</code> 關鍵字，記得繼承的函數也要使用 <code>open</code> 關鍵字進行宣告，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> man = SuperMan(<span class=\"string\">&quot;Devin&quot;</span>)</span><br><span class=\"line\">    man.sayHello()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> name: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> email: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: String, email: String) : <span class=\"keyword\">this</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hi, 我是Person&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperMan</span> : <span class=\"type\">Person &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: String) : <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: String, email: String) : <span class=\"keyword\">super</span>(name, email)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 覆寫方法</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hi, 我是SuperMan&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Kotlin 中使用繼承時，要注意程式<code>執行先後順序</code>，我們會直接利用範例搭配下面步驟逐步觀察：</p>\n<ol>\n<li>程式會先執行 SuperMan 類別主要建構函數的 println 方法</li>\n<li>再進入父類別 Person ，執行該類別的 init 區塊程式</li>\n<li>再執行父類別 Person的次建構函數</li>\n<li>回到子類別，執行該類別的 init 區塊程式</li>\n<li>再因 main 函數呼叫 sayHello 方法，藉由 super 關鍵字呼叫父類別的 sayHello 函數</li>\n<li>最後才會執行子類別的 sayHello println 函數</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> man = SuperMan(<span class=\"string\">&quot;Devin&quot;</span>)</span><br><span class=\"line\">    man.sayHello()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">open</span> <span class=\"keyword\">val</span> name: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> email: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 執行步驟 2</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Person init 區塊&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 執行步驟 3</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: String, email: String) : <span class=\"keyword\">this</span>(name) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Person Name: <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 執行步驟 5</span></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hi, 我是Person&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 執行步驟 1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperMan</span></span>(<span class=\"keyword\">override</span> <span class=\"keyword\">val</span> name: String) : Person(name, email = <span class=\"string\">&quot;Test&quot;</span>.also &#123; println(<span class=\"string\">&quot;帶入 Email 資料&quot;</span>) &#125;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 執行步驟 4</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;SuperMan init 區塊&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 執行步驟 6</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.sayHello()</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hi, 我是SuperMan&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在繼承特性中，我們可以使用 <code>var</code> 定義的變數覆寫（override） <code>val</code> 父類別屬性\u001d，但要記得我們無法使用 <code>val</code> 覆寫（override） <code>var</code> 屬性，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    SuperMan(<span class=\"string\">&quot;devin&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定義可繼承的 Person 類別與 val name 屬性</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">open</span> <span class=\"keyword\">val</span> name: String)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// override 父類別屬性，將 val 改為 var</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperMan</span></span>(<span class=\"keyword\">private</span> <span class=\"keyword\">var</span> _name: String): Person(_name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> name: String = _name</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = field.capitalize()</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(value) &#123;</span><br><span class=\"line\">            field = value.trim()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        println(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"介面-Interface\"><a href=\"#介面-Interface\" class=\"headerlink\" title=\"介面 Interface\"></a>介面 Interface</h2><p>Kotlin 與 Java 一樣，只能繼承一個類別，但可以實作多個介面，而介面實作也是使用 <code>：</code> 操作符號進行實現，而 Kotlin 與 Java 不同的地方是 Kotlin 的 Interface 可以自己實作函數，而使用介面的好處主要是為了解決耦合問題（Coupling）與支援多重繼承功能，例如以下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> myClass = MyClass()</span><br><span class=\"line\">    myClass.sayHello()</span><br><span class=\"line\">    myClass.printData()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 介面本身自已實作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">haveImplement</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Kotlin 介面可自己實作，而且類別不需要實作&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 繼承多重介面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> : <span class=\"type\">Interface1</span>, <span class=\"type\">Interface2 &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printData</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 呼叫介面已實作函數</span></span><br><span class=\"line\">        haveImplement()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hi&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當介面方法相同時，我們可以使用 super 關鍵字進行呼叫特定介面的方法，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    MyClass().haveImplement()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">haveImplement</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Interface1 實作&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">haveImplement</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Interface2 實作&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 繼承多重介面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> : <span class=\"type\">Interface1</span>, <span class=\"type\">Interface2 &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">haveImplement</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 利用 super 呼叫指定介面的函數</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>&lt;Interface2&gt;.haveImplement()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前面提到的耦合（Coupling）其實就是指兩個模組之間的相依性，若相依性越高，則耦合度越高，即為高耦合問題，耦合性越高的話，容易因為小需求變動而連貫影響整個系統或其他模組，例如以下範例，類別 A 與 類別 B 存在直接相依性的問題：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> message: String</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">(a: <span class=\"type\">A</span>)</span></span> &#123;</span><br><span class=\"line\">        println(a.message)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>實現低耦合就是對兩類別之間進行解耦，解除類別之間的直接關係，將直接關係轉換成間接關係：</p>\n<ol>\n<li><p>將類別共用方法抽離成 Interface，再直接使用 override 方法執行</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Boy().sayHello()</span><br><span class=\"line\">    Girl().sayHello()</span><br><span class=\"line\">    Woman().sayHello()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Unit</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span> : <span class=\"type\">Person &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hello, Boy&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Girl</span> : <span class=\"type\">Person &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hello, Girl&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> : <span class=\"type\">Person &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hello, Woman&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用依賴注入（Dependency Injection, DI）方法達到類別彼此間的間接關係，即我們是將被依賴物件注入被動接收物件當中，以下面範例為例：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 將被依賴物件注入被動接收物件</span></span><br><span class=\"line\">    <span class=\"comment\">// 若學生有學習新的語言，只要新增一個類別再丟入 MyStudent 即可</span></span><br><span class=\"line\">    MyStudent(English()).study()</span><br><span class=\"line\">    MyStudent(Chinese()).study()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立學生類別</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStudent</span></span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> language: Language) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 正在讀書</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">study</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        language.speak()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立邏輯共用介面－語言</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Language</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 當需要 English 時，建立類別</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">English</span> : <span class=\"type\">Language &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;學生正在練習英文口說&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 當需要 Chinese 時，建立類別</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chinese</span> : <span class=\"type\">Language &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;學生正在練習中文口說&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"抽象類別-abstract-class\"><a href=\"#抽象類別-abstract-class\" class=\"headerlink\" title=\"抽象類別 abstract class\"></a>抽象類別 abstract class</h2><p>在 Kotlin 中抽象類別會使用到 abstract 關鍵字，必須加在 class 或 function 前面，而抽象類別無法像普通類別一樣被實例化（Instance），它只能被類別繼承，而抽象類別也能使用建構函數進行外部參數引入，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    SuperMan(<span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;&quot;</span>).hello()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定義抽象類別</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> email: String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定義</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperMan</span></span>(name: String, email: String) : Person(name, email) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 印出「我是 Devin」</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;我是 <span class=\"variable\">$name</span> &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽象類別與介面主要差別還是在於使用場景或身份的不同，因類別只能單一繼承，所以使用抽象類別的子類別幾乎都是會有高關聯的，但介面不見得，我們可以依需求來選擇合適的介面實作，建議大家還是要依照需求來選擇合適方式。</p>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 10] 遠征 Kotlin × 泛型 Generic","url":"/2020/10/11/ironman-2020-10/","content":"<h2 id=\"泛型-Generic-介紹\"><a href=\"#泛型-Generic-介紹\" class=\"headerlink\" title=\"泛型 Generic 介紹\"></a>泛型 Generic 介紹</h2><p>在 Collections 章節中，我們有提到 <code>List</code>、<code>Set</code> 等集合用法，眼尖的朋友可能會發現到，在宣告一個新集合時，我們都必須使用 <code>&lt; &gt;</code> 和設定型態來進行宣告， 而這樣的方法其實就是一種泛型（Generic）應用，集合只是一個容器，為我們提供迭代元素、新增元素、刪除元素等操作方法，當我們需求上需要儲存什麼樣別的資料，再為這個容器加上型別即可使用。</p>\n<p>可能有朋友會好奇，為什麼會需要使用泛型？假設今天我們有一個集合物件，裡面充滿著各種型別的資料，那我們在引用這個集合時，必然會在程式撰寫上處理許多型別轉型的工作，而型別轉型工作會讓我們程式多了一層轉換工作，所以為了減少不必要的轉型工作，我們可以提前在編譯期間（Compile Time）利用泛型告知此集合或方法屬於哪種型別，也是方便我們在開發時清楚要使用什麼類型的資料進行溝通，所以在型別安全檢查、程式碼品質、開發效率等都會帶來好處。</p>\n<h2 id=\"泛型使用\"><a href=\"#泛型使用\" class=\"headerlink\" title=\"泛型使用\"></a>泛型使用</h2><p>泛型可以讓我們使用在類別、介面、函數上，我們可以直接使用下面範例來觀察，我們定義一個使用泛型的Person 類別，再定義其他資料類別，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> teacher: Person&lt;Teacher&gt; = Person(Teacher(<span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;A12345&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> student: Person&lt;Student&gt; = Person(Student(<span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;B991&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;老師姓名： <span class=\"subst\">$&#123;teacher.data.name&#125;</span>, 職員編號： <span class=\"subst\">$&#123;teacher.data.employeeNumber&#125;</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;學生姓名： <span class=\"subst\">$&#123;student.data.name&#125;</span>, 學號： <span class=\"subst\">$&#123;student.data.studentID&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出以下結果：</span></span><br><span class=\"line\">    <span class=\"comment\">// 老師姓名： Eric, 職員編號： A12345</span></span><br><span class=\"line\">    <span class=\"comment\">// 學生姓名： Devin, 學號： B991</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立一個使用泛型物件的類別</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&lt;<span class=\"type\">T</span>&gt;</span>(person: T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">data</span>: T = person</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立一個老師類別，具有name、employeeNumber參數</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> employeeNumber: String)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立一個學生類別，具有name、studentID參數</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> studentID: String)</span><br></pre></td></tr></table></figure>\n\n<p>泛型參數我們通常會利用字母 T（英文 Type）表示，若要使用其他名稱也可以，但在支援泛型的程式語言中大多使用 T 來表示，這樣可以讓其他開發者更容易了解我們的程式碼，而泛型還有其他常用的命名，如下：</p>\n<ul>\n<li>E - Element</li>\n<li>K - Key</li>\n<li>N - Number</li>\n<li>T - Type</li>\n<li>V - Value</li>\n<li>R - Return</li>\n<li>S, U, V etc. - 2nd, 3rd, 4th types</li>\n</ul>\n<h2 id=\"多泛型參數\"><a href=\"#多泛型參數\" class=\"headerlink\" title=\"多泛型參數\"></a>多泛型參數</h2><p>泛型也允許使用多個泛型參數，參數名稱建議可參考上面常見規範，我們可以將上面的範例進行修改，在原本的 Person 類別中加入一個支援多種泛型的函數，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> teacher: Person&lt;Teacher&gt; = Person(Teacher(<span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;A12345&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> student: Person&lt;Student&gt; = Person(Student(<span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;B991&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;老師姓名： <span class=\"subst\">$&#123;teacher.data.name&#125;</span>, 職員編號： <span class=\"subst\">$&#123;teacher.data.employeeNumber&#125;</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;學生姓名： <span class=\"subst\">$&#123;student.data.name&#125;</span>, 學號： <span class=\"subst\">$&#123;student.data.studentID&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    teacher.speak &#123; println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;teacher.data.name&#125;</span>： 開始上課&quot;</span>)&#125;</span><br><span class=\"line\">    student.speak &#123; println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;student.data.name&#125;</span>： 老師好&quot;</span>)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立一個使用泛型物件的類別</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&lt;<span class=\"type\">T</span>&gt;</span>(person: T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">data</span>: T = person</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定義一個支援 lambda 運算式的函數，R為新增的泛型參數，作為函數的返回類型</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;R&gt;</span> <span class=\"title\">speak</span><span class=\"params\">(func: (<span class=\"type\">T</span>) -&gt; <span class=\"type\">R</span>)</span></span>: R? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> employeeNumber: String)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> studentID: String)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多泛型實例操作\"><a href=\"#多泛型實例操作\" class=\"headerlink\" title=\"多泛型實例操作\"></a>多泛型實例操作</h2><p>上面範例我們都只使用一個資料進行操作，若我們想要一次使用多筆資料，此時可以使用 <code>vararg</code> 關鍵字，讓泛型類別可支援多個參數，參數即為元素陣列，而既然是陣列資料，我們就可以使用索引進行取值，我們可以搭配 <code>get</code> 運算函數進行索引取值動作，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> teacher: Person&lt;Teacher&gt; = Person(Teacher(<span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;A12345&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> student: Person&lt;Student&gt; = Person(Student(<span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;B991&quot;</span>), Student(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;B992&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;老師姓名： <span class=\"subst\">$&#123;teacher[<span class=\"number\">0</span>]?.name&#125;</span>, 職員編號： <span class=\"subst\">$&#123;teacher[<span class=\"number\">0</span>]?.employeeNumber&#125;</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;學生姓名： <span class=\"subst\">$&#123;student[<span class=\"number\">0</span>]?.name&#125;</span>, 學號： <span class=\"subst\">$&#123;student[<span class=\"number\">0</span>]?.studentID&#125;</span>&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;學生姓名： <span class=\"subst\">$&#123;student[<span class=\"number\">1</span>]?.name&#125;</span>, 學號： <span class=\"subst\">$&#123;student[<span class=\"number\">1</span>]?.studentID&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    teacher.speak(<span class=\"number\">0</span>) &#123; println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;teacher[<span class=\"number\">0</span>]?.name&#125;</span>： 開始上課&quot;</span>)&#125;</span><br><span class=\"line\">    student.speak(<span class=\"number\">0</span>) &#123; println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;student[<span class=\"number\">0</span>]?.name&#125;</span>： 老師好&quot;</span>)&#125;</span><br><span class=\"line\">    student.speak(<span class=\"number\">0</span>) &#123; println(<span class=\"string\">&quot;<span class=\"subst\">$&#123;student[<span class=\"number\">1</span>]?.name&#125;</span>： 老師好&quot;</span>)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立一個使用泛型物件的類別</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&lt;<span class=\"type\">T</span>&gt;</span>(<span class=\"keyword\">vararg</span> person: T) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 修改 data 資料型別為 Array&lt;out T&gt;， out 代表我們要將泛型 T 作為內部函數的返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">data</span>: Array&lt;<span class=\"keyword\">out</span> T&gt; = person</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(index: <span class=\"type\">Int</span>)</span></span>: T? = <span class=\"keyword\">data</span>[index]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;R&gt;</span> <span class=\"title\">speak</span><span class=\"params\">(index: <span class=\"type\">Int</span>, func: (<span class=\"type\">T</span>) -&gt; <span class=\"type\">R</span>)</span></span>: R? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(<span class=\"keyword\">data</span>[index])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> employeeNumber: String)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> studentID: String)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"in-amp-out\"><a href=\"#in-amp-out\" class=\"headerlink\" title=\"in &amp; out\"></a>in &amp; out</h2><p>在前一個範例中我們有用到 <code>out</code> 關鍵字，我們發現若在泛型類別中要將泛型用在內部函數的返回值上，必須加上 <code>out</code> 關鍵字，而 <code>out</code> 關鍵字其實有一個夥伴－ <code>in</code> 關鍵字，<code>in</code> 則是將泛型用在函數參數值上。</p>\n<p>而泛型參數其實扮演兩種角色：<code>生產者（producer）</code> 或 <code>消費者（consumer）</code>，若身為生產者時，只能讀不能寫；消費者則相反，不能讀只能寫，而生產者為 <code>out</code> 關鍵字，消費者則為 <code>in</code> 關鍵字。</p>\n<p>接下來，我們利用範例來觀察 <code>in</code> &amp; <code>out</code> 的實際狀況，首先介紹 <code>out</code> 關鍵字， <code>out</code> 泛型可以讓我們將子類別的泛型物件賦值給父類別泛型物件：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 正常情況</span></span><br><span class=\"line\">    <span class=\"comment\">// 食品商店屬於食品商店</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer1 : Production&lt;Food&gt; = FoodStore()</span><br><span class=\"line\">    <span class=\"comment\">// 速食商品屬於食品商店</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer2 : Production&lt;Food&gt; = FastFoodStore()</span><br><span class=\"line\">    <span class=\"comment\">// 漢堡商店也屬於食品商店</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> producer3 : Production&lt;Food&gt; = InOutBurger()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 錯誤情況</span></span><br><span class=\"line\">      <span class=\"comment\">// 食品商店不見得屬於漢堡商店  </span></span><br><span class=\"line\"><span class=\"comment\">//    val producer1 : Production&lt;Burger&gt; = FoodStore()</span></span><br><span class=\"line\">      <span class=\"comment\">// 速食商店也不見得屬於漢堡商店</span></span><br><span class=\"line\"><span class=\"comment\">//    val producer2 : Production&lt;Burger&gt; = FastFoodStore()</span></span><br><span class=\"line\">      <span class=\"comment\">// 漢堡商店屬於漢堡商店</span></span><br><span class=\"line\"><span class=\"comment\">//    val producer3 : Production&lt;Burger&gt; = InOutBurger()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span></span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FastFood</span> : <span class=\"type\">Food</span></span>()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Burger</span> : <span class=\"type\">FastFood</span></span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定義一個生產者介面，運用 out 關鍵字</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Production</span>&lt;<span class=\"type\">out T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 將泛型 T 作為回傳值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定義一個 FoodStore 類別，並利用 Food 類別實作生產者介面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Food</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Food &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;食品商店&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Food()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定義一個 FastFoodStore 類別，並利用 FastFood 類別實作生產者介面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FastFoodStore</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">FastFood</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: FastFood &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;速食商店&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FastFood()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定義一個 FastFoodStore 類別，並利用 FastFood 類別實作生產者介面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InOutBurger</span> : <span class=\"type\">Production</span>&lt;<span class=\"type\">Burger</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">produce</span><span class=\"params\">()</span></span>: Burger &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;漢堡商店&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Burger()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再來是 <code>in</code> 關鍵字的用法，<code>in</code> 泛型可以讓我們將父類別泛型物件賦值給子類別泛型物件，以下是範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 正常情況</span></span><br><span class=\"line\">    <span class=\"comment\">// 想購買肉品食物的消費者可能也會想買漢堡</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer1 : Consumer&lt;Burger&gt; = PurchaseFood()</span><br><span class=\"line\">    <span class=\"comment\">// 想購買速食食物的消費者可能也會想買漢堡</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer2 : Consumer&lt;Burger&gt; = EatFastFood()  </span><br><span class=\"line\">    <span class=\"keyword\">val</span> consumer3 : Consumer&lt;Burger&gt; = EatBurger()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 錯誤情況</span></span><br><span class=\"line\"><span class=\"comment\">//    val consumer1 : Consumer&lt;Food&gt; = PurchaseFood()</span></span><br><span class=\"line\">      <span class=\"comment\">// 直接想購買速食商品的消費者通常不會想買肉品</span></span><br><span class=\"line\"><span class=\"comment\">//    val consumer2 : Consumer&lt;Food&gt; = EatFastFood()</span></span><br><span class=\"line\">      <span class=\"comment\">// 直接想購買漢堡商品的消費者通常不見想買肉品</span></span><br><span class=\"line\"><span class=\"comment\">//    val consumer3 : Consumer&lt;Food&gt; = EatBurger()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 利用 in 關鍵字配合泛型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Consumer</span>&lt;<span class=\"type\">in T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 將泛型 T 作為函數參數</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 想購買食品商品</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PurchaseFood</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Food</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Food</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;購買食品商品&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 想購買速食食物</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EatFastFood</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">FastFood</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">FastFood</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;購買速食食物&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 想購買漢堡食物</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EatBurger</span> : <span class=\"type\">Consumer</span>&lt;<span class=\"type\">Burger</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">consume</span><span class=\"params\">(item: <span class=\"type\">Burger</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;購買漢堡食物&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><p>【官方】<a href=\"https://kotlinlang.org/\">Kotlin 官方文件</a></p>\n</li>\n<li><p>【文章】<a href=\"https://zhuanlan.zhihu.com/p/32583310\">Kotlin 泛型中的 in 和 out</a></p>\n</li>\n<li><p>【文章】<a href=\"https://iter01.com/70458.html\">深入理解 Java 泛型</a></p>\n</li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 09] 遠征 Kotlin × 例外處理","url":"/2020/10/11/ironman-2020-09/","content":"<p>這章要來為大家介紹<code>例外處理（Exception Handing）</code>，但其實在介紹例外處理之前，想先和大家介紹<code>錯誤（Error）</code>與<code>例外（Exception）</code>的差別，避免大家搞混兩者。</p>\n<h2 id=\"錯誤與例外\"><a href=\"#錯誤與例外\" class=\"headerlink\" title=\"錯誤與例外\"></a>錯誤與例外</h2><p><code>錯誤（Error）</code> 通常是指<strong>程式在正常運行之下，可能受到硬體資源影響所導致的錯誤，進而導致Java虛擬機（JVM）處於一種不正常且不可恢復的狀態</strong>，例如記憶體溢位 <code>OutOfMemoryError</code>。而像 Error 這類型的錯誤在Java 或 Kotlin 都是使用 <code>Error</code> 類別表示，不同錯誤類別代表著不同錯誤，且每個錯誤類別都是繼承自 <code>Error</code> 類別，例如<code>StackOverflowError</code>、<code>OutOfMemoryError</code>。</p>\n<p><code>例外（Exception）</code>通常是指<strong>程式的語法錯誤或語意錯誤</strong>，即程式在編譯時期（Compile Time）和執行時期（Execute Time）出現的錯誤，此類錯誤我們可以稱為例外（Exception），在Java 或 Kotlin 都是使用 <code>Exception</code> 類別來表示，而 Exception 又可分為 <code>Checked Exception</code> （已檢查例外）與 <code>Unchecked Exception</code>（未檢查例外），<code>Checked Exception</code> 是指程式碼必須明確配合例外檢查方法（例如 try/catch ）進行檢查，否則編譯時期會無法編譯；<code>Unchecked Exception</code> 是指開發者可以自行判斷程式碼是否需要加上例外檢查，在編譯時期不會強制要求。</p>\n<p>而在 Java 與 Kotlin 中， <code>Error</code> 與 <code>Exception</code> 都是繼承自 <code>Throwable</code> 類別，也只有 <code>Throwable</code> 類別才能夠拋出（throw）錯誤，類別關係可參考下圖：</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200918/20121179YwH2Nc5L6F.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200918/20121179YwH2Nc5L6F.png\"><br>圖片引用自 <a href=\"http://www.instanceofjava.com/2015/08/difference-between-error-and-exception-java-example-program.html\">instanceofjava 文章</a></p>\n<h2 id=\"例外處理介紹\"><a href=\"#例外處理介紹\" class=\"headerlink\" title=\"例外處理介紹\"></a>例外處理介紹</h2><p>接下來，我們來認識什麼是例外處理（Exception Handing ），它通常是指<strong>我們針對程式執行時所發生的例外狀況進行有效處理的方法</strong>，若我們能夠妥善處理例外情形，則可以提高程式的強健度，讓程式即便發生錯誤也能正常執行，不會因為某一個錯誤而導致整個軟體崩潰，保持良好的軟體使用體驗。</p>\n<p>而 Kotlin 也是一門編譯型程式語言，即程式碼會先編譯成機器語言，再由編譯器進行執行。在編譯階段（Compiler Time）時，編譯器會檢查程式碼是否符合特定要求，確定沒問題後再進行編譯，例如在變數章節我們所提到的空值檢查機制，編譯器會幫我們判斷是否將 null 值指派給非空類型。</p>\n<p>在文章開頭，我們有介紹什麼是例外（Exception），例外又可分為兩種類型，即 <code>Checked Exception</code> （已檢查例外）與 <code>Unchecked Exception</code>（未檢查例外），在 Java 世界中，兩種例外類型都有支援，<strong>但在 Kotlin 世界中，本身不支援 Checked Exception 類型</strong>（<a href=\"https://kotlinlang.org/docs/reference/exceptions.html\">可參考官方文件說明</a>），所以當我們撰寫的程式碼有可能拋出 Exception，在編譯時期都會直接通過，在執行時期才會發現。</p>\n<p>可能有些人會好奇，Kotlin 取消 <code>Checked Exception</code> 類型會不會容易造成問題發生，Kotlin 官方其實也有做出回應並引用 Bruce Eckel 的論述：</p>\n<blockquote>\n<p>Examination of small programs leads to the conclusion that requiring exception specifications could both enhance developer productivity and enhance code quality, but experience with large software projects suggests a different result – decreased productivity and little or no increase in code quality.</p>\n</blockquote>\n<p>當初 Kotlin 在設計考量時也是參考過去 Java 的開發經驗，設計讓部份錯誤檢查可以從執行時期提前到編譯時期發現，能夠讓我們更早發現程式問題，防患於未然，這也是選用 Kotlin 設計程式的優勢之一，假設保留<code>Checked Exception</code> 類型的話，當開發者在大型軟體專案中使用過多時，大部份開發上只會造成程式碼可讀性變差與程式碼品質下降。</p>\n<h2 id=\"例外處理方法－-try-catch-finally\"><a href=\"#例外處理方法－-try-catch-finally\" class=\"headerlink\" title=\"例外處理方法－ try..catch..finally\"></a>例外處理方法－ try..catch..finally</h2><p>上面我們介紹了例外處理的基本概念，我們再來介紹 Kotlin 處理例外狀況的方法，一般程式語言都是利用 <code>try..catch..finally</code> 來處理例外狀況，而 Kotlin 也不例外，使用方法與範例如下：</p>\n<p>使用方法說明：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 預期可能會發生錯誤的程式碼</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (exception: SomeException) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 當發生錯誤時，則執行這裡的程式碼</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最後執行的程式碼區塊，此區塊可以忽略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我們利用一個簡單範例，當運算式為 <strong>數字 1</strong> 除 <strong>數字 0</strong>時，程式會出現 ArithmeticException 類型錯誤：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;1.執行程式&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (exception: ArithmeticException) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;2.發生錯誤&quot;</span>)</span><br><span class=\"line\">        println(exception)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;3.最後執行的程式碼&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此程式會輸出以下結果</span></span><br><span class=\"line\"><span class=\"comment\">// 1.執行程式</span></span><br><span class=\"line\"><span class=\"comment\">// 2.發生錯誤</span></span><br><span class=\"line\"><span class=\"comment\">// java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\"><span class=\"comment\">// 3.最後執行的程式碼</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"例外處理方法－主動拋出例外-throw\"><a href=\"#例外處理方法－主動拋出例外-throw\" class=\"headerlink\" title=\"例外處理方法－主動拋出例外 throw\"></a>例外處理方法－主動拋出例外 throw</h2><p>Kotlin 也可以允許開發者主動拋例外物件，會由 <code>throw</code> 運算子所觸發，拋出異常就代表程式若要繼續執行，必須先解決這個問題才能夠正常繼續執行，例如以下範例，我們有一個函數是判斷數值是否符合正整數，如果不符合則主動拋出例外錯誤：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200918/201211793qMWWMOQ6p.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200918/201211793qMWWMOQ6p.png\"></p>\n<h2 id=\"例外處理方法－自訂例外錯誤類別\"><a href=\"#例外處理方法－自訂例外錯誤類別\" class=\"headerlink\" title=\"例外處理方法－自訂例外錯誤類別\"></a>例外處理方法－自訂例外錯誤類別</h2><p>我們也可以自定義一個例外錯誤類別，宣告一個類別並繼承 <code>Exception</code> 類別即可，自定義例外錯誤類別可以讓我們在除錯時更清楚拋出的資訊是屬於哪一種問題，例如以下範例：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200918/20121179XmMf5stzaU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200918/20121179XmMf5stzaU.png\"></p>\n<h2 id=\"責任分工\"><a href=\"#責任分工\" class=\"headerlink\" title=\"責任分工\"></a>責任分工</h2><p>上面是我們一般會對於處理例外狀況所撰寫的程式方法，但實際上在這三個區塊會有各自要處理的責任，這邊稍微簡單說明：</p>\n<ol>\n<li><p><code>try</code> 區塊除了提到必須負責實作業務需求之外，也<strong>必須負責準備錯誤發生時的狀態回復方法</strong>，建立將程式狀態回復至發生錯誤之前的方法</p>\n</li>\n<li><p><code>catch</code> 區塊除了回報錯誤狀況以外，其實還要<strong>身兼錯誤的對應處理或重試其他替代方案</strong>，例如上面範例，當使用者輸入為錯誤數值時，是否可以藉由 Catch 提供錯誤提示給予使用者，給予使用者選擇重試或取消此計算功能</p>\n</li>\n<li><p><code>finally</code> 區塊則是<strong>擔任釋放資源與回報發生錯誤例外的角色</strong>，假設我們執行的程式碼是與資料庫溝通的程式，在 finally 則是必須釋放資料庫連線。</p>\n</li>\n</ol>\n<p>此篇文章介紹了例外處理的基本概念與使用方法，其實例外處理要考量的地方還有許多，可能沒辦法利用一篇文章進行詳細說明，後續在 Spring Boot 章節會再補充例外處理的方法，而在實務開發上，團隊通常也都會有一份開發規定進行對應處理，方便每個人在開發專案時有一定的共識。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[官方] <a href=\"https://kotlinlang.org/docs/reference/exceptions.html\">Kotlin 官方資料</a></li>\n<li>[文章] <a href=\"https://medium.com/@kazafchen/kotlin-checked-exception-a9a096e9e49f\">Kotlin &amp; Checked Exception</a></li>\n<li>[文章] <a href=\"http://teddy-chen-tw.blogspot.com/2013/11/javatrycatchfinally7.html\">Java的try、catch、finally（7）：責任分擔</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 12] 遠征 Kotlin × 進入 Spring Boot 世界","url":"/2020/10/11/ironman-2020-12/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>從這章開始我們即將進入 <code>Spring Boot</code> 世界，前面章節是希望能與大家一起了解 <code>Kotlin</code> 基本語法，再進入後面章節的 Web 開發介紹，而自己在接觸 Spring 框架之前，其實有先接觸過 <code>.Net MVC</code>、<code>PHP Laravel</code>、<code>Python Flask</code>、<code>Django</code>等框架，後來才在因緣際會之下進入 Spring 世界進行開發，還記得當初開始寫 Spring 時，其實對於 Spring 生態系有感受到不太好上手的狀況，但也有可能是因為我一開始接觸的 Spring 專案是早期開發配置的關係，就是利用許多XML配置和充滿非常多jar檔案的專案，光是在環境設定與學習就花了非常久的時間。</p>\n<p>如果有朋友與我一樣，在因緣際會之下來到了 Spring 世界，我覺得可以從 <code>Spring Boot</code> 框架出發，至少在學習這條路上，開發的成就感會比較大，接下來的文章，我也將會從 <code>Spring Boot</code> 基礎由淺入深的方式進行介紹，與大家一同學習。</p>\n<h2 id=\"Spring-介紹\"><a href=\"#Spring-介紹\" class=\"headerlink\" title=\"Spring 介紹\"></a>Spring 介紹</h2><p>早期 Sun 公司在 1999 年 6月公佈新的Java體系架構，該架構根據不同級別的應用開發區分許多不同的應用版本，即<code>J2SE</code>（Java 2 Platform, Standard Edition）、<code>J2EE</code>（Java 2 Platform, Enterprise Edition）與<code>J2ME</code>（Java 2 Platform, Micro Edition）：</p>\n<ul>\n<li><code>J2SE</code> 主要用於開發桌面應用軟體的程式設計</li>\n<li><code>J2EE</code> 主要用於網路程式開發</li>\n<li><code>J2ME</code> 主要用於嵌入式系統開發</li>\n</ul>\n<p>而 J2SE、J2EE與J2ME 是當時所命名的名稱，直到 <code>Java SE 6</code> 出世後，Java不再帶有 <code>2</code> 這個數字，因此 J2SE、J2EE與J2ME分別被命名為<code>Java SE</code>、<code>Java EE</code>與<code>Java ME</code>，而 Sun 公司在2006年底，就將三大平台正名為Java SE、Java ME與Java EE，但時至今日，J2SE、J2ME與J2EE這個名詞還是很多人用。</p>\n<p>其中，<code>Java SE</code> 又身為各應用平台基礎，許多人剛開始學習 Java 時，最先接觸的也是Java SE，它又可分作四個主要的部份：<code>JVM</code>、<code>JRE</code>、<code>JDK</code>與<code>Java語言</code>。為了要能運行Java撰寫好的程式，必須有Java虛擬機器（Java Virtual Machine, JVM），JVM 包括在 Java 執行環境（Java SE Runtime Environment, JRE）中，所以為了要運行Java程式，必須安裝JRE。如果要開發Java程式，必須取得JDK（Java SE Development Kits），JDK包括JRE以及開發過程中需要的一些工具程式，像是javac、java等工具程式。</p>\n<p>Java EE 也以 Java SE 為基礎，定義了一系列的服務、API、協定等，適用於開發分散式、多層式架構、以元件為基礎、以Web為基礎的應用程式， 整個 Java EE 的體系其實是相當龐大的，比較為人熟悉的技術像是Java Server Pages (JSP)、Servlet、JavaMail、Enterprise JavaBeans（EJB）等。而早期J2EE應用程式是由 JSP、Java Servlet 與 EJB 模組等元件所組成，這些元件可供軟體開發人員建立大型之分散式應用程式，再由開發人員將 J2EE 應用程式封裝為 JAR 檔案部署至應用程式伺服器（Application Server）。</p>\n<p>而 <code>Spring Framework</code> 是一個基於Java EE 的 <code>MVC</code> 框架，在設計目標上主要是<strong>為了簡化 Java EE 的應用程式開發為目的，進而取代 Java EE 早期非常龐大的技術－EJB</strong>，相較於 EJB 而言，Spring提供了更輕量和簡單的方法建構應用程式，加強 Java Plain Old Java Object（POJO） 功能，使整個框架具備之前只有 EJB 和其他企業級 Java 規範才具有的功能。</p>\n<p>Spring 是一套開源框架，最早是由 Rod Johnson 為了解決企業級應用的開發複雜性所設計出來的框架，在Spring設計核心中，採取四種關鍵原則：</p>\n<ul>\n<li>使用POJO進行輕量級及最小侵入式開發</li>\n<li>透過依賴注入（Dependency, DI）和介面（Interface）實現鬆耦合</li>\n<li>透過AOP（Aspect Oriented Programming）和默認習慣進行宣告式程式設計</li>\n<li>透過AOP和樣板減少模式化程式碼</li>\n</ul>\n<p><code>簡單來說，就是利用 Annotation 告訴 Spring 框架，標註的程式碼是代表什麼，進而減少重複例行性程式碼</code></p>\n<p>在過去，Java 因具備有物件導向設計特性，大幅提升程式碼的維護與重用性，但也造成容易產生類別與類別之間的依賴關係，當專案不斷龐大時，程式容易造成高耦合性的發生。而在 Spring 框架核心部份運用了<code>控制反轉（Inversion of Control, IOC）</code>與<code>依賴注入（Dependency Injectionm, DI）</code>， 解決前述所提到的狀況。</p>\n<p><code>IOC</code> 其實是一種設計概念，將某物件對另一物件的控制權移轉給第三者進行管理，例如A物件程式內部需要使用到B物件時，代表A、B兩個物件具有依賴關係，而控制反轉則是將A對B的控制權移轉給第三者，讓A與B都必須倚賴第三者，降低A對B物件的耦合性。</p>\n<p>以Spring框架來說，IOC概念主要運用在Spring可建立Bean物件負責控制物件的生命週期和物件間的關係，而Bean 只是普通的Java物件，由Spring IOC容器根據<code>XML文件</code>、<code>Java Annotation</code>、<code>Java Config</code>文件進行創建、配對和管理。IOC容器執行的主要任務有「創建Bean物件」、「根據配置文件配對相依的Bean」、「為Bean設置初始化參數」、「管理Bean生命週期」，可讓開發者只需聲明所需要的物件，就可輕鬆達到<code>寬鬆耦合（loose coupling）</code>的目的，直接使用Bean的功能。IOC容器在 Spring 中有兩種類型（BeanFactory、ApplicationContext），其中 ApplicationContext 又比 BeanFactory 更加強大，故經常在專案中看見 ApplicationContext 的使用。</p>\n<p>如上所述，IOC容器會根據開發者設定方式進行 Bean 的操作，而 Bean 目前在 Spring 可配置的方式有三種方式：</p>\n<ol>\n<li>XML － 使用 XML 文件進行配置</li>\n<li>Annotation － 使用 @Service 或 @Component 註解配置</li>\n<li>Java － 從 Spring 3 開始，可使用 Java 程式配置Bean，主要註解是 @Configuration、@ComponentScan 和 @Bean</li>\n</ol>\n<p><code>DI</code> 則是實現 <code>IOC</code> 的方法之一，是達到 <code>抽離類別實體化</code> 行為的一種設計模式，即是<strong>把被依賴物件注入被動接收物件中，有效解決兩個類別間<code>耦合性過高</code>的問題，通常會搭配介面（Interface）方式進行注入</strong>，DI概念與範例在<a href=\"https://ithelp.ithome.com.tw/articles/10236676\">前面的函數章節</a>有提到。</p>\n<p>前述有提到，Spring Framework是一個基於 Java EE 的 MVC 架構，常見的 MVC 架構也就是將一個應用程式（Application）架構分為<code>模型層(Model)</code>、<code>展示層 (View)</code>、<code>控制層(Controller)</code>，通常<code>Model</code>會有一般類別或資料庫存取邏輯，<code>View</code>是與使用者互動的介面，<code>Controller</code>則是將Model與View串連起來的關鍵角色，而 Spring 除了 MVC 架構之外，它還提供相當多的元件，如：<code>Spring Security</code>、<code>Spring Validation</code>、<code>Spring Data</code>等，讓我們在開發應用程式時，能夠將更多時間專注在系統的業務邏輯實現上。</p>\n<p>以一個最基本的 Spring Controller來舉例，它本身就是一個類別，我們在撰寫時，會定義 package 以及需要載入（import）的類別，再利用 Java Annotation－@Controller 定義這個類別是個Controller。在類別中，只要指定HelloWorld方法的RequestMapping，也就是指定這個Controller的相對URI。以下面的程式範例來說，當瀏覽器要求 <code>/Hello</code> （實際網址為：<a href=\"http://localhost:8080/Hello\">http://localhost:8080/Hello</a> 就會呼叫<code>sayHi()</code> 方法，而<code>sayHi()</code>方法的回傳值會是執行完這段程式碼之後要執行的事情，即回傳「Hello Spring &amp; Kotlin」字串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.devin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/Hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">sayHi</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello Spring &amp; Kotlin&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述這隻範例程式，當我們在瀏覽器輸入URL後，讓我們得到對應的字串「Hello Spring &amp; Kotlin」，其實是透過 Web Container 與 Servlet 進行 HTTP 傳遞與處理，早期 JSP 檔案會被 Web 容器轉譯為 Servlet 的 .java  原始檔，再編譯為 .class 檔案載入容器進行運作，而在 Spring Web 中任何 <code>Entry point</code> 都是 <code>Servlet</code>，而 Web Container 是 Servlet 唯一認得的 HTTP 伺服器，以我們範例而言，使用的 Web Container 是 Tomcat。</p>\n<p>上述有提到 <code>Servlet</code> 概念，Java Servlet 其實是運行在 Web 伺服器或應用伺服器上的程式，它是作為來自 Web 瀏覽器或 HTTP 用戶端請求和 HTTP 伺服器上的資料庫或應用程式之間的中介層（Middleware），使用Servlet，可以用來收集網頁表單的輸入值、呈現來自資料庫的資料或是可以動態創建網頁。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200921/20121179mPzvHwi9ZN.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200921/20121179mPzvHwi9ZN.png\"></p>\n<p>圖片引用自 <a href=\"http://www.w3big.com/zh-TW/servlet/servlet-intro.html\">w3big Servlet介紹</a></p>\n<p>最後，<code>Spring Boot</code> 其實不算是一門新技術，以本質上來說，Spring Boot 就是 Spring，它是<strong>為了簡化 Spring 應用的建立、執行、除錯、部署等而出現的，使用它可以讓我們把時間更專注於業務邏輯的需求開發，無需過多關注 XML 配置，讓開發者可快速構建Spring應用。</strong></p>\n<p>Spring Boot 特色是：</p>\n<ol>\n<li>能夠快速開發基於 Spring 的應用程式</li>\n<li>預設使用內嵌的 Tomcat 作為應用伺服器</li>\n<li>自動管理套件依賴版本</li>\n<li>方便開發各種對外服務，如 REST API、WebSocket、Web、Streaming、Tasks</li>\n<li>提供快速方便使用的微服務相關技術</li>\n<li>提供一些大型項目常用的非功能性特性，例如：嵌入式服务、安全、監控、健康檢查、外部配置</li>\n</ol>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li>[官方] <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/\">Spring Boot 官方文件</a></li>\n<li>[文章] <a href=\"https://cloud.tencent.com/developer/article/1159647\">一文读懂 Spring Boot、微服务架构和大数据治理三者之间的故事</a></li>\n</ol>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 13] 遠征 Kotlin × 建置 Spring Boot 專案","url":"/2020/10/11/ironman-2020-13/","content":"<h2 id=\"編輯器環境說明\"><a href=\"#編輯器環境說明\" class=\"headerlink\" title=\"編輯器環境說明\"></a>編輯器環境說明</h2><p>接下來，這篇文章將帶大家建置 <code>Spring Boot</code> 專案，本系列文章使用的編輯器為 <code>Intellij</code> ，但因為使用的 intellij 為 <code>ultimate</code> 版本，ultimate 本身其實會內建許多工具，例如建立 Spring Boot 專案時會有一個快速建置 Spring Boot 專案的選項 <code>Spring Initializr</code>，如下圖：</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179vanA5k6E07.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179vanA5k6E07.png\"></p>\n<p>如果正在閱讀的朋友是使用 <code>community</code> 版本的話，大家可以到 intellij 的 <code>Preferences</code> → <code>Plugins</code> → 安裝 <code>Spring Assistant</code> 套件，即可在 Create 專案裡面找到 Spring Boot 起始專案建立選項，如下圖(1)、(2)所示：</p>\n<p>(1) 至 intellij 的 Preferences → Plugins → 搜尋 Spring Assistant 套件<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179ysWNJLX809.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179ysWNJLX809.png\"></p>\n<p>(2) 建立專案（New → Project）時，會出現 <code>Spring Assistant</code> 選項，即可像 <code>ultimate</code> 版本快速建置 Spring Boot 專案<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179HcPUgQDqjw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179HcPUgQDqjw.png\"></p>\n<hr>\n<h2 id=\"建置步驟\"><a href=\"#建置步驟\" class=\"headerlink\" title=\"建置步驟\"></a>建置步驟</h2><p>接下來，我們就來建置一個 Spring Boot 專案：</p>\n<p>(1) 開啟 intellij 編輯器 → New → Project 建立專案<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179FEpqdrsft3.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179FEpqdrsft3.png\"></p>\n<p>(2) 此頁面是可以設定 <code>Project Metadata</code> 資訊，資料除了meta設定以外，要記得在 Language 選擇 <code>Kotlin</code>，Java 版本要記得用自己環境裝的JDK版本，此範例使用 <code>Java 8</code> 進行開發，Type 選擇使用 <code>Maven Project</code> （下一個章節也會介紹如何用 <code>Gradle</code> 建置專案）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179ZFkvFLVAXZ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179ZFkvFLVAXZ.png\"></p>\n<p>(3) 設定 Spring Boot 版本與勾選需要的套件，這邊可以先勾選 <code>Web</code> -&gt; <code>Spring Web</code>，Spring Boot 版本選擇 <code>2.3.4</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179lQDvYlYD00.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179lQDvYlYD00.png\"></p>\n<p>(4) 設定專案路徑<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179gFy7vR1LKm.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179gFy7vR1LKm.png\"></p>\n<p>(5) 若您的版本為 <code>ultimate</code> 版本，可以直接點擊右上角執行專案，可以參考下面第一張圖(a)，如果是 <code>Community</code> 版本，因為沒有預設啟動功能，但仍可以利用右側 <code>Maven</code> 區塊點擊 <code>Plugins</code> → <code>spring-boot</code> → <code>spring-boot:run</code> 的方式運行專案，則參考下面第二張圖(b)</p>\n<p>a. ultimate 版本直接點擊右上角運行鈕（三角形）運行專案<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179bcKxmv2HTU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179bcKxmv2HTU.png\"></p>\n<p>b. community 版本可以用 Maven 區塊點擊 Plugins → spring-boot → spring-boot:run 的方式運行專案<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179sdonpmR028.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179sdonpmR028.png\"></p>\n<p>(6) 可以在 <code>DemoApplication.kt</code> 檔案中加入下面這段程式，請參考下面圖(a），加入程式碼後再重新運行程式，打開瀏覽器進入（<a href=\"http://localhost:8080/hello%EF%BC%89\">http://localhost:8080/hello）</a> 即可看到「Hello, Kotlin」文字，可參考下圖（b)、(c)</p>\n<p>a. 在 DemoApplication.kt 直接在下面加入以下程式</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/hello&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getHelloString</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, Kotlin&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>b. 加入程式碼後的結果圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179PiSDZYzH4f.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179PiSDZYzH4f.png\"></p>\n<p>c. 執行專案後，打開瀏覽器觀看執行結果「Hello, Kotlin」<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179D9v9ffSBCG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200922/20121179D9v9ffSBCG.png\"></p>\n<p>以上，我們已經完成 Spring Boot 專案建置，也成功設計了一隻取得「Hello, Kotlin」文字的API，我們可以感受到 Spring Boot 協助我們快速進入開發，若是使用以往的Spring配置，可能還需要設定非常多環境設定才可以進行開發動作，而後續章節會陸續開始說明每個 Spring Boot 開發應用。</p>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 11] 遠征 Kotlin × 函數式程式設計","url":"/2020/10/11/ironman-2020-11/","content":"<h2 id=\"函數式程式設計特性\"><a href=\"#函數式程式設計特性\" class=\"headerlink\" title=\"函數式程式設計特性\"></a>函數式程式設計特性</h2><p>我們在前面<a href=\"https://ithelp.ithome.com.tw/articles/10236676\">函數章節</a>有提到 <code>Lambda</code> 的基本概念，而如果我們想要更好運用 <code>Lambda</code> 語法與相關函數API，可以先認識<code>函數程式設計</code>（Functional Programming, 簡稱 FP）會有非常大幫助，FP 是一種程式設計方法，與前面章節提到的物件導向程式設計（Object-Oriented Programming）是不同的設計概念，兩種設計的思考方式有許多不同，FP 主要會有以下特性：</p>\n<ul>\n<li>會依賴於前面<a href=\"https://ithelp.ithome.com.tw/articles/10236676\">函數章節</a>提到的<code>高階函數（Higher-Order Functions）</code>所傳回的結果，所謂<code>高階函數</code>即為<strong>利用函數作為參數或返回值的方法</strong></li>\n<li>函數必須符合<code>第一類物件（First-Class-Object）</code>原則</li>\n<li>保持<code>純函數（Pure functions）</code>特性，即函數在執行時，不會有任何<code>副作用（Side Effect）</code>的狀況，無副作用是指<strong>函數內部不會影響到函數外部的任何狀態</strong></li>\n<li>保持 <code>immutable</code> 特性，即<strong>資料一經賦值後就不能被修改</strong>，重視函數回傳結果（Output），不修改傳入的參數狀態（Input）</li>\n</ul>\n<h2 id=\"函數類別\"><a href=\"#函數類別\" class=\"headerlink\" title=\"函數類別\"></a>函數類別</h2><p>一般我們在使用 FP 設計方法時，通常會由三種函數所構成－<code>轉換（Transform）</code>、<code>過濾（Filter）</code>與<code>合併（Combine）</code>，每種函數目標都是為了取得最終結果進行設計，而函數彼此間可以互相配合使用，代表我們可以利用這樣的特性關係，將多個函數進行組合，處理複雜的計算行為。</p>\n<p><code>轉換（Transform）</code>是指我們會將輸入（Input）參數<strong>利用轉換器進行特定條件處理</strong>，再回傳處理的新結果，在 Kotlin 中常使用的轉換函數為 <code>map</code> 和 <code>flatMap</code>，可參考以下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = listOf&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">data</span>.map &#123; it * <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    println(result)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出 [2, 4, 6]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>過濾（Filter）</code>則是<strong>具有過濾符合特定條件的作用</strong>，一般會配合<code>條件運算式</code>（predicate）函數，利用此函數判斷傳入參數是否符合條件判斷，依照判斷結果回傳 true 或 false，若為 true，則將元素加入返回的新集合內，我們可以運用 <code>filter</code> 函數進行過濾處理，可參考以下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立原始資料</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = listOf&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 進行過濾的結果資料</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">data</span>.filter &#123; it &gt; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">                     .map &#123; it * <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    println(result)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出 [4, 6]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>合併（Combine）</code>是<strong>將不同資料或不同集合組合成一個新集合</strong>，我們可以運用 <code>zip</code> 合併函數進行合併處理，可參考以下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立員工資料</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> personData = listOf&lt;String&gt;(<span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;Mary&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 建立薪資資料</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> salaryData = listOf&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">1300</span>, <span class=\"number\">1500</span>, <span class=\"number\">1200</span>).map &#123; it * <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 組合員工與薪資資料</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = personData.zip(salaryData).toMap()</span><br><span class=\"line\">    <span class=\"comment\">// 印出員工對應的薪水資料</span></span><br><span class=\"line\">    println(result[<span class=\"string\">&quot;Devin&quot;</span>])</span><br><span class=\"line\">    println(result[<span class=\"string\">&quot;Eric&quot;</span>])</span><br><span class=\"line\">    println(result[<span class=\"string\">&quot;Mary&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出 6500, 7500, 6000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"標準函數\"><a href=\"#標準函數\" class=\"headerlink\" title=\"標準函數\"></a>標準函數</h2><p>在 Kotlin 標準函式庫中有提供一些支援 lambda 的標準函數－<code>Scope Function</code>，如 <code>apply</code>、<code>let</code>、<code>run</code>、<code>also</code>、<code>takeIf</code>等五種常用函數，若能<strong>善用這些函數進行開發，會讓我們的程式增加可讀性</strong>，以下分別進行介紹：</p>\n<ul>\n<li><p>apply</p>\n<p> <code>apply</code> 函數可視為配置函數，將需要設定的接收者傳入，再針對需求進行函數設定，例如以下範例：</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 apply 函數，可更直觀的方式進行設定</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> fileUsingApply = File(<span class=\"string\">&quot;data.txt&quot;</span>).apply &#123;</span><br><span class=\"line\">        setReadable(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        setWritable(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        setExecutable(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>let</p>\n<p>  <code>let</code> 函數可以產生一個暫時變數（預設為 it）作用於 lambda 運算式，<code>let</code> 只會將最後一行作為返回值（lambda 結果值）進行回傳，例如以下範例</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立一個數值集合</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>: List&lt;<span class=\"built_in\">Int</span>&gt; = listOf&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 取得集合第一個資料並使用 let 函數進行相乘</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">data</span>.first().let &#123; it * it  &#125;</span><br><span class=\"line\">    println(result)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出結果為 16</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>run</p>\n<p>  <code>run</code> 函數與 <code>apply</code> 函數相似，差別在於 <code>run</code> 函數不會返回接收者，返回的是一個 Lambda 結果，例如以下範例：</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>: List&lt;<span class=\"built_in\">Int</span>&gt; = listOf&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">data</span>.first()  <span class=\"comment\">// 取得集合第一個資料</span></span><br><span class=\"line\">                     .let &#123; it * it  &#125;    <span class=\"comment\">// 利用 let 函數進行相乘</span></span><br><span class=\"line\">                     .run &#123; <span class=\"keyword\">this</span> == <span class=\"number\">16</span> &#125;  <span class=\"comment\">// 利用 run 函數判斷結果值是否等於 16</span></span><br><span class=\"line\">    println(result)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出結果為 true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>also</p>\n<p>  <code>also</code> 函數與 <code>let</code> 函數相似，差別在於 <code>also</code> 函數返回的是接收者，而 <code>let</code> 函數返回的是 Lambda 結果，參考以下範例：</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>: List&lt;<span class=\"built_in\">Int</span>&gt; = listOf&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 取得集合第一個資料並使用 also 函數進行內部計算</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">data</span></span><br><span class=\"line\">                .first()</span><br><span class=\"line\">                .also &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> calculateResult = it * it</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;相乘計算結果 <span class=\"variable\">$calculateResult</span>&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;返回結果：<span class=\"variable\">$result</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出結果為</span></span><br><span class=\"line\">    <span class=\"comment\">// 相乘計算結果 16</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回結果 4  -&gt; 代表 also 是回傳原接收者物件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>takeIf</p>\n<p>  <code>takeIf</code> 與前面介紹的函數有些不同，<code>takeIf</code> 函數必須與 Lambda 提供的<code>條件運算式</code>（predicate）函數進行搭配使用，如果條件運算式成立結果為 true，則 <code>takeIf</code> 函數則會回傳原接收者物件，反之，若為 false，就會回傳 null，可參考以下範例：</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>: List&lt;<span class=\"built_in\">Int</span>&gt; = listOf&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">data</span>.first()   <span class=\"comment\">// 取得集合第一個資料</span></span><br><span class=\"line\">            .run &#123; <span class=\"keyword\">this</span> + <span class=\"number\">4</span> &#125;   <span class=\"comment\">// 利用 run 函數進行數值加 4，</span></span><br><span class=\"line\">            .takeIf &#123; it == <span class=\"number\">8</span> &#125; <span class=\"comment\">// 利用 takeIf 函數搭配判斷運算式，若數值符合則回傳計算值，不符合則回傳 null</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;返回結果 <span class=\"variable\">$result</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 印出「返回結果 8」</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>在這篇提到函數程式設計的基本概念、三種函數設計與 Lambda 相關函數介紹，後續也會逐漸在 Spring Boot 章節進一步介紹實際運用。這邊也希望大家能夠理解函數程式設計只是一種設計方法，而既然是設計方法，就不會有所謂的好壞之分，只有應用場景是否適合的差別，而 Kotlin 可支援多種程式設計方法，有時候我們也會混用物件導向程式設計與函數式程式設計解決手上的專案需求。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[官方] <a href=\"https://kotlinlang.org/docs/reference/scope-functions.html\">Kotlin 官方文件</a></li>\n<li>[文章] <a href=\"https://julianchu.net/2018/05/05-kotlin.html\">Kotlin 的 scope function：Kotlin 的 scope function: apply, let, run..等等</a></li>\n<li>[書籍] <a href=\"https://www.amazon.com/Kotlin-Programming-Nerd-Ranch-Guide/dp/0135161630\">Kotlin Programming: The Big Nerd Ranch Guide</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Kotlin"]},{"title":"[Day 14] 遠征 Kotlin × Spring Boot 專案配置介紹","url":"/2020/10/11/ironman-2020-14/","content":"<h2 id=\"文章回顧\"><a href=\"#文章回顧\" class=\"headerlink\" title=\"文章回顧\"></a>文章回顧</h2><p>昨日，我們將 <code>Spring Boot</code> 專案建置完成，可能會有朋友好奇，為什麼我們在 <code>DemoApplication.kt</code> 裡面加上一段程式碼，就可以用網址找到對應的字串結果，我們來看看昨日我們加入的程式：</p>\n<p>a. 直接在 DemoApplication.kt main函數下面加入以下程式</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/hello&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getHelloString</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, Kotlin&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>b. 加入程式碼後的結果圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179fZNa2Y0M80.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179fZNa2Y0M80.png\"></p>\n<p>其實我們可以觀察建置專案完成後，<code>DemoApplication.kt</code> 檔案的 <code>main</code> 函數上面會有一個<code>@SpringBootApplication</code> Annotation，此標註其實是 Spring Boot 專案核心標註，<strong>目的是為了開啟自動配置</strong>，而此標註裡面其實也包含了許多功能，我們可以直接進入看 <code>@SpringBootApplication</code> 的定義內容，如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200923/201211792TCE0OcphI.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200923/201211792TCE0OcphI.png\"></p>\n<p>我們會觀察到它的類別名稱上使用了許多標註，我們快速簡介每個標註的作用：</p>\n<p>@Target：描述此標註會用在什麼樣的地方<br>@Retention：指定此標註會保留多長時間<br>@Documented：主要作用是產生 <code>javadoc</code> 文件時，會將該標註寫入文件中<br>@Inherited：此標註用在類別上時，表示子類別會自動繼承此標註<br>@SpringBootConfiguration：繼承自 <code>@Configuration</code>，標註當前類別屬於配置型態<br>@EnableAutoConfiguration：啟動自動加入配置，導入專案內有使用到的套件<br>@ComponentScan：掃描專案內所有的 <code>@Controller</code>、<code>@Service</code>、<code>@Component</code>、<code>@Repository</code> 標註</p>\n<p>此時，我們在上面所困惑的問題就可以知道答案，是因為 Spring Boot 有透過 <code>@ComponentScan</code> 標註可進行抓取對應的類別與程式，而 Spring Boot 的設計目的就是將原本開發 Spring 常見複雜的開發配置進行自動化處理，讓我們快速建構專案進行後續業務邏輯的開發。但實務開發上，我們還是得需要了解如何在 Spring Boot 修改這些自動化配置，以應付實務上特殊的開發環境，故下面將會說明 Spring Boot 預設提供的 <code>[application.properties](http://application.properties)</code> 檔案，此檔案可以讓我們針對專案進行配置調整。</p>\n<h2 id=\"專案配置檔案－application\"><a href=\"#專案配置檔案－application\" class=\"headerlink\" title=\"專案配置檔案－application\"></a>專案配置檔案－application</h2><p>在 Spring Boot 專案建立完成後，會自動在專案內建立一個 <a href=\"http://application.properties/\">application.properties</a> 檔案進行應用程式的配置，全部參數可從 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#core-properties\">Spring 官方文件</a>中找到說明，此篇會先說明常用的幾個參數進行說明：</p>\n<p>配置檔案 <code>application</code> 預設是提供檔案格式 <code>properties</code> 進行配置，也同時支援現在廣泛推薦使用的 <code>YAML</code> 檔案格式，但 <code>YAML</code> 文件格式風格不像 <code>properties</code> 是以 <code>鍵值（Key-Value）</code> 文件格式表示，反而是比較偏向類似 <code>階層縮排</code> 文件格式進行表示，下面我們利用範例來看看兩者差異：</p>\n<ul>\n<li><p>application.properties</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">server.port</span> <span class=\"string\">=</span> <span class=\"number\">9999</span>  <span class=\"comment\"># 設定 Spring Boot 運行專案的 port 阜號</span></span><br><span class=\"line\"><span class=\"string\">spring.jpa.show-sql</span> <span class=\"string\">=</span> <span class=\"literal\">true</span>   <span class=\"comment\"># Spring Data JPA 相關資訊 - 後面章節會說明</span></span><br><span class=\"line\"><span class=\"string\">spring.jpa.hibernate</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"string\">spring.jpa.hibernate.ddl-auto</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"string\">spring.jpa.database</span> <span class=\"string\">=</span> <span class=\"string\">h2</span></span><br><span class=\"line\"><span class=\"string\">spring.h2.console.enabled</span> <span class=\"string\">=</span> <span class=\"literal\">true</span>   <span class=\"comment\"># Spring H2 資料庫相關資訊 - 後面章節會說明</span></span><br><span class=\"line\"><span class=\"string\">spring.h2.console.path</span> <span class=\"string\">=</span> <span class=\"string\">/h2-console</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.url</span> <span class=\"string\">=</span> <span class=\"string\">jdbc:h2:file:./src/main/resources/data/employees;AUTO_SERVER=true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>application.yml</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9999</span>   <span class=\"comment\"># 設定 Spring Boot 運行專案的 port 阜號</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># Spring Data JPA 相關資訊 - 後面章節會說明</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">h2</span></span><br><span class=\"line\">  <span class=\"attr\">h2:</span>  <span class=\"comment\"># Spring H2 資料庫相關資訊 - 後面章節會說明</span></span><br><span class=\"line\">    <span class=\"attr\">console:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/h2-console</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:h2:file:./src/main/resources/data/employees;AUTO_SERVER=true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>由上面範例我們可以看到，<code>YAML</code>檔案格式在配置上利用<code>階層縮排</code>的方式表達，結構上相對更為清晰易讀，而在 Spring Boot 中若使用 YAML 檔案格式進行配置時，會無法直接支援 <code>@PropertySource</code> Annotation 進行配置，<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config-yaml-shortcomings\">可以參考下圖官方文件說明</a>，還有 <code>YAML</code> 在撰寫上是<strong>必須要依照順序</strong>的，否則會無法判讀，而兩種檔案格式的好壞其實是比較主觀的，很難定論哪一種格式特別好，通常會以團隊開發習慣來進行規範，而本系列目前會先採用 YAML 格式進行實作。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179s7K6Hie4RD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179s7K6Hie4RD.png\"></p>\n<p>在 Spring 世界目前主要有兩大專案建構工具－<code>Maven</code>、<code>Gradle</code>，專案建構工具可以幫助我們處理專案說明、建構專案、依賴套件、部署等專案開發事項，幫助我們讓專案有規範、自動與彈性擴充，而 Maven 早於 Gradle 發布，Maven 在文件格式上仍舊使用 XML 格式作為編寫建構配置，<code>Gradle</code> 則是不使用 <code>XML</code> 方式，採用 Groovy <code>DSL （Domain Specific Languages）</code>特性進行編寫，使得 <code>Gradle</code> 在建構配置上會比 Maven 來得更簡潔清晰、靈活性更好。</p>\n<p>而昨天我們使用了 <code>Maven</code> 進行專案建置，今天我們嘗試將建立專案改為 <code>Gradle</code> 進行建置，只要將 New Project的 Type 改為 Gradle Project 即可，如下圖所示：</p>\n<p>(1) 修改 New Project Type 為 <code>Gradle Project</code>、Language 為 <code>Kotlin</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179LZCbQAz3aY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179LZCbQAz3aY.png\"></p>\n<p>(2) 運行專案可使用Gradle面板 Tasks → application → bootRun，或是直接在 Terminal  輸入  ./gradlew bootRun（參考圖 3）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179b2NVqm33dJ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179b2NVqm33dJ.png\"></p>\n<p>(3) 如不想使用 Gradle 功能表運行的朋友，也可以使用 <code>Terminal</code> 進行專案運行，如果是使用 Linux/Mac 的朋友輸入「./gradlew bootRun」即可，如果是使用 Windows 的朋友，可以輸入「gradlew.bat bootRun」<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179rCKXRCB4oo.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200923/20121179rCKXRCB4oo.png\"></p>\n<p>後續文章，我們會選擇使用 <code>Gradle</code> 進行後續功能介紹，前面會先使用 Maven 進行專案建置的原因，主要是因為在Spring 生態系找到的資料還是以 Maven 居多，希望大家還是可以了解此兩種工具是如何進行專案建置，避免在參考設定上比較不會有問題。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>【官方】<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config-yaml-shortcomings\">Spring Boot 文件</a></li>\n<li>【文章】 <a href=\"https://blog.csdn.net/qq_28289405/article/details/81302498\">SpringBoot 启动类 @SpringBootApplication 注解 以及执行流程</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 15] 遠征 Kotlin × Spring Boot 設定資料庫與匯入初始資料","url":"/2020/10/11/ironman-2020-15/","content":"<p>接下來，我們將嘗試在專案內連接資料庫，資料庫部份會採用 <code>H2</code> 資料庫進行練習，<code>H2</code> 是一個開源的資料庫引擎，其底層是使用 Java 所實作的資料庫，它可以作為<code>嵌入式資料庫</code>使用，在開發環境使用與測試非常方便，不像MySQL等資料庫需要啟動一個服務與設定相關配置才能夠使用，大大減少環境設定成本。</p>\n<p>我們利用昨日所建置的專案繼續實作，本章文章也有將專案放到 <a href=\"https://github.com/Xiang36/ironman-h2-example\">Github</a> 供大家參考，我們先在專案的 <code>build.gradle.kts</code> 檔案加入兩個套件 <code>JDBC</code>與<code>H2</code>配置到 <code>Gradle</code> 工具設定中，詳細可參考下面內容與結果圖片：</p>\n<p>(1) 在 build.gradle.kts 的 dependencies 加入以下內容</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 dependencies 加入下面兩段</span></span><br><span class=\"line\">implementation(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-jdbc&quot;</span>)</span><br><span class=\"line\">runtimeOnly(<span class=\"string\">&quot;com.h2database:h2&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(2) 加入完畢後，應為以下結果，供大家參考<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200924/201211793KwyiggT4w.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200924/201211793KwyiggT4w.png\"></p>\n<p>(3) 設定 <code>application.yml</code> 檔案內容與說明如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span> <span class=\"comment\"># 設定專案 port 為 8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">h2:</span></span><br><span class=\"line\">    <span class=\"attr\">console:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 啟動 H2 console</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/h2-console</span> <span class=\"comment\"># 設定 H2 管理頁面路徑</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:h2:mem:ironman;DB_CLOSE_DELAY=-1</span>  <span class=\"comment\"># 設定 H2 資料庫連線位置</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">sa</span> <span class=\"comment\"># 設定資料庫登入使用者</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Ironman0924!</span> <span class=\"comment\"># 設定資料庫登入密碼</span></span><br></pre></td></tr></table></figure>\n\n<p>完成上面步驟後，我們可以運行專案，打開瀏覽器瀏覽 <a href=\"http://localhost:8080/h2-console\">http://localhost:8080/h2-console</a> 頁面，就可以看到 H2 後端管理頁面，如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179MGrRTrntYS.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179MGrRTrntYS.png\"></p>\n<p>這邊我們要修改登入資訊 <code>JDBC URL</code> 、 <code>UserName</code>、<code>Password</code>，此三個欄位要與 application 內容設定相同，設定完成後按連線（Connect），即可進入管理頁面：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179ECBoy0Y5FT.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179ECBoy0Y5FT.png\"></p>\n<p>完成資料庫設定後，我們就要來匯入資料進行測試，而 H2 資料庫會自動抓取專案 resource 資料夾下的 SQL 檔案進行建置，故我們在專案資料夾的 src/main/resources 建立兩個檔案 <code>schema.sql</code>、<code>data.sql</code>，schema 檔案為建立資料表，data.sql 檔案為 insert 資料到資料表內，檔案內容參考如下：</p>\n<ul>\n<li>schema.sql</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> Student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> AUTO_INCREMENT PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span>  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    email <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>data.sql</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Student (<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, email) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Devin&#x27;</span>, <span class=\"string\">&#x27;test1@gmail.com&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;test2@gmail.com&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"string\">&#x27;Eric&#x27;</span>, <span class=\"string\">&#x27;test3@gmail.com&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>檔案放置完畢後，我們將專案重新運行，重新進入 H2 管理頁面（<a href=\"http://localhost:8080/h2-console\">http://localhost:8080/h2-console</a>），會發現到左手邊已經自動建立 Student 資料表，我們利用中間的視窗輸入查詢 SQL－<code>SELECT * FROM Student</code> 並運行此段 SQL，會發現預設資料也已經匯入，如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179x6Bqlg4PRH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179x6Bqlg4PRH.png\"></p>\n<p>透過上面步驟，我們已經順利完成資料庫建置與匯入初始資料，而上面我們使用的 H2 資料庫是採用記憶體類型進行資料儲存，所以當我們將專案重新運行後，會發現到資料其實會立即被清空，此功能其實非常適合測試環境，當測試完畢就立即刪除資料。但如果有朋友是想要將資料保存下來，H2 其實也有提供檔案類型方式進行資料儲存，執行方式說明如下：</p>\n<h2 id=\"執行方式\"><a href=\"#執行方式\" class=\"headerlink\" title=\"執行方式\"></a>執行方式</h2><ol>\n<li><p>在記憶體執行</p>\n<p> 表示資料庫資料是<strong>儲存在伺服器的記憶體</strong>，當我們關閉連線後資料庫會立即被清空，此方式非常適合測試環境</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 application 檔案需要設定為此段</span></span><br><span class=\"line\"><span class=\"string\">jdbc:h2:mem:ironman;DB_CLOSE_DELAY=-1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>嵌入式</p>\n<p> 可將<strong>資料庫儲存為檔案</strong>，進行資料持久性保存</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 application 檔案需要設定為此段</span></span><br><span class=\"line\"><span class=\"string\">jdbc:h2:file:./src/main/resources/data/ironman;AUTO_SERVER=true</span></span><br></pre></td></tr></table></figure>\n\n<p> file: 後面接的字串「./src/main/resources/data/ironman」為檔案所儲存路徑，表示資料庫會為我們儲存在 resource/data/ 資料夾下，並將資料庫命名為 <code>ironman</code> 資料庫，若第一次連線<strong>會自動建立資料庫與路徑對應的資料夾</strong></p>\n</li>\n<li><p>服務模式</p>\n<p> H2支援三種服務模式：</p>\n<ul>\n<li><code>Web server</code> 支援使用瀏覽器瀏覽管理頁面 H2 Console</li>\n<li><code>TCP server</code> 支援 Client/ Server 連線方式</li>\n<li><code>PG server</code> 支援 PostgreSQL Client</li>\n</ul>\n</li>\n<li><p>連線字串參數</p>\n<ul>\n<li><code>DB_CLOSE_DELAY</code> 要求最後一個正在連線的連線斷開後，不要關閉資料庫</li>\n<li><code>MODE=MySQL</code> 相容模式，H2相容多種資料庫，該值可以為：DB2、Derby、HSQLDB、MSSQLServer、MySQL、Oracle、PostgreSQL</li>\n<li><code>AUTO_RECONNECT=TRUE</code> 連線丟失後自動重新連線</li>\n<li><code>AUTO_SERVER=TRUE</code> 啟動自動混合模式，允許開啟多個連線，該引數不支援在記憶體中執行模式</li>\n<li><code>TRACE_LEVEL_SYSTEM_OUT、TRACE_LEVEL_FILE</code> 輸出跟蹤日誌到控制檯或檔案， 取值0為OFF，1為ERROR（預設值），2為INFO，3為DEBUG</li>\n<li><code>SET TRACE_MAX_FILE_SIZE mb</code> 設定跟蹤日誌檔案的大小，預設為16M</li>\n</ul>\n</li>\n</ol>\n<p>我們嘗試將原本的設定改為使用檔案方式進行儲存，修改 application.yml 檔案的 datasource.url 設定，會發現專案 Resource 會自動出現 Data 資料夾與 DB 檔案，如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179UtDB4wALRc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179UtDB4wALRc.png\"></p>\n<p>而為了要驗證資料有保存，可以先將 schema.sql 檔案刪除，避免重新運行專案後還是會將資料表 drop的狀況，再進入管理後台 insert 資料（insert sql 可參考下面），再重新運行專案與查詢資料，此時會發現資料確實有六筆出現，如下面結果：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Student (<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, email) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">(<span class=\"number\">4</span>, <span class=\"string\">&#x27;Devin&#x27;</span>, <span class=\"string\">&#x27;test1@gmail.com&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">5</span>, <span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;test2@gmail.com&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">6</span>, <span class=\"string\">&#x27;Eric&#x27;</span>, <span class=\"string\">&#x27;test3@gmail.com&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200924/201211799TjjnUalyz.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200924/201211799TjjnUalyz.png\"></p>\n<p>最後，我們來嘗試撰寫讀取資料庫的程式進行抓取資料庫資料，運用專案設定時所加入的 <code>JDBC</code> 套件撰寫，步驟與程式說明如下：</p>\n<ol>\n<li><p>將昨日在 DemoApplication.kt 檔案中加入的 HomeController 程式進行調整，修改為以下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span></span>(<span class=\"meta\">@Autowired</span> environment: Environment) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取得 application.yml 設定的配置數值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> url = environment.getProperty(<span class=\"string\">&quot;spring.datasource.url&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> username = environment.getProperty(<span class=\"string\">&quot;spring.datasource.username&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> password = environment.getProperty(<span class=\"string\">&quot;spring.datasource.password&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 資料庫連線</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> connection: Connection = DriverManager.getConnection(url, username, password)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取得 Student 所有資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentData</span><span class=\"params\">()</span></span>: ArrayList&lt;MutableMap&lt;String, Any&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 建立 Statement 進行資料庫操作</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> statement: Statement = connection.createStatement()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 取得 Student 資料表所有資料</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> record: ResultSet = statement.executeQuery(<span class=\"string\">&quot;SELECT * FROM Student&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 將 Student 資料取出並儲存在一個集合進行輸出</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> result: ArrayList&lt;MutableMap&lt;String, Any&gt;&gt; = ArrayList()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (record.next()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> item = mutableMapOf&lt;String, Any&gt;()</span><br><span class=\"line\">            item[<span class=\"string\">&quot;id&quot;</span>] = record.getInt(<span class=\"string\">&quot;id&quot;</span>)</span><br><span class=\"line\">            item[<span class=\"string\">&quot;name&quot;</span>] = record.getString(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">            item[<span class=\"string\">&quot;email&quot;</span>] = record.getString(<span class=\"string\">&quot;email&quot;</span>)</span><br><span class=\"line\">            result.add(item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>將專案重新運行，打開瀏覽器輸入「<a href=\"http://localhost:8080/students\">http://localhost:8080/students</a>」進行查詢，會得到一份 JSON檔案，即為我們資料庫目前所儲存的資料。</p>\n</li>\n</ol>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179r6CtfZrxQp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200924/20121179r6CtfZrxQp.png\"></p>\n<p>以上專案有放在 <a href=\"https://github.com/Xiang36/ironman-h2-example\">Github</a> 上，如有遇到問題，大家可以直接參考</p>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 16] 遠征 Kotlin × 使用 Spring Data JPA 操作資料庫 (1)","url":"/2020/10/11/ironman-2020-16/","content":"<p>昨日我們已經學會<code>資料庫設定</code>與使用 <code>JDBC 取得資料庫資料</code>，而今天我們將 JDBC 這段程式改為使用 <code>Spring Data JPA</code> 進行資料庫資料操作，而 Spring Data JPA 是 Spring Boot 官方相當推薦使用的 <code>ORM 框架</code>，可以<strong>讓使用者利用極簡的程式碼實現資料操作處理</strong>，它內部已經提供了資料庫 CRUD（Create、Read、Update、Delete）等常用功能，可以讓我們大幅提高開發效率，我們直接進入實作體驗：</p>\n<blockquote>\n<p>此文章有提供<a href=\"https://github.com/Xiang36/ironman-jpa-example\">範例程式碼</a>在 Github 供大家參考</p>\n</blockquote>\n<ol>\n<li><p>在 <code>build.gradle.kts</code> 的 <code>dependencies</code> 加入 <code>Spring DataJPA</code> 套件</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>設定 <code>application.yml</code> JPA 設定，這邊列出整個 application.yml 內容</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span>  <span class=\"comment\"># 設定 Spring Boot 啟動 port</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">h2:</span> <span class=\"comment\"># 設定 H2 資料庫</span></span><br><span class=\"line\">    <span class=\"attr\">console:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/h2-console</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span> <span class=\"comment\"># 設定 JPA 相關設定</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span> <span class=\"comment\"># 設定update值，表示只有第一次載入時需要自動建立資料表，其餘載入則是更新資料表結構</span></span><br><span class=\"line\">    <span class=\"attr\">database-platform:</span> <span class=\"string\">H2</span> <span class=\"comment\"># 設定 JPA database 為 H2 資料庫</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 顯示 JPA 運行的SQL語法</span></span><br><span class=\"line\">    <span class=\"attr\">generate-ddl:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:h2:file:./src/main/resources/data/ironman;AUTO_SERVER=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">sa</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Ironman0924!</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增 <code>Student.kt</code> 檔案，我們利用<code>data class</code>屬性建立 Student Entity，如果有使用 Java 開發過 Spring Boot 的朋友，會發現Kotlin是可以利用<code>data class</code>取代 Java 的 <code>lombok</code> 套件，檔案內容如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>(</span><br><span class=\"line\">        <span class=\"meta\">@Id</span></span><br><span class=\"line\">        <span class=\"meta\">@GeneratedValue(strategy = GenerationType.SEQUENCE)</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> id: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Column</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> name: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Column</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> email: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增 <code>StudentDao.kt</code> 檔案，建立 DAO 操作物件</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentDao</span>:  <span class=\"type\">JpaRepository</span>&lt;<span class=\"type\">Student, Long</span>&gt;, <span class=\"type\">JpaSpecificationExecutor</span>&lt;<span class=\"type\">Student</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增 <code>StudentController.kt</code> 檔案，建立兩個 API－<code>取得所有學生資料API</code>、<code>新增學生資料API</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/api&quot;</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> studentDao: StudentDao) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取得 Student 所有資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentData</span><span class=\"params\">()</span></span>: MutableList&lt;Student&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> studentDao.findAll()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增 Student 資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addStudentData</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> student: <span class=\"type\">Student</span>)</span></span>: Student &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> studentDao.save(student)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增 <code>Student.http</code> 檔案，利用 <code>Http Client</code> 工具進行 API 測試</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 取得所有學生資料 API</span></span><br><span class=\"line\"><span class=\"string\">GET</span> <span class=\"string\">http://localhost:8080/api/students</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 新增學生資料 API</span></span><br><span class=\"line\"><span class=\"string\">POST</span> <span class=\"string\">http://localhost:8080/api/students</span></span><br><span class=\"line\"><span class=\"attr\">Content-Type:</span> <span class=\"string\">application/json</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;:</span> <span class=\"string\">&quot;Devin&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;email&quot;:</span> <span class=\"string\">&quot;test@gmail.com&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 在 API 測試這塊，可能有些朋友接觸過 <code>Postman</code> 測試工具，而這邊我們使用的工具是 <code>Http Client</code> ，這套工具也可以讓開發者模擬 <code>Http Request</code> 動作，利用建立 Http 檔案與撰寫測試案例進行 API測試與取得驗證結果，而目前在工作開發上也經常使用這套工具，此工具若相較於Postman，個人認為 Http Client 帶給我們更多的好處，像是可以利用版本控制維護測試檔案，也可以與團隊共享此份測試檔案，在靈活度上佔有很大優勢，Plugin 其餘介紹也可以從這邊查看 <a href=\"https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html\">Document</a>：<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20200925/201211795y2swNt5bW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200925/201211795y2swNt5bW.png\"></p>\n</li>\n<li><p>我們實際測試 <code>新增學生資料API</code> 與 <code>取得所有學生資料API</code> 來觀看實際運作：<br>(1) 新增兩筆學生資料，實際操作結果如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200925/20121179w9oaTr6iWx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200925/20121179w9oaTr6iWx.png\"></p>\n<p>(2) 取得所有學生資料，實際操作結果如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200925/20121179aw96vaDFgk.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200925/20121179aw96vaDFgk.png\"></p>\n</li>\n</ol>\n<blockquote>\n<p>此文章有提供<a href=\"https://github.com/Xiang36/ironman-jpa-example\">範例程式碼</a>在 Github 供大家參考</p>\n</blockquote>\n<p>今天我們直接帶入實作步驟來讓大家感受 Spring Data JPA 的效果，而後續我們再來細談 Spring Data JPA 的介紹與其餘使用方式的介紹，相信大家會對於 Spring Data JPA 更了解。</p>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 17] 遠征 Kotlin × 使用 Spring Data JPA 操作資料庫 (2)","url":"/2020/10/11/ironman-2020-17/","content":"<h2 id=\"ORM-介紹\"><a href=\"#ORM-介紹\" class=\"headerlink\" title=\"ORM 介紹\"></a>ORM 介紹</h2><p>昨日，我們直接利用實作來感受 <code>Spring Data JPA</code> 的快速開發，會發現到我們只要建立 <code>Entity</code>，就可以幫助我們做資料庫映射來新增資料表與欄位，而此特性就是 <code>Object-Relation Mapping</code>－簡稱 ORM，就是將資料庫的內容映射為物件，讓我們可以用操作物件的方式對資料庫進行操作，而不用直接使用 SQL 語法對資料庫進行操作，甚至我們不用管底層的資料庫系統是什麼樣的資料庫，例如 SQL Server、MySQL，僅須使用同一套語法撰寫存取資料庫的邏輯，<strong>大幅降低程式與資料庫之間的耦合關係</strong>。</p>\n<h2 id=\"Spring-Data-JPA-介紹\"><a href=\"#Spring-Data-JPA-介紹\" class=\"headerlink\" title=\"Spring Data JPA 介紹\"></a>Spring Data JPA 介紹</h2><p>再來，我們來深入了解什麼是 <code>Spring Data JPA</code>，它其實是 Spring 與 JPA 的整合，<code>JPA</code> 是一種 ORM 規範，是 <code>Hibernate</code>（ORM 框架）的一個抽象，就像 JDBC 與 JDBC driver的關係，Hibernate 實作了 JPA 定義的規範，而 Spring Data JPA 則是<strong>基於 JPA 對資料庫溝通層進行封裝的應用框架</strong>，目標是希望簡化資料庫溝通層操作，內部涵蓋許多針對資料庫資料操作的解決方案。</p>\n<h2 id=\"資料持久層-Data-Persistence-Layer\"><a href=\"#資料持久層-Data-Persistence-Layer\" class=\"headerlink\" title=\"資料持久層 Data Persistence Layer\"></a>資料持久層 Data Persistence Layer</h2><p>昨日我們在實作程式有建立一個 <code>StudentDao</code> 程式，而所謂 DAO 其實是 <code>Data Access Object</code> 資料存取物件的縮寫，而資料持久層的意思就是把資料儲存的相關操作從原本架構解耦，即降低程式與資料庫的相依性，獨立出一個專門處理相關事務邏輯的物件，達到不同資料庫的統一存取方法，單一職責原則。</p>\n<h2 id=\"資料傳輸物件-Data-Transfer-Object-DTO\"><a href=\"#資料傳輸物件-Data-Transfer-Object-DTO\" class=\"headerlink\" title=\"資料傳輸物件 Data Transfer Object (DTO)\"></a>資料傳輸物件 Data Transfer Object (DTO)</h2><p>上面我們介紹了 DAO 物件，我們再介紹一個物件－DTO，此物件的作用如同名稱，主要是作為傳輸資料所使用，使用 DTO 可以讓我們減少參數傳遞的混亂，增加程式可讀性，也具備封裝性與擴充性，可以讓我們將一些必要傳遞但不希望被操作的資料進行封裝，或如果業務需要增加傳遞資料或對傳遞資料進行特定處理，只需要在物件增加欄位或修改即可。</p>\n<h2 id=\"Spring-Data-JPA-方法定義規則\"><a href=\"#Spring-Data-JPA-方法定義規則\" class=\"headerlink\" title=\"Spring Data JPA 方法定義規則\"></a>Spring Data JPA 方法定義規則</h2><p>昨日我們在撰寫 Dao 程式中會去實作 <code>JpaRepository</code> 與 <code>JpaSpecificationExecutor</code> 介面，而此兩個介面內容就是 Spring Data 所設計的基礎資料庫操作方法，可以讓類別實作後就可以輕易操作資料庫動作。JpaRepository 是<strong>提供基本 CRUD 相關操作方法</strong>，JpaSpecificationExecutor 則是<strong>提供一些複雜查詢方法</strong>，我們可以直接使用方法名稱快速進行資料庫操作，如下範例：</p>\n<blockquote>\n<p>此文章有提供<a href=\"https://github.com/Xiang36/ironman-jpa-example\">範例程式碼</a>在 Github 供大家參考</p>\n</blockquote>\n<p>在昨天的範例中，我們增加一個專案需求－利用姓名參數查詢學生資料：</p>\n<ol>\n<li><p>在 StudentDao 加入 findByName 函數</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findByName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span>: Student?</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 StudentController 加入「查詢指定姓名的學生資料」函數－ getStudentByName 函數</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/api&quot;</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> studentDao: StudentDao) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取得 Student 所有資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentData</span><span class=\"params\">()</span></span>: MutableList&lt;Student&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> studentDao.findAll()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增 Student 資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addStudentData</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> student: <span class=\"type\">Student</span>)</span></span>: Student &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> studentDao.save(student)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查詢指定姓名的學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(<span class=\"meta-string\">&quot;/students/search&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentByName</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> name: <span class=\"type\">String</span>)</span></span>: Student? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> studentDao.findByName(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Student.http 加入測試API 方法</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 利用姓名參數查詢學生資料</span></span><br><span class=\"line\"><span class=\"string\">POST</span> <span class=\"string\">http://localhost:8080/api/students/search?name=Devin</span></span><br><span class=\"line\"><span class=\"attr\">Content-Type:</span> <span class=\"string\">application/json</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最後再進行測試，假設我們資料庫的學生資料表有 Devin 這筆資料時，我們應得到以下結果：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200926/20121179NNCI3LgF8I.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200926/20121179NNCI3LgF8I.png\"></p>\n</li>\n</ol>\n<p>上面範例就是我們使用 Spring Data JPA 的方法名稱特性進行查詢的範例，其餘方法名稱的查詢規則，我們可以到 <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\">Spring Data JPA 官網</a>進行查詢，官網在規則這塊寫的非常清楚，此部份就不再補充，建議大家可以邊查詢邊撰寫程式進行測試，官網內容如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200926/20121179XTiujLHbvL.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200926/20121179XTiujLHbvL.png\"></p>\n<blockquote>\n<p>此文章有提供<a href=\"https://github.com/Xiang36/ironman-jpa-example\">範例程式碼</a>在 Github 供大家參考</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[官方] <a href=\"https://spring.io/projects/spring-data-jpa\">Spring Data JPA</a></li>\n<li>[文章] <a href=\"http://blog.twbryce.com/what-is-orm/\">ORM介紹及ORM優點、缺點</a></li>\n<li>[文章] <a href=\"https://1fly2sky.wordpress.com/2016/04/05/%E6%8C%81%E4%B9%85%E5%B1%A4data-persistence-layer/\">持久層(Data Persistence Layer)</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 19] 遠征 Kotlin × Spring Boot 使用 RESTful API (2)","url":"/2020/10/11/ironman-2020-19/","content":"<p>在前一篇 <a href=\"https://ithelp.ithome.com.tw/articles/10245346\">Spring Boot 使用 RESTful API (1)</a> 我們已經說明 RESTful API 的基本概念，接下來這篇我們要將前面所做的範例進行修改，實作步驟如下：</p>\n<blockquote>\n<p>運用的範例是在 <a href=\"https://ithelp.ithome.com.tw/articles/10244151\">第16篇「使用 Spring Data JPA 操作資料庫 (1)」</a> 的 Github 範例，有興趣的朋友也可以直接下載範例練習實作<br>從此篇開始，我們預計會在實作上加入 Kotlin 特性的撰寫風格，例如 Kotlin 章節所提到的 Scope Function、Elvis等特性</p>\n</blockquote>\n<ol>\n<li><p>我們在之前的範例，其實已經完成 <code>Get</code>、<code>Post</code> 等 API 操作，使用資源名稱為 <code>students</code>，如下範例：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/api&quot;</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> studentDao: StudentDao) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取得 Student 所有資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentData</span><span class=\"params\">()</span></span>: MutableList&lt;Student&gt; = studentDao.findAll()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增 Student 資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addStudentData</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> student: <span class=\"type\">Student</span>)</span></span>: Student = studentDao.save(student)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 利用姓名查詢學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(<span class=\"meta-string\">&quot;/students/search&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentByName</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> name: <span class=\"type\">String</span>)</span></span>: ResponseEntity&lt;List&lt;Student&gt;&gt;</span><br><span class=\"line\">            = studentDao</span><br><span class=\"line\">            .findByName(name)</span><br><span class=\"line\">            .let &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity(it, HttpStatus.OK)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增 <code>PUT</code> 實作 － <code>更新學生資料</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改學生全部資料</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PutMapping(<span class=\"meta-string\">&quot;/students/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudent</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>, <span class=\"meta\">@RequestBody</span> student: <span class=\"type\">Student</span>)</span></span>: ResponseEntity&lt;Student?&gt;</span><br><span class=\"line\">         = studentDao</span><br><span class=\"line\">        .findById(id)</span><br><span class=\"line\">        .run &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">        &#125;.run &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(studentDao.save(<span class=\"keyword\">this</span>), HttpStatus.OK)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增 <code>PATCH</code> 實作 － <code>修改部份學生資料</code>，此步驟要記得 <code>PUT</code> 與 <code>PATCH</code> 的差異，根據 RESTful 定義，通常會使用 PATCH 的呼叫會屬於僅修改部份資料的 API，此範例以修改學生信箱 API 為例：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改學生信箱（欲更新部份資料）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PatchMapping(<span class=\"meta-string\">&quot;/students/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudentEmail</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>, <span class=\"meta\">@RequestBody</span> email: <span class=\"type\">String</span>)</span></span>: ResponseEntity&lt;Student?&gt;</span><br><span class=\"line\">         = studentDao</span><br><span class=\"line\">        .findById(id)</span><br><span class=\"line\">        .run &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .run &#123;</span><br><span class=\"line\">               Student(</span><br><span class=\"line\">               id = <span class=\"keyword\">this</span>.id,</span><br><span class=\"line\">             name = <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">             email = email</span><br><span class=\"line\">           )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .run &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(studentDao.save(<span class=\"keyword\">this</span>), HttpStatus.OK)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增 <code>DELETE</code> 實作 － <code>刪除學生資料</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 刪除學生資料</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DeleteMapping(<span class=\"meta-string\">&quot;/students/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteStudent</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>)</span></span>: ResponseEntity&lt;Any&gt;</span><br><span class=\"line\">         = studentDao</span><br><span class=\"line\">        .findById(id)</span><br><span class=\"line\">        .run &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Any&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .run &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> ResponseEntity&lt;Any&gt;(studentDao.delete(<span class=\"keyword\">this</span>), HttpStatus.NO_CONTENT)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改測試檔案 <code>Student.http</code> － 增加 <code>PUT</code>、<code>PATCH</code>、<code>DELETE</code> 測試方法</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 取得所有學生資料 API</span></span><br><span class=\"line\"><span class=\"string\">GET</span> <span class=\"string\">http://localhost:8080/api/students</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 新增學生資料 API</span></span><br><span class=\"line\"><span class=\"string\">POST</span> <span class=\"string\">http://localhost:8080/api/students</span></span><br><span class=\"line\"><span class=\"attr\">Content-Type:</span> <span class=\"string\">application/json</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;:</span> <span class=\"string\">&quot;Devin&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;email&quot;:</span> <span class=\"string\">&quot;test@gmail.com&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 利用姓名參數查詢學生資料</span></span><br><span class=\"line\"><span class=\"string\">POST</span> <span class=\"string\">http://localhost:8080/api/students/search?name=Devin</span></span><br><span class=\"line\"><span class=\"attr\">Content-Type:</span> <span class=\"string\">application/json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 修改學生資料</span></span><br><span class=\"line\"><span class=\"string\">PUT</span> <span class=\"string\">http://localhost:8080/api/students/1</span></span><br><span class=\"line\"><span class=\"attr\">Content-Type:</span> <span class=\"string\">application/json</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attr\">&quot;name&quot;:</span> <span class=\"string\">&quot;Eric&quot;</span>,</span><br><span class=\"line\"> <span class=\"attr\">&quot;email&quot;:</span> <span class=\"string\">&quot;Eric@gmail.com&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 修改學生信箱資料</span></span><br><span class=\"line\"><span class=\"string\">PATCH</span> <span class=\"string\">http://localhost:8080/api/students/1</span></span><br><span class=\"line\"><span class=\"attr\">Content-Type:</span> <span class=\"string\">application/json</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;email&quot;:</span> <span class=\"string\">&quot;test@gmail.com&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 刪除學生資料</span></span><br><span class=\"line\"><span class=\"string\">DELETE</span> <span class=\"string\">http://localhost:8080/api/students/1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>以上，是我們根據 <code>RESTful API</code> 設計風格進行實作，最後這邊還是想提醒閱讀的朋友，雖然 RESTful是一個非常流行的API設計風格，大多公司都會使用到，但實際在開發專案時，還是會根據專案需求、團隊規範或是公司文化而會有所不同，畢竟<strong>設計風格只是一種參考，千萬不要變成開發的阻礙</strong>，架構應該要因應每種需求而有不同的改變，進而找出最適合的方式。</p>\n<blockquote>\n<p>此文章有提供<a href=\"https://github.com/Xiang36/ironman-restful-api-example\">範例程式碼</a>在 Github 供大家參考</p>\n</blockquote>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 20] 遠征 Kotlin × Spring Boot 使用分層架構 Layered Architecture","url":"/2020/10/11/ironman-2020-20/","content":"<p>軟體系統架構是建構者賦予系統的樣貌，而該樣貌是由不同元件組合而成，元件之間會有不同的合作與溝通方式，目的是為了<strong>讓軟體系統在開發、部署、運行和維護都能輕鬆理解與開發，也讓系統的生命週期成本趨近最小化，使程式設計師生產力最大化。</strong>—《Clean Architecture》</p>\n<p>而本章將要介紹架構—<code>分層架構（Layered Architecture）</code>，又稱為Ｎ層架構模式（N-tier Architecture Pattern），是軟體開發中經常看到的架構之一，它的每一層都有自己所負責的任務，每一層也有許多好處，例如：</p>\n<ul>\n<li><strong>簡化複雜性</strong>，達到關注點分離、結構清晰</li>\n<li><strong>降低耦合度</strong>，隔離層與層之間的關聯，降低彼此依賴，上層不需要了解下層狀況，利於分工、測試與維護</li>\n<li><strong>提高靈活性</strong>，可以靈活替換某一層的實作方法</li>\n<li><strong>提高擴展性</strong>，方便實現分散式部署方法</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200929/20121179aThMFJFPPl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200929/20121179aThMFJFPPl.png\"></p>\n<p>而在 Spring Boot 常見的階層架構會將專案分為四個主要類別：</p>\n<ul>\n<li><p><strong>表示層 Presentation Layer</strong></p>\n<p>  屬於該架構頂層，主要負責 Http 請求、路由處理、身份驗證與Json資料轉換處理，會將資料傳遞到業務邏輯層進行溝通</p>\n</li>\n<li><p><strong>業務邏輯層 Business Layer</strong></p>\n<p>  主要處理專案所有相關業務邏輯，包含處理業務規則、流程、資料完整性等，並接收來自表示層的資料請求，進行邏輯處理後，會轉向與資料持久層提交請求並傳遞資料結果。</p>\n</li>\n<li><p><strong>資料持久層 Persistence Layer</strong></p>\n<p>  作為應用程式與資料庫之間的抽象層，將業務層需要使用的物件映射到資料庫進行相互轉換與溝通</p>\n</li>\n<li><p><strong>資料庫層 Database Layer</strong></p>\n<p>  主要由資料庫組成，所有資料庫相關操作與設定都會於此層處理</p>\n</li>\n</ul>\n<p>在實作上，可參考下圖《 Spring Boot Flow Architecture》，Client 端會與 Controller 層進行 Http 請求溝通，而 Service 層會針對專案業務邏輯進行處理與請求數據，持久層則是利用 DAO 物件進行資料庫溝通實現，達到不同層處理各自的職責。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20200929/20121179SKLAWjkJUj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200929/20121179SKLAWjkJUj.png\"></p>\n<p>接下來我們進入實作步驟部份：</p>\n<ol>\n<li><p>首先在專案內建立 <code>Controller</code> 資料夾並將之前的 Controller 改用 <code>Interface</code> 進行定義，此作法主要是為了解耦合，當我們要修改Controller 實現方法時，只要修改實作 Implement 即可</p>\n<ul>\n<li><p>Interface 部份定義需求</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取得 Student 所有資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentData</span><span class=\"params\">()</span></span>: MutableList&lt;Student&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增 Student 資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(<span class=\"meta-string\">&quot;/students&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addStudentData</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> student: <span class=\"type\">Student</span>)</span></span> : Student</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 利用姓名查詢學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(<span class=\"meta-string\">&quot;/students/search&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentByName</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> name: <span class=\"type\">String</span>)</span></span> : ResponseEntity&lt;List&lt;Student&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改學生全部資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping(<span class=\"meta-string\">&quot;/students/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudent</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>, <span class=\"meta\">@RequestBody</span> student: <span class=\"type\">Student</span>)</span></span> : ResponseEntity&lt;Student?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改學生信箱（欲更新部份資料）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PatchMapping(<span class=\"meta-string\">&quot;/students/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudentEmail</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>, <span class=\"meta\">@RequestBody</span> student: <span class=\"type\">Student</span>)</span></span>: ResponseEntity&lt;Student?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刪除學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(<span class=\"meta-string\">&quot;/students/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteStudent</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>)</span></span>: ResponseEntity&lt;Any&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>implement controller 進行實作</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/api&quot;</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentControllerImpl</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> studentDao: StudentDao) : StudentController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentData</span><span class=\"params\">()</span></span>: MutableList&lt;Student&gt; = studentDao.findAll()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addStudentData</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: Student = studentDao.save(student)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentByName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span>: ResponseEntity&lt;List&lt;Student&gt;&gt;</span><br><span class=\"line\">            = studentDao</span><br><span class=\"line\">            .findByName(name)</span><br><span class=\"line\">            .let &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity(it, HttpStatus.OK)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudent</span><span class=\"params\">(id: <span class=\"type\">Int</span>, student: <span class=\"type\">Student</span>)</span></span>: ResponseEntity&lt;Student?&gt;</span><br><span class=\"line\">            = studentDao</span><br><span class=\"line\">            .findById(id)</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">            &#125;.run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(studentDao.save(<span class=\"keyword\">this</span>), HttpStatus.OK)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudentEmail</span><span class=\"params\">(id: <span class=\"type\">Int</span>, student: <span class=\"type\">Student</span>)</span></span>: ResponseEntity&lt;Student?&gt;</span><br><span class=\"line\">            = studentDao</span><br><span class=\"line\">            .findById(id)</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                Student(</span><br><span class=\"line\">                        id = <span class=\"keyword\">this</span>.id,</span><br><span class=\"line\">                        name = <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">                        email = student.email</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(studentDao.save(<span class=\"keyword\">this</span>), HttpStatus.OK)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteStudent</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span></span>: ResponseEntity&lt;Any&gt;</span><br><span class=\"line\">            = studentDao</span><br><span class=\"line\">            .findById(id)</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Any&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity&lt;Any&gt;(studentDao.delete(<span class=\"keyword\">this</span>), HttpStatus.NO_CONTENT)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>建立 <code>Data</code> 資料夾存放 <code>DAO</code> 、 <code>Entity</code> 物件，再建立 <code>Service</code> 資料夾準備建立 Service 物件，資料夾結構應如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200930/20121179KkrwO7NMy1.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200930/20121179KkrwO7NMy1.png\"></p>\n</li>\n<li><p>建立 <code>Service</code> 物件 <code>StudentService.kt</code>，建立時如同第一步驟的Controller，先使用 <code>Interface</code> 定義業務邏輯需求再進行實作，最後再將原本的Controller改使用Service進行資料請求，程式如下：</p>\n<ul>\n<li><p>Interface 定義業務邏輯需求</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查詢所有學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findAllStudent</span><span class=\"params\">()</span></span>: MutableList&lt;Student&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addStudent</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: Student</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查詢符合姓名條件的學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findByStudentId</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span></span>: Student?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查詢符合姓名條件的學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findByStudentName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span>: List&lt;Student&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新學生整個資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudent</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: Student</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新學生信箱資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudentEmail</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: Student</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刪除學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteStudent</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: <span class=\"built_in\">Unit</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Implement Service 進行實作</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentServiceImpl</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> studentDao: StudentDao) : StudentService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findAllStudent</span><span class=\"params\">()</span></span>: MutableList&lt;Student&gt; = studentDao.findAll()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addStudent</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: Student =</span><br><span class=\"line\">            Student(</span><br><span class=\"line\">                    name = student.name.trim(),</span><br><span class=\"line\">                    email = student.email.trim()</span><br><span class=\"line\">            ).run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> studentDao.save(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findByStudentId</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span></span>: Student? = studentDao.findById(id)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findByStudentName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span>: List&lt;Student&gt; = studentDao.findByName(name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudent</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: Student =</span><br><span class=\"line\">            Student(</span><br><span class=\"line\">                    id = student.id,</span><br><span class=\"line\">                    name = student.name.trim(),</span><br><span class=\"line\">                    email = student.email.trim()</span><br><span class=\"line\">            ).run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> studentDao.save(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudentEmail</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: Student =</span><br><span class=\"line\">            Student(</span><br><span class=\"line\">                    id = student.id,</span><br><span class=\"line\">                    name = student.name,</span><br><span class=\"line\">                    email = student.email.trim()</span><br><span class=\"line\">            ).run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> studentDao.save(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteStudent</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: <span class=\"built_in\">Unit</span> = studentDao.delete(student)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 Controller 對業務邏輯層的呼叫請求方法（原先是直接使用 DAO 物件）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/api&quot;</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentControllerImpl</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> studentService: StudentService) : StudentController &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取得 Student 所有資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentData</span><span class=\"params\">()</span></span>: MutableList&lt;Student&gt; = studentService.findAllStudent()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增 Student 資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addStudentData</span><span class=\"params\">(student: <span class=\"type\">Student</span>)</span></span>: Student = studentService.addStudent(student)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 利用姓名查詢學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStudentByName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span>: ResponseEntity&lt;List&lt;Student&gt;&gt;</span><br><span class=\"line\">            = studentService</span><br><span class=\"line\">            .findByStudentName(name)</span><br><span class=\"line\">            .let &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity(it, HttpStatus.OK)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改學生全部資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudent</span><span class=\"params\">(id: <span class=\"type\">Int</span>, student: <span class=\"type\">Student</span>)</span></span>: ResponseEntity&lt;Student?&gt;</span><br><span class=\"line\">            = studentService</span><br><span class=\"line\">            .findByStudentId(id)</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">            &#125;.run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(studentService.updateStudent(<span class=\"keyword\">this</span>), HttpStatus.OK)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改學生信箱（欲更新部份資料）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStudentEmail</span><span class=\"params\">(id: <span class=\"type\">Int</span>, student: <span class=\"type\">Student</span>)</span></span>: ResponseEntity&lt;Student?&gt;</span><br><span class=\"line\">            = studentService</span><br><span class=\"line\">            .findByStudentId(id)</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                Student(</span><br><span class=\"line\">                        id = <span class=\"keyword\">this</span>.id,</span><br><span class=\"line\">                        name = <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">                        email = student.email</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity&lt;Student?&gt;(studentService.updateStudentEmail(<span class=\"keyword\">this</span>), HttpStatus.OK)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刪除學生資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteStudent</span><span class=\"params\">(id: <span class=\"type\">Int</span>)</span></span>: ResponseEntity&lt;Any&gt;</span><br><span class=\"line\">            = studentService</span><br><span class=\"line\">            .findByStudentId(id)</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span> ?: <span class=\"keyword\">return</span> ResponseEntity&lt;Any&gt;(<span class=\"literal\">null</span>, HttpStatus.NOT_FOUND)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .run &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseEntity&lt;Any&gt;(studentService.deleteStudent(<span class=\"keyword\">this</span>), HttpStatus.NO_CONTENT)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>此文章有提供<a href=\"https://github.com/Xiang36/ironman-architecture-example\">範例程式碼</a>在 Github 供大家參考</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[書籍] <a href=\"https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164\">Clean Architecture: A Craftsman’s Guide to Software Structure and Design</a></li>\n<li>[文章] <a href=\"https://www.tutorialandexample.com/spring-boot-architecture/\">Spring Boot Architecture</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 18] 遠征 Kotlin × Spring Boot 使用 RESTful API (1)","url":"/2020/10/11/ironman-2020-18/","content":"<p>前面兩篇我們已經介紹完資料庫操作，可能有朋友會疑問 API 細節是如何進行實現，為什麼我們在 程式中加入 <code>@RestController</code>、<code>@GetMapping</code> 就可以實作一個 API 進行呼叫，甚至好奇什麼是 API，這篇將來解釋 API 實作細節並介紹 RESTful API 設計風格。</p>\n<p>API 的基本介紹我想可以直接參考<a href=\"https://medium.com/codingbar/api-%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%94%A8%E7%99%BD%E8%A9%B1%E6%96%87%E5%B8%B6%E4%BD%A0%E8%AA%8D%E8%AD%98-95f65a9cfc33\">這篇文章</a>，作者提到的 <code>API</code> 概念非常清晰，我們整理內容大概描述，<code>應用程式介面</code>（Application Programming Interface, API）是<strong>扮演應用程式與應用程式之間溝通的橋樑，以幫助使用者達到目的為目標導向，讓使用者在操作 API 的過程，不需要知道內部程式運作的邏輯，只要告訴 API 你的需求，即可達到目的</strong>。</p>\n<p>而 API 常見設計的風格有 <code>REST</code>、<code>GraphQL</code>、<code>gRPC</code>和 <code>Webhooks</code>，我們在這篇會先提到目前普遍率最高的 <code>RESTful API</code>來介紹。REST 全名為 Representational State Transfer( 表現層狀態轉移)，是此段開頭提到的其中一種 API 設計風格，而 RESTful 只是將 REST 轉為形容詞，一般在設計 Restful API 我們會通常會考慮四個重要觀念，如下：</p>\n<ol>\n<li><p><strong>Nouns 名詞</strong></p>\n<p> API Endpoint 必須使用 <code>名詞</code> 進行定義 URL，而每個資源都要<code>保持唯一性</code>，資源<code>採用複數命名</code>，例如學生資料就是 /students</p>\n</li>\n<li><p><strong>Verbs 動詞</strong></p>\n<p> 利用 <code>Verbs 動詞</code> 對 <code>Nouns 名詞</code> (資源 URL) 進行操作，在 HTTP 1.1 的實作就是 <code>HTTP Method</code>，即 Get、Post、Put、Delete、Patch等，例如使用 Get Method 取得學生資料、用 Delete Method 刪除學生資料，動詞分別描述如下：</p>\n<ul>\n<li>Get 讀取資源</li>\n<li>Post 新增替源或作為utility API，例如檢查帳號是否存在</li>\n<li>Delete 刪除資源</li>\n<li>Put 替換單一資源</li>\n<li>Patch 更新資源部份內容</li>\n</ul>\n</li>\n<li><p><strong>Content Types 資源呈現方式</strong></p>\n<p> 當我們如果要取得某一個 API 的資料，此資料格式可以有 HTML、 XML、JSON 等格式，同樣的 URL 資源可以有不同型態的表現方式。</p>\n</li>\n<li><p><strong>HTTP 回傳狀態碼</strong></p>\n<p> API 回傳結果應使用正確的 HTTP 狀態碼，這樣呼叫者才可以了解 API 實際運行狀況，這邊整理常見的狀態碼，若要了解完整狀態碼說明可參考 wiki－<a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">List of HTTP status codes</a>：</p>\n<ul>\n<li><p><strong>2xx 成功運行</strong></p>\n<ul>\n<li>200－OK 成功回傳結果</li>\n<li>201－Created 資源新增成功</li>\n<li>202－Accepted 請求接受，但結果還在處理</li>\n<li>204－No Content 沒有回應任何內容</li>\n</ul>\n</li>\n<li><p><strong>3xx 重新導向</strong></p>\n<ul>\n<li>301－Moved Permanently 重新導向URI</li>\n<li>304－Not Modified 請求資源並未修改</li>\n</ul>\n</li>\n<li><p><strong>4xx 用戶端錯誤</strong></p>\n<ul>\n<li>400－Bad Request 錯誤請求</li>\n<li>401－Unauthorized 使用者尚未通過身份驗證</li>\n<li>403－Forbidden 用戶端被禁止使用此請求</li>\n<li>404－Not Found 請求資源不存在</li>\n<li>405－Method Not Allowed 不支援請求的 Http method</li>\n<li>414－Url Too Long URI太長</li>\n</ul>\n</li>\n<li><p><strong>5xx 伺服器錯誤</strong></p>\n<ul>\n<li>500－Internal Server Error 內部伺服器錯誤</li>\n</ul>\n<p>這邊也推薦大家可以參考 <a href=\"https://www.loggly.com/blog/http-status-code-diagram/\">HTTP DECISION DIAGRAM</a> 來了解每個 Http 狀態運行的活動圖，下圖僅擷取 Request 時的活動圖給予大家進行參考，如果有興趣可以前往觀看完整版。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200927/2012117998LYJt5x5y.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200927/2012117998LYJt5x5y.png\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<p>而我們在 Controlelr 中加入的 <code>@RestController</code> 其實是 <code>@Controller</code> + <code>@ResponseBody</code> 組成，@Controller 是將標注（Annotation）的類別注入到 Spring IOC 容器，會讓該類別在運行中會被實例化（Instance），表示該類別具有 Controller 功用，而 @ResponseBody 會將我們函數所回傳的結果轉換為 JSON 格式傳送給 client 端。</p>\n<p>這篇文章希望大家能夠先將API概念與RESTful設計概念了解清楚，明日將會介紹前面實作的專案加入 RESTful API 設計風格後的成果</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://medium.com/codingbar/api-%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%94%A8%E7%99%BD%E8%A9%B1%E6%96%87%E5%B8%B6%E4%BD%A0%E8%AA%8D%E8%AD%98-95f65a9cfc33\">API 到底是什麼？ 用白話文帶你認識</a></li>\n<li><a href=\"https://blog.toright.com/posts/5523/restful-api-%E8%A8%AD%E8%A8%88%E6%BA%96%E5%89%87%E8%88%87%E5%AF%A6%E5%8B%99%E7%B6%93%E9%A9%97.html\">RESTful API 設計準則與實務經驗</a></li>\n<li><a href=\"https://www.loggly.com/blog/http-status-code-diagram/\">HTTP Status Codes Decision Diagram – Infographic</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 21] 遠征 Kotlin × Spring Boot 爬蟲實戰教學","url":"/2020/10/11/ironman-2020-21/","content":"<p>今日看到有許多鐵人賽的朋友紛紛完賽，有點好奇目前還有幾位鐵人還在一起努力，於是想到可以撰寫<code>爬蟲 Web scraper</code> 程式來了解一下，而在 Java library 中有個 <a href=\"https://jsoup.org/\">JSOUP</a> 套件，此套件有提供許多方便易用的 API 可以解析 HTML，使用方法與 <code>CSS</code> 或 <code>jQuery</code> 選擇器類似，也因為 Kotlin 與 Java 整合度非常好，所以 Kotlin 可以直接呼叫 Java Library 讓我們順利處理許多事情，下面我們來介紹 <code>JSOUP</code> 的使用方式與實作範例「鐵人賽比賽現況」</p>\n<h2 id=\"引入方法\"><a href=\"#引入方法\" class=\"headerlink\" title=\"引入方法\"></a>引入方法</h2><p>若要使用 JSOUP 套件要記得先引入套件，下面是 <code>Maven</code> 與 <code>Gradle</code> 分別引用方式</p>\n<ul>\n<li><p>Maven</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&lt;dependency&gt;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;version&gt;1.13.1&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Gradle</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">compile</span> <span class=\"string\">&#x27;org.jsoup:jsoup:1.13.1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"資料輸入方法\"><a href=\"#資料輸入方法\" class=\"headerlink\" title=\"資料輸入方法\"></a>資料輸入方法</h2><p>JSOUP 主要支援四種輸入（Input）方式進行解析成 Document 物件，如下：</p>\n<ol>\n<li><p><strong>從 字串 解析</strong></p>\n<p> 此方法要注意字串必須包含 head 與 body 元素</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> html : String = <span class=\"string\">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;First parse&lt;/title&gt;&lt;/head&gt;&quot;</span> + <span class=\"string\">&quot;&lt;body&gt;&lt;p&gt;Parsed HTML into a doc.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">val</span> doc : Document = Jsoup.parse(html);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>從 HTML 片段解析</strong></p>\n<p> 我們也可以將 HTML Body 元素下的部份元素進行分析，例如一部份的 Div 元素，如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> html : String = <span class=\"string\">&quot;&lt;div&gt;&lt;p&gt;Lorem ipsum.&lt;/p&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">val</span> doc : Document = Jsoup.parseBodyFragment(html);</span><br><span class=\"line\"><span class=\"keyword\">val</span> body : Element = doc.body();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>利用 URL 載入 Document</strong></p>\n<p> 此方式應該是最常用的方式，利用網頁 url 直接進行分析，其中會使用到 connect 方法，此方法會我們建立一個新的連線，也可以在此方法設定請求細節，例如 cookie、userAgent、timeout等設定，如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> doc : Document = Jsoup.connect(<span class=\"string\">&quot;http://example.com/&quot;</span>).<span class=\"keyword\">get</span>();</span><br><span class=\"line\"><span class=\"keyword\">val</span> title : String = doc.title();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>利用 File 載入 Document</strong></p>\n<p> 我們也可以將 HTML 檔案進行讀檔分析，如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> input : File = new File(<span class=\"string\">&quot;/tmp/input.html&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">val</span> doc : Document = Jsoup.parse(input, <span class=\"string\">&quot;UTF-8&quot;</span>, <span class=\"string\">&quot;http://example.com/&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"資料解析方法\"><a href=\"#資料解析方法\" class=\"headerlink\" title=\"資料解析方法\"></a>資料解析方法</h2><p>在解析方法中，主要會推薦使用兩種方法，再看大家比較喜歡哪一種方式：</p>\n<ol>\n<li><p><strong>DOM 方法</strong></p>\n<p> 此方法就是利用 <code>DOM</code> 操作的寫法讓我們學習如何在取得的 <code>Document</code> 物件進行取得元素值 <code>Element</code>，範例如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> input : File = new File(<span class=\"string\">&quot;/tmp/input.html&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">val</span> doc : Document = Jsoup.parse(input, <span class=\"string\">&quot;UTF-8&quot;</span>, <span class=\"string\">&quot;http://example.com/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> content : Element = doc.getElementById(<span class=\"string\">&quot;content&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">val</span> links : Elements = content.getElementsByTag(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">val</span> link : links) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> linkHref : String = link.attr(<span class=\"string\">&quot;href&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">val</span> linkText : String = link.text();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>尋找元素方法有以下幾種<ul>\n<li><code>[getElementById(String id)]</code> 利用 id 進行尋找</li>\n<li><code>[getElementsByTag(String tag)]</code> 利用 tag 進行尋找</li>\n<li><code>[getElementsByClass(String className)]</code> 利用 class 進行尋找</li>\n<li><code>[getElementsByAttribute(String key)]</code> 利用屬性值進行尋找</li>\n<li>也可以使用下面方法找出與元素有關聯的元素<ul>\n<li><code>[siblingElements()]</code></li>\n<li><code>[firstElementSibling()]</code></li>\n<li><code>[lastElementSibling()]</code></li>\n<li><code>[nextElementSibling()]</code></li>\n<li><code>[previousElementSibling()]</code></li>\n<li><code>[parent()]</code></li>\n<li><code>[children()]</code></li>\n<li><code>[child(int index)]</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>元素細節操作方法<ul>\n<li><code>[attr(String key)]</code> 利用元素 key 值取得元素屬性</li>\n<li><code>[attr(String key, String value)]</code> 設定元素屬性</li>\n<li><code>[attributes()]</code> 取得所有元素屬性</li>\n<li><code>[id()]</code>, <code>[className()]</code> and <code>[classNames()]</code></li>\n<li><code>[text()]</code> 取得元素文字資料</li>\n<li><code>[html()]</code> 取得元素 HTML 資料</li>\n<li><code>[tag()]</code> 、<code>[tagName()]</code> 取得 Tag 資料</li>\n</ul>\n</li>\n<li>控制 HTML 元素 與 文字<ul>\n<li><code>[append(String html)]</code>, <code>[prepend(String html)]</code></li>\n<li><code>[appendText(String text)]</code>, <code>[prependText(String text)]</code></li>\n<li><code>[appendElement(String tagName)]</code>, <code>[prependElement(String tagName)]</code></li>\n<li><code>[html(String value)]</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>選取器方法</strong></p>\n<p> 此方法類似於 <code>CSS</code>、<code>jQuery</code>的選取器使用方法，如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> input : File = new File(<span class=\"string\">&quot;/tmp/input.html&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">val</span> doc : Document = Jsoup.parse(input, <span class=\"string\">&quot;UTF-8&quot;</span>, <span class=\"string\">&quot;http://example.com/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> links : Elements = doc.select(<span class=\"string\">&quot;a[href]&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">val</span> pngs : Elements = doc.select(<span class=\"string\">&quot;img[src$=.png]&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> masthead : Element = doc.select(<span class=\"string\">&quot;div.masthead&quot;</span>).first();</span><br><span class=\"line\"><span class=\"keyword\">val</span> resultLinks : Elements = doc.select(<span class=\"string\">&quot;h3.r &gt; a&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>選取器（Selector）使用方式<ul>\n<li><code>tagname</code> 利用 Tag 找到元素，例如 a 元素</li>\n<li><code>#id</code>利用 # 符號加上 id 尋找元素</li>\n<li><code>.class</code> 利用 . 符號加上 class 值尋找元素</li>\n<li><code>[attribute]</code> 設定元素是否包含某個屬性進行進階條件尋找</li>\n<li><code>[attr=value]</code> 設定元素是否包含某個屬性欄位與對應值，例如 width=500</li>\n<li><code>[attr^=value]</code>, <code>[attr$=value]</code>, <code>[attr*=value]</code> 可針對屬性值使用模糊查詢</li>\n<li><code>[attr~=regex]</code>: 針對屬性值使用 regular expression，例如 <code>img[src~=(?i)\\.(png|jpe?g)]</code></li>\n</ul>\n</li>\n<li>選取器組合（Selector combinations ）方式<ul>\n<li><code>el#id</code>   利用元素加上 id 值進行尋找，例如 <code>div#logo</code></li>\n<li><code>el.class</code> 利用元素加上 class 值進行尋找，例如 <code>div.masthead</code></li>\n<li><code>el[attr]</code> 利用元素搭配屬性值進行尋找，例如 <code>a[href]</code></li>\n<li>或是使用任何元素與屬性進行尋找，例如 <code>a[href].highlight</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"元素擷取細節\"><a href=\"#元素擷取細節\" class=\"headerlink\" title=\"元素擷取細節\"></a>元素擷取細節</h2><p>上面已經介紹如何取得 Document 物件與取得特定元素 Element，再來想要介紹如何取得元素Elements 的細節資料，例如元素的文字（Text）、連結（href）等欄位，如下範例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> html : String = <span class=\"string\">&quot;&lt;p&gt;An &lt;a href=&#x27;http://example.com/&#x27;&gt;&lt;b&gt;example&lt;/b&gt;&lt;/a&gt; link.&lt;/p&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">val</span> doc : Document = Jsoup.parse(html);</span><br><span class=\"line\"><span class=\"keyword\">val</span> link : Element = doc.select(<span class=\"string\">&quot;a&quot;</span>).first();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> elementId = doc.id()</span><br><span class=\"line\"><span class=\"keyword\">val</span> elementTagName = doc.tagName()</span><br><span class=\"line\"><span class=\"keyword\">val</span> elementClassName = doc.className()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取得 An example link.</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> text : String = doc.body().text();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取得 http://example.com/</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> linkHref : String = link.attr(<span class=\"string\">&quot;href&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取得 example</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> linkText : String = link.text();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取得 &lt;a href=&quot;http://example.com/&quot;&gt;&lt;b&gt;example&lt;/b&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> linkOuterH : String = link.outerHtml();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取得 &lt;b&gt;example&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> linkInnerH : String = link.html();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"實作範例\"><a href=\"#實作範例\" class=\"headerlink\" title=\"實作範例\"></a>實作範例</h2><p>如本文開頭所述，這個範例是想了解鐵人賽還有多少參賽者還在一起努力，有多少鐵人朋友已經順利達陣完成30天目標，故我們從鐵人賽頁面的選手列表進行觀察，我們可以開啟瀏覽器的開發者工具了解網站每個元素的規則，這邊將觀察到的規則整理如下：</p>\n<p>(1) 開啟瀏覽器開發者工具，觀察每個元素如何進行命名，找出對應的規則<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200930/20121179Kz4OyH8kw1.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200930/20121179Kz4OyH8kw1.png\"></p>\n<ul>\n<li>contestants-list clearfix 為每一個參賽者資料區塊</li>\n<li>contestants-list__title 參賽者參賽主題</li>\n<li>contestants-list__name 參賽者暱稱</li>\n<li>contestants-list__desc 主題描述</li>\n<li>contestants-expect__number 敲碗數</li>\n<li>team-dashboard__day 挑戰天數</li>\n<li>contestants-group contestants-list__group 挑戰組別</li>\n<li>contestants-list__date 報名日期</li>\n<li>team-dashboard__box team-progress–challenge 正在挑戰的樣式</li>\n<li>team-dashboard__box team-progress–fail 挑戰失敗的樣式</li>\n</ul>\n<p>(2) 觀察出關鍵元素－正在挑戰 / 挑戰失敗的樣式差異，如下圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200930/20121179ljsaiEjRke.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200930/20121179ljsaiEjRke.png\"></p>\n<p>(3) 接下來，我們利用上述整理的規則進行撰寫程式，說明如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/api&quot;</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/getIronManData&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span>: HashMap&lt;String, Any&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化 API 輸出集合</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> response = HashMap&lt;String, Any&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 設定爬蟲會用到的基本參數</span></span><br><span class=\"line\">        <span class=\"comment\">// 鐵人賽網站連結</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> ironManUrl: String = <span class=\"string\">&quot;https://ithelp.ithome.com.tw/2020-12th-ironman/signup/list&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> document = Jsoup.connect(ironManUrl).<span class=\"keyword\">get</span>()</span><br><span class=\"line\">        <span class=\"comment\">// 取得全部網站註冊人數</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> totalRegisterPerson = document.select(<span class=\"string\">&quot;.contestants-num&quot;</span>)[<span class=\"number\">0</span>].text().replace(<span class=\"string\">&quot;報名數 &quot;</span>, <span class=\"string\">&quot;&quot;</span>).toInt()</span><br><span class=\"line\">        <span class=\"comment\">// 取得每頁參加者數量</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> onePageCount = document.select(<span class=\"string\">&quot;.contestants-list&quot;</span>).size</span><br><span class=\"line\">        <span class=\"comment\">// 取得全部頁面數量</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> totalPageCount = totalRegisterPerson / onePageCount + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">// 初始化參數</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> challengingCount = <span class=\"number\">0</span> <span class=\"comment\">// 仍正在挑戰中的人數</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> challengeSuccessCount = <span class=\"number\">0</span> <span class=\"comment\">// 挑戰成功的人數</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> challengeFailedCount = <span class=\"number\">0</span> <span class=\"comment\">// 挑戰失敗的人數</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> unchallengedCount = <span class=\"number\">0</span> <span class=\"comment\">// 已經報名，但未開賽的人數</span></span><br><span class=\"line\">        <span class=\"comment\">// 初始化每日進度集合</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> daysCount = HashMap&lt;String, <span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">30</span>) daysCount[index.toString()] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 帶入每頁頁碼參數</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (page <span class=\"keyword\">in</span> <span class=\"number\">1</span>..totalPageCount) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 連結加入頁碼參數</span></span><br><span class=\"line\">            document = Jsoup.connect(<span class=\"string\">&quot;<span class=\"variable\">$ironManUrl</span>?page=<span class=\"variable\">$page</span>&quot;</span>).<span class=\"keyword\">get</span>()</span><br><span class=\"line\">            <span class=\"comment\">// 查詢此頁參加者區塊數量</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> cardSize = document.select(<span class=\"string\">&quot;.contestants-list&quot;</span>).size</span><br><span class=\"line\">            <span class=\"comment\">// 帶入此頁區塊數量</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (index <span class=\"keyword\">in</span> <span class=\"number\">0</span> until cardSize) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 取得區塊元素 Element</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> item = document.select(<span class=\"string\">&quot;.contestants-list&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 取得挑戰天數資料</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> challengeDay = item.select(<span class=\"string\">&quot;.team-dashboard__day&quot;</span>)[index].text().replace(<span class=\"string\">&quot;DAY &quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;尚未開賽&quot;</span>, <span class=\"string\">&quot;0&quot;</span>).toString()</span><br><span class=\"line\">                <span class=\"comment\">// 將該挑戰天數的挑賽人數 + 1</span></span><br><span class=\"line\">                daysCount[challengeDay] = daysCount[challengeDay]!!.toInt().plus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 取得挑戰狀態</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> progressByChallengeStatus = ! item.select(<span class=\"string\">&quot;.team-progress--challenge&quot;</span>).isEmpty()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> progressByFailStatus = ! item.select(<span class=\"string\">&quot;.team-progress--fail&quot;</span>).isEmpty()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 計算挑戰成功、挑戰中、挑戰失敗、已報名未挑戰人數</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (progressByChallengeStatus &amp;&amp; !progressByFailStatus &amp;&amp; challengeDay.toInt() == <span class=\"number\">30</span>) challengeSuccessCount++</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (progressByChallengeStatus &amp;&amp; !progressByFailStatus &amp;&amp; challengeDay.toInt() != <span class=\"number\">30</span>) challengingCount++</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!progressByChallengeStatus &amp;&amp; progressByFailStatus &amp;&amp; challengeDay.toInt() == <span class=\"number\">0</span>) unchallengedCount++</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!progressByChallengeStatus &amp;&amp; progressByFailStatus &amp;&amp; challengeDay.toInt() &gt; <span class=\"number\">0</span>) challengeFailedCount++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 儲存 API 結果進行輸出</span></span><br><span class=\"line\">        response[<span class=\"string\">&quot;全部參賽人數&quot;</span>] = totalRegisterPerson</span><br><span class=\"line\">        response[<span class=\"string\">&quot;挑戰成功人數&quot;</span>] = challengeSuccessCount</span><br><span class=\"line\">        response[<span class=\"string\">&quot;挑戰進行人數&quot;</span>] = challengingCount</span><br><span class=\"line\">        response[<span class=\"string\">&quot;挑戰失敗人數&quot;</span>] = challengeFailedCount</span><br><span class=\"line\">        response[<span class=\"string\">&quot;挑戰進度文章數量（天/篇）&quot;</span>] = daysCount</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4) 接著執行程式 ，會產生如下 API 爬蟲結果：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200930/201211794tbE04dZuE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200930/201211794tbE04dZuE.png\"></p>\n<p>(5) 接著，當我們完成爬蟲程式並取得資料結果，後續其實就可以做很多事情，像是資料分析、資料視覺化等動作，下面也是我們針對結果產生出圖表，可以從圖表觀察出目前比賽進度的人數比例：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20200930/2012117934bBuQXbif.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20200930/2012117934bBuQXbif.png\"></p>\n<p>以上是 JSOUP 爬蟲介紹，建議大家可以練習實作看看，爬蟲程式在實作上不難，但卻可以讓我們在後續實作出很多很有趣的應用。</p>\n<h2 id=\"Rerference\"><a href=\"#Rerference\" class=\"headerlink\" title=\"Rerference\"></a>Rerference</h2><ul>\n<li>[官方文件] <a href=\"https://jsoup.org/cookbook/\">Jsoup cookbook</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 22] 遠征 Kotlin × Spring Boot 介紹單元測試 (1)","url":"/2020/10/11/ironman-2020-22/","content":"<p>此篇想談論單元測試並使用 <code>Junit</code> 工具進行測試撰寫，<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\">單元測試</a>是針對程式模組（軟體設計的最小單位）進行正確性檢驗的測試工作，並且是一段可自動化執行的程式碼，程式會呼叫被測試的工作單元，再針對此單元所執行的最終結果進行假設驗證，驗證此單元結果是否符合我們所預期的行為，而工作單元通常是程式模組最小的單位，當單元測試檢測發現程式錯誤時，我們也可以在第一時間進行修正，已證實程式達到專案需求目標，故單元測試應該具備以下特質：</p>\n<ul>\n<li>它應該是自動化，而且可被重複執行的</li>\n<li>它應該很容易被實現</li>\n<li>它的存在對於專案是具有意義的，並非臨時性作用</li>\n<li>它的執行應該是容易的</li>\n<li>它應該要能完全掌握被測試的單元</li>\n<li>它應該是能完全被隔離的，執行時獨立於其他測試</li>\n<li>如果檢測驗證失敗時，應該要能清楚呈現期望值與實際值差異，並且要能很清楚知道發生的原因為何，進一步修正錯誤</li>\n</ul>\n<p>好的單元測試，應該要具備三種特色：</p>\n<ul>\n<li><p><strong>可信賴性（Trustworthiness）</strong></p>\n<p>  開發者應對自己所撰寫測試的結果有信心，並且是針對實際專案需求進行正確的測試</p>\n</li>\n<li><p><strong>可維護性（Maintainability）</strong></p>\n<p>  測試也應保持好的可維護性，無法維護的測試會是一場惡夢，只會導致拖累專案整體進度</p>\n</li>\n<li><p><strong>可閱讀性（Readability）</strong></p>\n<p>  每次修改程式時都會持續進行單元測試檢測，當測試發生問題時，為了快速找到癥結點所在，保持好的閱讀性相當重要。</p>\n</li>\n</ul>\n<p>而實際在測試方法撰寫中，我們可以採取 <code>3A</code> 測試原則，如下：</p>\n<ol>\n<li><code>Arrange</code> 初始化目標物件、相依物件、方法參數、預期結果</li>\n<li><code>Act</code> 執行測試工作單元，取得實際測試結果</li>\n<li><code>Assert</code> 驗證結果是否符合預期結果</li>\n</ol>\n<p>以下直接將先前的 RESTful API 範例撰寫 Service Unit Test：</p>\n<ol>\n<li><p>Spring Boot 在建置專案時已經先引入 Test 套件org.springframework.boot:spring-boot-starter-test，裡面會包含相關測試模組，如 Junit、AssertJ、Mockito等元件</p>\n</li>\n<li><p>測試類別設定參數（@SpringBootTest、@MockBean、@Autowired）：</p>\n<p> @SpringBootTest Annotation 會為我們引入測試元件</p>\n<p> @MockBean 則是要新增一個 DAO 假物件，幫助我們順利進行Service的單元測試</p>\n<p> @Autowired 新增一個 Service 物件進行測試</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStudentService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MockBean</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> studentDao: StudentDao</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> studentServiceImpl: StudentServiceImpl</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加入測試方法</p>\n<ul>\n<li><p>測試取得所有學生資料</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetAllStudentWhenCallMethod</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Arrange 初始化測試資料與預期結果</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult : MutableList&lt;Student&gt; = mutableListOf&lt;Student&gt;()</span><br><span class=\"line\">    expectedResult.add(Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>))</span><br><span class=\"line\">    expectedResult.add(Student(<span class=\"number\">2</span>, <span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;eric@gmail.com&quot;</span>))</span><br><span class=\"line\">    given(studentDao.findAll()).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Act 執行測試工作單元，取得實際測試結果</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">actual</span> : MutableList&lt;Student&gt; = studentServiceImpl.findAllStudent()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Assert 驗證結果是否符合預期結果</span></span><br><span class=\"line\">    assertEquals(expectedResult, <span class=\"keyword\">actual</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>測試利用 id 取得單一學生資料</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetOneStudentWhenCallMethodById</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    given(studentDao.findById(<span class=\"number\">1</span>)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">actual</span> : Student? = studentServiceImpl.findByStudentId(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(expectedResult, <span class=\"keyword\">actual</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>測試利用 Name 欄位取得學生資料</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetStudentsWhenCallMethodByName</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult : MutableList&lt;Student&gt; = mutableListOf&lt;Student&gt;()</span><br><span class=\"line\">    expectedResult.add(Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>))</span><br><span class=\"line\">    given(studentDao.findByName(<span class=\"string\">&quot;Devin&quot;</span>)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">actual</span> : MutableList&lt;Student&gt; = studentServiceImpl.findByStudentName(<span class=\"string\">&quot;Devin&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(expectedResult, <span class=\"keyword\">actual</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>測試建立學生資料</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetNewStudentWhenCallMethodByStudent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = Student( <span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> requestParameter = Student( name = <span class=\"string\">&quot;Devin&quot;</span>, email = <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    given(studentDao.save(requestParameter)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">actual</span> : Student = studentServiceImpl.addStudent(requestParameter)</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(expectedResult, <span class=\"keyword\">actual</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>測試更新整個學生資料</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldUpdatedStudentWhenCallMethodByStudent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> requestParameter = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;eric@gmail.com&quot;</span>)</span><br><span class=\"line\">    given(studentDao.save(requestParameter)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">actual</span> : Student? = studentServiceImpl.updateStudent(requestParameter)</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(expectedResult, <span class=\"keyword\">actual</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>測試更新學生信箱</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldUpdatedEmailWhenCallMethodByStudent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> requestParameter = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;test@gmail.com&quot;</span>)</span><br><span class=\"line\">    given(studentDao.save(requestParameter)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">actual</span> : Student? = studentServiceImpl.updateStudentEmail(requestParameter)</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(expectedResult.email, <span class=\"keyword\">actual</span>?.email)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>測試刪除學生資料</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldDeletedStudentWhenCallMethodByStudent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedSaveResult = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    given(studentDao.findById(<span class=\"number\">1</span>)).willReturn(expectedSaveResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">actual</span> = studentServiceImpl.deleteStudent(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(expectedResult, <span class=\"keyword\">actual</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>此文章有提供範例程式碼在 <a href=\"https://github.com/Xiang36/ironman-junit-example\">Github</a> 供大家參考</p>\n</blockquote>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 23] 遠征 Kotlin × Spring Boot 介紹單元測試 (2)","url":"/2020/10/11/ironman-2020-23/","content":"<p>上一篇我們完成了 Service 的單元測試，而這篇我們要來測試 <code>Controller</code> 單元測試，在前面<a href=\"https://ithelp.ithome.com.tw/articles/10246576\">架構章節</a>有提到 Controller 是<strong>負責處理 Http 請求、路由處理、身份驗證與Json資料轉換等處理內容</strong>，而在測試我們為了要處理這些內容，會需要使用到兩個新的測試物件，<code>@WebMvcTest</code> 負責處理 Http請求與路由處理，<code>ObjectMapper</code> 負責協助我們將物件轉換為 Json 資料，以下直接進入實作觀察：</p>\n<ol>\n<li><p>在測試Test資料夾新增測試檔案－<code>TestStudentController</code>，並替測試類別設定參數（<code>@WebMvcTest</code>、<code>@MockBean</code>、<code>@Autowired</code>、<code>ObjectMapper</code>），範例如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebMvcTest(StudentController::class)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStudentController</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MockBean</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> studentServiceImpl: StudentServiceImpl</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> mockMvc: MockMvc</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> objectMapper = ObjectMapper()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加入測試方法</p>\n<ul>\n<li><p><strong>取得所有學生資料 API</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetAllStudentWhenCallMethod</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult : MutableList&lt;Student&gt; = mutableListOf&lt;Student&gt;()</span><br><span class=\"line\">    expectedResult.add(Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>))</span><br><span class=\"line\">    expectedResult.add(Student(<span class=\"number\">2</span>, <span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;eric@gmail.com&quot;</span>))</span><br><span class=\"line\">    given(studentServiceImpl.findAllStudent()).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    mockMvc.perform(</span><br><span class=\"line\">            <span class=\"keyword\">get</span>(<span class=\"string\">&quot;/api/students&quot;</span>)</span><br><span class=\"line\">                  .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">    ).andExpect(status().isOk)</span><br><span class=\"line\">     .andExpect(content().contentType(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">   .andExpect(content().string(objectMapper.writeValueAsString(expectedResult)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>取得單一學生資料 API</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetOneStudentWhenCallMethodById</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult : MutableList&lt;Student&gt; = mutableListOf&lt;Student&gt;()</span><br><span class=\"line\">    expectedResult.add(Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>))</span><br><span class=\"line\">                 given(studentServiceImpl.findByStudentName(<span class=\"string\">&quot;Devin&quot;</span>)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    mockMvc.perform(</span><br><span class=\"line\">            post(<span class=\"string\">&quot;/api/students/search&quot;</span>)</span><br><span class=\"line\">                   .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                   .param(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Devin&quot;</span>)</span><br><span class=\"line\">    ).andExpect(status().isOk)</span><br><span class=\"line\">     .andExpect(content().contentType(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">   .andExpect(content().string(objectMapper.writeValueAsString(expectedResult)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>建立學生資料 API</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetNewStudentWhenCallMethodByStudent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = Student( <span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> requestParameter = Student( name = <span class=\"string\">&quot;Devin&quot;</span>, email = <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    given(studentServiceImpl.addStudent(requestParameter)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    mockMvc.perform(</span><br><span class=\"line\">            post(<span class=\"string\">&quot;/api/students&quot;</span>)</span><br><span class=\"line\">                   .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                   .content(objectMapper.writeValueAsString(requestParameter))</span><br><span class=\"line\">    ).andExpect(status().isOk)</span><br><span class=\"line\">     .andExpect(content().contentType(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">   .andExpect(content().string(objectMapper.writeValueAsString(expectedResult)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>更新學生資料 API</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldUpdatedStudentWhenCallMethodByStudent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> requestParameter = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Eric&quot;</span>, <span class=\"string\">&quot;eric@gmail.com&quot;</span>)</span><br><span class=\"line\">    given(studentServiceImpl.findByStudentId(<span class=\"number\">1</span>)).willReturn(requestParameter)</span><br><span class=\"line\">    given(studentServiceImpl.updateStudent(requestParameter)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    mockMvc.perform(</span><br><span class=\"line\">            put(<span class=\"string\">&quot;/api/students/1&quot;</span>)</span><br><span class=\"line\">                  .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                  .content(objectMapper.writeValueAsString(requestParameter))</span><br><span class=\"line\">    ).andExpect(status().isOk)</span><br><span class=\"line\">     .andExpect(content().contentType(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">   .andExpect(content().string(objectMapper.writeValueAsString(expectedResult)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>更新學生信箱資料 API</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldUpdatedEmailWhenCallMethodByStudent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;devin@gmail.com&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> requestParameter = Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;Devin&quot;</span>, <span class=\"string\">&quot;test@gmail.com&quot;</span>)</span><br><span class=\"line\">    given(studentServiceImpl.findByStudentId(<span class=\"number\">1</span>)).willReturn(requestParameter     given(studentServiceImpl.updateStudentEmail(requestParameter)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    mockMvc.perform(</span><br><span class=\"line\">            patch(<span class=\"string\">&quot;/api/students/1&quot;</span>)</span><br><span class=\"line\">                    .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                    .content(objectMapper.writeValueAsString(requestParameter))</span><br><span class=\"line\">    ).andExpect(status().isOk)</span><br><span class=\"line\">     .andExpect(content().contentType(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">   .andExpect(content().string(objectMapper.writeValueAsString(expectedResult)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>刪除學生資料成功 API</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetIsNotContentStatusWhenDeleteSuccess</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = <span class=\"literal\">true</span></span><br><span class=\"line\">    given(studentServiceImpl.deleteStudent(<span class=\"number\">1</span>)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    mockMvc.perform(</span><br><span class=\"line\">            delete(<span class=\"string\">&quot;/api/students/1&quot;</span>)</span><br><span class=\"line\">                     .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">    ).andExpect(status().isNoContent)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>刪除學生資料失敗 API</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shouldGetBadRequestStatusWhenDeleteFailed</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> expectedResult = <span class=\"literal\">false</span></span><br><span class=\"line\">    given(studentServiceImpl.deleteStudent(<span class=\"number\">1</span>)).willReturn(expectedResult)</span><br><span class=\"line\"></span><br><span class=\"line\">    mockMvc.perform(</span><br><span class=\"line\">            delete(<span class=\"string\">&quot;/api/students/1&quot;</span>)</span><br><span class=\"line\">                     .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">    ).andExpect(status().isBadRequest)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<p>最後我們利用下圖來觀察專案的測試覆蓋率（Test Coverage）發現都是 100%，表示我們已經將每一段程式都有進行測試，但這邊建議測試覆蓋率只是一個參考數值，頂多只能了解自己有沒有地方少做測試，這與專案會不會有問題沒有絕對關係，以前有待過專案測試覆蓋率要求100%的團隊，也有待過測試覆蓋率要求 70-80% 左右的團隊，但個人覺得最主要還是在於我們是否有將產品核心相關的功能盡可能做到測試，畢竟這些功能才是與使用者有高度相關的。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20201002/20121179khZSQzYBOb.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201002/20121179khZSQzYBOb.png\"></p>\n<blockquote>\n<p>此文章有提供範例程式碼在 <a href=\"https://github.com/Xiang36/ironman-junit-example\">Github</a> 供大家參考</p>\n</blockquote>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 24] 遠征 Kotlin × Spring Boot 介紹 Template Engine (1)","url":"/2020/10/11/ironman-2020-24/","content":"<h3 id=\"Thymeleaf-是什麼\"><a href=\"#Thymeleaf-是什麼\" class=\"headerlink\" title=\"Thymeleaf 是什麼\"></a>Thymeleaf 是什麼</h3><p>Thymeleaf 是一個 <code>XML/HTML5</code> 模板引擎，能夠應用於模板設計檔案，非常適合 Spring 框架進行開發 HTML5 Web 應用程式</p>\n<h2 id=\"環境設置\"><a href=\"#環境設置\" class=\"headerlink\" title=\"環境設置\"></a>環境設置</h2><p>以下將介紹使用 <code>Thymeleaf</code> 進行專案開發時，所需要設定的環境：</p>\n<ol>\n<li><p>Spring Boot 在使用 <code>Thymeleaf</code> 時，須在配置加入 <code>Thymeleaf</code> 依賴套件</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- thymeleaf 相關依賴 --&gt;</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-thymeleaf&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>application.yml</code> 新增 <code>Thymeleaf</code> 相關配置，具體配置如下：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">h2:</span> <span class=\"comment\"># 設定 H2 資料庫相關配置</span></span><br><span class=\"line\">    <span class=\"attr\">console:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/h2-console</span></span><br><span class=\"line\"><span class=\"attr\">datasource:</span> <span class=\"comment\"># 設定資料庫相關配置</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:h2:file:./src/main/resources/data/ironman;AUTO_SERVER=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">sa</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Ironman0924!</span></span><br><span class=\"line\"><span class=\"attr\">jpa:</span> <span class=\"comment\"># 設定 JPA 相關配置</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">        <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">        <span class=\"attr\">database-platform:</span> <span class=\"string\">H2</span></span><br><span class=\"line\">        <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">generate-ddl:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">thymeleaf:</span></span><br><span class=\"line\">    <span class=\"attr\">cache:</span> <span class=\"literal\">false</span>    <span class=\"comment\"># 關閉 Cache</span></span><br><span class=\"line\">    <span class=\"attr\">encoding:</span> <span class=\"string\">UTF-8</span> <span class=\"comment\"># 編碼設定</span></span><br><span class=\"line\">    <span class=\"attr\">mode:</span> <span class=\"string\">HTML5</span>     <span class=\"comment\"># 模式</span></span><br><span class=\"line\">    <span class=\"attr\">suffix:</span> <span class=\"string\">.html</span>   <span class=\"comment\"># 檔案副檔名</span></span><br><span class=\"line\">    <span class=\"attr\">prefix:</span> <span class=\"string\">classpath:/templates/</span> <span class=\"comment\"># 檔案儲存位置</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撰寫 <code>Controller</code>，新增 <code>HomeController.kt</code> 檔案，內容如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">home</span><span class=\"params\">()</span></span> : String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;home&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>resources/templates</code> 路徑下新增頁面檔案 <code>home.html</code>，並新增內容如下：</p>\n <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">Hi, Thymeleaf</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>開啟瀏覽器進行測試，會發現以下頁面內容：</p>\n<p> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201003/20121179n1hePMgN14.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201003/20121179n1hePMgN14.png\"></p>\n</li>\n</ol>\n<h2 id=\"Thymeleaf-常用語法\"><a href=\"#Thymeleaf-常用語法\" class=\"headerlink\" title=\"Thymeleaf 常用語法\"></a>Thymeleaf 常用語法</h2><h3 id=\"變數表達式\"><a href=\"#變數表達式\" class=\"headerlink\" title=\"變數表達式\"></a>變數表達式</h3><p>Thymeleaf 預設帶有標準方言 Standard，它們定義了一組功能，這些功能足以讓我們應付大多數專案需求，而這些標準方言在模板的使用方式會包含以th字首開頭的屬性，如<code>&lt;span th:text=&quot;...&quot;&gt;</code>，表達式共有五種型別，分別整理如下：</p>\n<ul>\n<li><code>$&#123;...&#125;</code>  變數表示式</li>\n<li><code>&#123;...&#125;</code>  選擇表示式</li>\n<li><code>#&#123;...&#125;</code>  訊息 (i18n) 表示式</li>\n<li><code>@&#123;...&#125;</code>  連結 (URL) 表示式</li>\n<li><code>~&#123;...&#125;</code> : 片段表示式</li>\n</ul>\n<h3 id=\"變量表達式\"><a href=\"#變量表達式\" class=\"headerlink\" title=\"變量表達式\"></a>變量表達式</h3><p>變量表達式即 OGNL 表示式或 Spring EL 表示式（在 Spring 術語中也叫 model attributes）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;session.user.name&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;span th:text=<span class=\"string\">&quot;$&#123;book.author.name&#125;&quot;</span>&gt;</span><br><span class=\"line\">&lt;li th:each=<span class=\"string\">&quot;book : $&#123;books&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"選擇-星號-表示式\"><a href=\"#選擇-星號-表示式\" class=\"headerlink\" title=\"選擇(星號)表示式\"></a>選擇(星號)表示式</h3><p>選擇表示式很像變量表達式，不過它們用一個預先選擇的物件來代替上下文變數容器（map）來執行</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">*&#123;customer.name&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div th:object=<span class=\"string\">&quot;$&#123;book&#125;&quot;</span>&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;span th:text=<span class=\"string\">&quot;*&#123;title&#125;&quot;</span>&gt;...&lt;/span&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文字國際化表示式\"><a href=\"#文字國際化表示式\" class=\"headerlink\" title=\"文字國際化表示式\"></a>文字國際化表示式</h3><p>文字國際化表示式允許我們從一個外部檔案獲取區域文字資訊(.properties)，用 Key 索引 Value，還可以提供一組引數</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">#&#123;main.title&#125;  </span><br><span class=\"line\">#&#123;message.entrycreated($&#123;entryId&#125;)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;th th:text=<span class=\"string\">&quot;#&#123;header.address.city&#125;&quot;</span>&gt;...&lt;/th&gt;</span><br><span class=\"line\">  &lt;th th:text=<span class=\"string\">&quot;#&#123;header.address.country&#125;&quot;</span>&gt;...&lt;/th&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"URL表示式\"><a href=\"#URL表示式\" class=\"headerlink\" title=\"URL表示式\"></a>URL表示式</h3><p>URL 表示式指的是把一個有用的上下文資訊新增到 URL，這個過程經常被叫做 URL Rewrite</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">@&#123;<span class=\"regexp\">/order/</span>list&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@&#123;<span class=\"regexp\">/order/</span>details(id=$&#123;orderId&#125;)&#125;</span><br><span class=\"line\">@&#123;../documents/report&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form th:action=<span class=\"string\">&quot;@&#123;/createOrder&#125;&quot;</span>&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;main.html&quot;</span> th:href=<span class=\"string\">&quot;@&#123;/main&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上主要介紹 Thymeleaf 環境建置與基本的變數表達用法，下一篇將進行實作範例，實作會讓我們對於 Thymeleaf 的使用上更加了解。</p>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 25] 遠征 Kotlin × Spring Boot 介紹 Template Engine (2)","url":"/2020/10/11/ironman-2020-25/","content":"<p>昨日我們介紹了 Thymeleaf 樣板引擎，並已經完成 Template 環境建置與初始頁面，接下來我們嘗試利用樣板引擎來製作一個待辦清單 TodoList，我們直接進入實際實作步驟與介紹：</p>\n<ol>\n<li><p>設定環境設定 <code>application.yml</code></p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">h2:</span> <span class=\"comment\"># 設定 H2 資料庫相關配置</span></span><br><span class=\"line\">    <span class=\"attr\">console:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/h2-console</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span> <span class=\"comment\"># 設定資料庫相關配置</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:h2:file:./src/main/resources/data/ironman;AUTO_SERVER=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">sa</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">Ironman0924!</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span> <span class=\"comment\"># 設定 JPA 相關配置</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">    <span class=\"attr\">database-platform:</span> <span class=\"string\">H2</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">generate-ddl:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">thymeleaf:</span></span><br><span class=\"line\">    <span class=\"attr\">cache:</span> <span class=\"literal\">false</span>    <span class=\"comment\"># 關閉 Cache</span></span><br><span class=\"line\">    <span class=\"attr\">encoding:</span> <span class=\"string\">UTF-8</span> <span class=\"comment\"># 編碼設定</span></span><br><span class=\"line\">    <span class=\"attr\">mode:</span> <span class=\"string\">HTML5</span>     <span class=\"comment\"># 模式</span></span><br><span class=\"line\">    <span class=\"attr\">suffix:</span> <span class=\"string\">.html</span>   <span class=\"comment\"># 檔案副檔名</span></span><br><span class=\"line\">    <span class=\"attr\">prefix:</span> <span class=\"string\">classpath:/templates/</span> <span class=\"comment\"># 檔案儲存位置</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立 Todo <code>Entity</code>，映射 Todo 資料表與欄位，此部份我們將 id 改為 <a href=\"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\">UUID</a> 來進行自動編號，並且利用資料庫自動新增資料建立時間 createTime 與資料修改時間 updateTime</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span></span><br><span class=\"line\"><span class=\"meta\">@EntityListeners(AuditingEntityListener::class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaAuditing</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Todo</span></span>(</span><br><span class=\"line\">        <span class=\"meta\">@Id</span> <span class=\"keyword\">val</span> id: UUID = UUID.randomUUID(),</span><br><span class=\"line\">        <span class=\"keyword\">val</span> task: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> status: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@CreatedDate</span></span><br><span class=\"line\">        <span class=\"meta\">@Column(updatable = false, nullable = false)</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> createTime: Date = Date(),</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@LastModifiedDate</span></span><br><span class=\"line\">        <span class=\"meta\">@Column(nullable = false)</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> updateTime: Date = Date()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立 <code>Todo DAO</code>，建立DAO物件處理資料庫溝通</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TodoDao</span> :  <span class=\"type\">JpaRepository</span>&lt;<span class=\"type\">Todo, Long</span>&gt;, <span class=\"type\">JpaSpecificationExecutor</span>&lt;<span class=\"type\">Todo</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查詢符合 Id 條件的資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findById</span><span class=\"params\">(id: <span class=\"type\">UUID</span>)</span></span>: Todo?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立 Service Interface－<code>TodoService</code>，預計會使用四種動作（取得資料、建立資料、更新狀態、刪除資料）</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TodoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取得所有 Todo 資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTodos</span><span class=\"params\">()</span></span>: Iterable&lt;Todo&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 建立 Todo 資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createTodo</span><span class=\"params\">(todo: <span class=\"type\">Todo</span>)</span></span>: Todo</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新 Todo 狀態</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateTodoStatus</span><span class=\"params\">(id: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刪除 Todo 資料</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteTodo</span><span class=\"params\">(id: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>實作 Service - <code>TodoServiceImpl</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoServiceImpl</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> todoDao: TodoDao) : TodoService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTodos</span><span class=\"params\">()</span></span>: Iterable&lt;Todo&gt; = todoDao.findAll()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createTodo</span><span class=\"params\">(todo: <span class=\"type\">Todo</span>)</span></span>: Todo = todoDao.save(todo)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateTodoStatus</span><span class=\"params\">(id: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span> = todoDao.findById(UUID.fromString(id)).run &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>?.let &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it.status == <span class=\"number\">1</span>) it.status = <span class=\"number\">0</span> <span class=\"keyword\">else</span> it.status = <span class=\"number\">1</span></span><br><span class=\"line\">                todoDao.save(it)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (exception: Exception) &#123;</span><br><span class=\"line\">            <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteTodo</span><span class=\"params\">(id: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span> = todoDao.findById(UUID.fromString(id)).run &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>?.let &#123; todoDao.delete(it) &#125;</span><br><span class=\"line\">            <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (exception: Exception) &#123;</span><br><span class=\"line\">            <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立 Controller Interface - <code>HomeController</code>，建立資料(createTodo)會使用到 @ModelAttribute Annotation接收來自前端表單資料，而修改狀態資料(updateTodoStatus)與刪除資料（deleteTodo）則預計利用呼叫 API 方式進行動作，故須加上 @ResponseBody 標註：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HomeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/todos&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTodos</span><span class=\"params\">(model: <span class=\"type\">Model</span>)</span></span> : String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(<span class=\"meta-string\">&quot;/todos&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createTodo</span><span class=\"params\">(<span class=\"meta\">@ModelAttribute</span> todo: <span class=\"type\">Todo</span>)</span></span> : String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping(<span class=\"meta-string\">&quot;/todos/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateTodoStatus</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">String</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(<span class=\"meta-string\">&quot;/todos/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteTodo</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>實作 Controller，建立資料（createTodo）完成後要記得轉向取得資料頁面，會使用到 <code>redirect</code> 轉向方法</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeControllerImpl</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> todoService: TodoService): HomeController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTodos</span><span class=\"params\">(model: <span class=\"type\">Model</span>)</span></span>: String &#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;todolist&quot;</span>, todoService.getTodos());</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;todoObject&quot;</span>, Todo())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;home&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createTodo</span><span class=\"params\">(todo: <span class=\"type\">Todo</span>)</span></span>: String &#123;</span><br><span class=\"line\">        todoService.createTodo(todo)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/todos&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateTodoStatus</span><span class=\"params\">(id: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        todoService.updateTodoStatus(id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteTodo</span><span class=\"params\">(id: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">       todoService.deleteTodo(id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 resource / templates 資料夾建立 home.html</p>\n <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/style.css&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&amp;display=swap&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Todo List<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>待辦事項清單<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inputBox&quot;</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/todos&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">th:object</span>=<span class=\"string\">&quot;$&#123;todoObject&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;input&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;新增項目&quot;</span> <span class=\"attr\">th:field</span>=<span class=\"string\">&quot;*&#123;task&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>加入<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;todo: $&#123;todolist&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;todo.status&#125; == 1 ? &#x27;checked&#x27;: &#x27;&#x27; &quot;</span> <span class=\"attr\">th:onclick</span>=<span class=\"string\">&quot;updateTodoStatus([[$&#123;todo.id&#125;]])&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;todo.task&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close&quot;</span> <span class=\"attr\">th:onclick</span>=<span class=\"string\">&quot;deleteTodo([[$&#123;todo.id&#125;]])&quot;</span>&gt;</span>x<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> deleteTodo = <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    fetch(<span class=\"string\">&#x27;todos/&#x27;</span>+ id, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          method: <span class=\"string\">&#x27;delete&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">      if (response.status === 200) &#123;</span><br><span class=\"line\">          location.reload();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> updateTodoStatus = <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    fetch(<span class=\"string\">&#x27;todos/&#x27;</span> + id, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      method: <span class=\"string\">&#x27;put&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">      if (response.status === 200) &#123;</span><br><span class=\"line\">        location.reload();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 resource / static 建立 style.css</p>\n <figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#d5827b</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: arial,</span><br><span class=\"line\">  <span class=\"string\">&quot;Microsoft JhengHei&quot;</span>,<span class=\"string\">&quot;微軟正黑體&quot;</span>,</span><br><span class=\"line\">  sans-serif <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> <span class=\"selector-tag\">h2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10%</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span> <span class=\"number\">8px</span> <span class=\"number\">12px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">0.2s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"number\">15px</span> <span class=\"number\">#666</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child(odd)</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#f9f9f9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.checked</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#7a534f</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0.5px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.checked</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">7px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.close</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span> <span class=\"number\">16px</span> <span class=\"number\">12px</span> <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.close</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f44336</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inputBox</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#e0e2c6</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">30px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#5C4319</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"number\">15px</span> <span class=\"number\">#666</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inputBox</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">75%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.submit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#79b786</span>;</span><br><span class=\"line\">  color: #fbfffd;;</span><br><span class=\"line\">  <span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">text-align</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">font-size</span>: 16<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">cursor</span>: <span class=\"selector-tag\">pointer</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">transition</span>: 0<span class=\"selector-class\">.3s</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">border-radius</span>: 0;</span><br><span class=\"line\">  <span class=\"selector-tag\">margin-left</span>: 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.submit</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#bbb</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最後執行專案，即可看到 Todo List：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20201004/20121179uy0ZW9Kwb5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201004/20121179uy0ZW9Kwb5.png\"></p>\n</li>\n</ol>\n<blockquote>\n<p>此文章有提供範例程式碼在 <a href=\"https://github.com/Xiang36/ironman-thymeleaf-example\">Github</a> 供大家參考</p>\n</blockquote>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 26] 遠征 Kotlin × Spring Boot 部署網站到 Heroku","url":"/2020/10/11/ironman-2020-26/","content":"<p>前面我們利用 <code>Thymeleaf</code> 樣板引擎結合 <code>H2</code> 資料庫實作 Todo 待辦事項清單，而既然我們完成了一個小作品，我們就來將作品發佈到網路上吧！這邊我們利用 <code>Heroku</code> 服務進行網站部署，而 Heroku 是一個平台即服務（PaaS），可以讓我們部署各種網站，減少維護管理系統底層的成本，類似的平台有 GCP、AWS、Azure、阿里雲等。</p>\n<p>而 Heroku 在收費方面，以個人用途而言，提供每個帳戶每個月有 550 小時的免費額度（如下圖），若加入信用卡認證可以增加到 1000 小時的免費額度，也可以讓開發者客製化命名 Domains ，而在部署方面又非常快速簡單，非常適合開發者測試部署。<br>    <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/201211797bqoICi9rs.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/201211797bqoICi9rs.png\"><br>圖片來源自<a href=\"https://www.heroku.com/pricing\">Heroku官方網站</a></p>\n<p><strong>接下來，我們實際介紹部署步驟：</strong></p>\n<ol>\n<li><p>專案部份我們直接利用昨日範例（<a href=\"https://github.com/Xiang36/ironman-thymeleaf-example\">Github連結</a>）進行部署，也可以使用自己的專案進行部署</p>\n</li>\n<li><p>首先必須要先確保大家有 <code>Heroku 帳號</code>，可以利用此 Heroku 登入網頁（<a href=\"https://id.heroku.com/login\">https://id.heroku.com/login</a>）嘗試登入，<strong>若沒有帳號的朋友，請記得先註冊</strong><br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179ptNuHVnbsN.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179ptNuHVnbsN.png\"></p>\n</li>\n<li><p>接下來需要下載 <code>Heroku CLI 開發工具</code>，下載方式可以進入<a href=\"https://devcenter.heroku.com/articles/heroku-cli#download-and-install\">HeroKu 下載頁面</a>，再根據對應的作業系統進行下載<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/2012117902LFzfH44p.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/2012117902LFzfH44p.png\"></p>\n</li>\n<li><p>下載完畢後，打開<code>終端機（Terminal）</code>並<strong>切換終端機路徑到部署專案路徑下</strong>，再輸入 <code>heroku login</code>  進行 Heroku 登入，會需要輸入第二步驟登入或註冊的信箱與密碼</p>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> heroku login</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>接著在專案路徑底下輸入 <code>git 初始設定</code> 與 <code>heroku 發佈</code>，輸入如下：</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> git init</span><br><span class=\"line\"><span class=\"variable\">$</span> git add .</span><br><span class=\"line\"><span class=\"variable\">$</span> git commit <span class=\"literal\">-m</span> <span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$</span> heroku create</span><br><span class=\"line\"><span class=\"variable\">$</span> git push heroku master</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>發佈完成後，我們會在終端機畫面上看到 <code>Build Success提示訊息</code> 與 <code>部署完成的網址</code> ，此時我們<strong>打開瀏覽器開啟網址</strong>就可以看到我們部署的專案成果<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/201211791rgJIy7y97.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/201211791rgJIy7y97.png\"><br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/201211790caKkg6kv3.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/201211790caKkg6kv3.png\"></p>\n</li>\n<li><p>接著我們可以到 <code>Heroku</code> 的 <a href=\"https://dashboard.heroku.com/apps\">Dashboard 管理頁面</a>，會發現到我們剛上傳的應用程式（immense-mesa-06828）<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179affKbaqZ0U.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179affKbaqZ0U.png\"></p>\n</li>\n<li><p>而應用程式名稱是 Heroku 幫我們自動命名，若大家想要重新命名，可以<strong>點擊該應用程式進入頁面</strong>，再點擊 <code>Settings</code> 頁面，直接在 <code>App Name</code> 欄位進行名稱設定即可， <strong>Domains 網址也會自動更新</strong> ，如下圖：<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179yMy9ibHVX6.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179yMy9ibHVX6.png\"><br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179xOsITrBrkw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179xOsITrBrkw.png\"></p>\n</li>\n<li><p>我們打開瀏覽器瀏覽（ <a href=\"https://ithome-2020.herokuapp.com/todos\">https://ithome-2020.herokuapp.com/todos</a> ） 會發現網站已經成功修改為我們客製化命名的 Domain<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179y1DQAL1vLv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201005/20121179y1DQAL1vLv.png\"></p>\n</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[官方] <a href=\"https://devcenter.heroku.com/\">Heroku 網站</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 27] 遠征 Kotlin × Spring Boot 介紹 Spring AOP 機制","url":"/2020/10/11/ironman-2020-27/","content":"<p><code>切面導向程式設計</code>（Aspect-oriented programming, AOP)，又譯為<a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">面向方面程式設計、剖面導向程式設計</a>，此設計<strong>最主要目的是實現關注點分離（Separation of concerns）</strong>，希望將專案的橫切關注點與業務核心主體進行分離，以提高程式碼的模組化程度，使得我們可以直接將與核心業務功能關係較不相關的功能直接添加至程式中，同時又不會造成核心功能的程式可讀性複雜化，例如 Log 紀錄檔功能。</p>\n<p>故 AOP 機制可以讓我們將一些非功能性配置與核心業務功能進行分離，非功能性配置有例如日誌紀錄、效能統計、安全控制、事務處理、異常處理等配置，此優點又可以讓我們更專注在業務邏輯上的開發，不會有非功能性配置與業務功能耦合性問題。</p>\n<p>AOP 有以下相關主要術語：</p>\n<ul>\n<li><strong>Aspect 切面</strong>：由 <code>切入點（PointCut）</code>與 <code>通知（Advice）</code>組成，主要就是用來設定切入點（PointCut）與切入特定動作（Advice）</li>\n<li><strong>PointCut 切點</strong>：設定要被 <code>AOP</code> 切入的位置，例如某個類別或函數</li>\n<li><strong>JoinPoint 連接點</strong>：為 <code>PointCut</code> 切入後的<code>實際切入點</code>，通常是一個函數</li>\n<li><strong>Advice 通知</strong>：為 <code>Joint Point</code> 切入點實際要執行的動作，通常會將 Advice 模擬為一個攔截器（Interceptor），並且會在連接點（Join Point）上維護多個 Advice 進行層層攔截</li>\n</ul>\n<p>Advice 又可以分為五種類型：</p>\n<ul>\n<li><strong>@Before 前置通知</strong> — 在呼叫方法前執行</li>\n<li><strong>@AfterReturn 正常返回通知</strong> — 正常返回方法後執行</li>\n<li><strong>@AfterThrowing 異常返回通知</strong> — 在連接點拋出異常後執行</li>\n<li><strong>@After 返回通知</strong> — 方法最終結束後執行，相當於finaly</li>\n<li><strong>@Around 環繞通知</strong> — 圍繞整個方法</li>\n</ul>\n<blockquote>\n<p>五種類型執行順序為 @Around &gt; @Before &gt; @Around &gt; @After &gt; @AfterReturning</p>\n</blockquote>\n<p>接下來我們直接介紹實作：</p>\n<ol>\n<li><p>使用前面專案的 Todo 專案增加 AOP 方法，當使用者操作 Service 時，新增 Log 紀錄檔<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201006/20121179ENF3HjSkze.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201006/20121179ENF3HjSkze.png\"></p>\n</li>\n<li><p>新增 ServiceAspect.kt 檔案，內容如下：</p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一個 * 表示任意返回值</span></span><br><span class=\"line\">    <span class=\"comment\">// com.inroman.demo... 為 package 路徑</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二個 * 表示任何 Service 物件</span></span><br><span class=\"line\">    <span class=\"comment\">// 第三個 .*(..) 則表示任何方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(<span class=\"meta-string\">&quot;execution(* com.ironman.demo.service.*.*(..))&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">pointcut</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 設定 Before 通知並執行 pointcut 切點</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(<span class=\"meta-string\">&quot;pointcut()&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">before</span><span class=\"params\">(joinPoint: <span class=\"type\">JoinPoint</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 設定 Logger 帶入切入點類別名稱</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> logger = LoggerFactory.getLogger(joinPoint.target.javaClass.name)</span><br><span class=\"line\">        <span class=\"comment\">// 取得切入點方法</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> methodSignature: MethodSignature = joinPoint.signature <span class=\"keyword\">as</span> MethodSignature</span><br><span class=\"line\">        <span class=\"comment\">// 取得切入點方法名稱</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> methodName = methodSignature.method.name</span><br><span class=\"line\">        <span class=\"comment\">// 取得切入點方法類別</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> className = joinPoint.target.javaClass.name</span><br><span class=\"line\">        <span class=\"comment\">// 取得切入點方法參數</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> argsInfo = joinPoint.args</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;[處理開始] Service： <span class=\"variable\">$className</span>, Method：<span class=\"variable\">$methodName</span>, Args： <span class=\"variable\">$argsInfo</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 設定 After 通知並執行 pointcut 切點</span></span><br><span class=\"line\">    <span class=\"meta\">@After(<span class=\"meta-string\">&quot;pointcut()&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">after</span><span class=\"params\">(joinPoint: <span class=\"type\">JoinPoint</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> logger = LoggerFactory.getLogger(joinPoint.target.javaClass.name)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> methodSignature: MethodSignature = joinPoint.signature <span class=\"keyword\">as</span> MethodSignature</span><br><span class=\"line\">        <span class=\"keyword\">val</span> methodName = methodSignature.method.name</span><br><span class=\"line\">        <span class=\"keyword\">val</span> className = joinPoint.target.javaClass.name</span><br><span class=\"line\">        <span class=\"keyword\">val</span> argsInfo = joinPoint.args</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;[處理結束] Service： <span class=\"variable\">$className</span>, Method： <span class=\"variable\">$methodName</span>, Args： <span class=\"variable\">$argsInfo</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>觀察專案運行 Log<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201006/20121179yWxARLJpF1.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201006/20121179yWxARLJpF1.png\"></p>\n</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[官方] <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#aop-api\">Spring AOP</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 28] 遠征 Kotlin × Spring Boot 介紹 WebSocket 實作","url":"/2020/10/11/ironman-2020-28/","content":"<p>先前我們設計的 API 其實都是利用 <code>HTTP</code> 協定進行傳輸，而 HTTP <strong>只能利用 Client 端發送請求到 Service端</strong>，這類型屬於單向的，而 <code>WebSocket</code> 也是一種網路傳輸協定，它可以支援我們在 TCP 連接上進行全雙工通訊，使得 Client 端和 Server 端之間的資料交換可以變得更簡單，允許 Server 端主動向 Client 端傳輸資料。</p>\n<p>早期，網站為了實現 Server 端向 Client 端傳輸資料，會使用到<code>輪詢（Polling）</code>技術，此技術主要就是<strong>在 Client端設計由瀏覽器每隔一段時間向 Server 端發送 HTTP 請求（Request），再由 Server 端回應最新的資料給 Client端</strong>，而此技術最大的缺點就是瀏覽器會不斷向 Server 端發送請求，可能會造成浪費許多頻寬資源。</p>\n<p>目前較新的 Polling 技術是 <code>Comet</code> ，採用的方法是<code>長時間輪詢（Long-Polling）</code>，設計概念則是<strong>讓 Server 在接收到瀏覽器所送出的 Http 請求後，Server 端會等待一段時間，若在這段時間內伺服器有新的資料，他就會把最新的資料傳給瀏覽器</strong>，倘若沒有新的資料，則會回應瀏覽器資料沒有更新。雖然 Long-Polling 可以減少原先 Polling 技術造成網路頻寬浪費的狀況，但如果專案功能是屬於資料更新頻率很高的狀況下，Long-Polling 其實不會比 Polling 還要有效率。</p>\n<p>而此篇要介紹的 <code>WebSocket</code> 協定其實也是建立於 HTTP 架構之上，它背後基本上還是以 HTTP 作為傳輸層，與 HTTP 一樣使用 80、443 port（https），但 WebSocket 大幅改善了 Comet 缺點，連線數量減少為一條，當 Server 端有資料更新時，會自動傳送給 Client 端，進行<code>即時更新（Realtime）</code>的動作，所以WebSocket非常適用於即時系統上，例如聊天室、遊戲、證券交易系統、多人共同編輯工具等。</p>\n<p>接下來，我們直接實作聊天室應用來深入感受 WebSocket 技術：</p>\n<ol>\n<li><p>在 Gradle <code>build.gradle.kts</code> 加入 <code>WebSocket</code> 套件</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-websocket&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立 WebSocket 配置－ <code>WebSocketConfig</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSocketMessageBroker</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketConfig</span> : <span class=\"type\">WebSocketMessageBrokerConfigurer &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">registerStompEndpoints</span><span class=\"params\">(stompEndpointRegistry: <span class=\"type\">StompEndpointRegistry</span>)</span></span> &#123;</span><br><span class=\"line\">        stompEndpointRegistry.addEndpoint(<span class=\"string\">&quot;/ws&quot;</span>).setAllowedOrigins().withSockJS()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">configureMessageBroker</span><span class=\"params\">(messageBrokerRegistry: <span class=\"type\">MessageBrokerRegistry</span>)</span></span> &#123;</span><br><span class=\"line\">        messageBrokerRegistry.setApplicationDestinationPrefixes(<span class=\"string\">&quot;/app&quot;</span>)</span><br><span class=\"line\">        messageBrokerRegistry.enableSimpleBroker(<span class=\"string\">&quot;/topic&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立 Data Class－ <code>ChatMessage</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageType</span> </span>&#123;</span><br><span class=\"line\">    CHAT,</span><br><span class=\"line\">    JOIN,</span><br><span class=\"line\">    LEAVE</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatMessage</span></span>(</span><br><span class=\"line\">        <span class=\"keyword\">val</span> type: MessageType,</span><br><span class=\"line\">        <span class=\"keyword\">val</span> content: String? = <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sender: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立 WebSocketConfig 監聽器－ <code>WebSocketConfig</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketEventListener</span></span>(<span class=\"meta\">@Autowired</span> <span class=\"keyword\">val</span> simpleMessageSendingOperations: SimpMessageSendingOperations) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> logger: Logger = LoggerFactory.getLogger(WebSocketEventListener::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * WebSocket 連線監聽器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@EventListener</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleWebSocketConnectListener</span><span class=\"params\">(sessionConnectedEvent: <span class=\"type\">SessionConnectedEvent</span>)</span></span> &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;接收到新的連線&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * WebSocket 中斷連線監聽器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@EventListener</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleWebSocketDisconnectListener</span><span class=\"params\">(sessionDisconnectEvent: <span class=\"type\">SessionDisconnectEvent</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> stompHeaderAccessor: StompHeaderAccessor = StompHeaderAccessor.wrap(sessionDisconnectEvent.message)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> username: String? = stompHeaderAccessor.sessionAttributes?.<span class=\"keyword\">get</span>(<span class=\"string\">&quot;username&quot;</span>) <span class=\"keyword\">as</span> String?</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (username != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">&quot;<span class=\"variable\">$username</span> 使用者離開聊天室&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">val</span> chatMessage = ChatMessage(</span><br><span class=\"line\">                    type = MessageType.LEAVE,</span><br><span class=\"line\">                    sender = username</span><br><span class=\"line\">            )</span><br><span class=\"line\">            simpleMessageSendingOperations.convertAndSend(<span class=\"string\">&quot;/topic/public&quot;</span>, chatMessage);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立 Controller 方法－ <code>ChatController</code></p>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增聊天訊息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MessageMapping(<span class=\"meta-string\">&quot;/sendMessage&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@SendTo(<span class=\"meta-string\">&quot;/topic/public&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendMessage</span><span class=\"params\">(<span class=\"meta\">@Payload</span> chatMessage: <span class=\"type\">ChatMessage</span>)</span></span>: ChatMessage = chatMessage</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增使用者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MessageMapping(<span class=\"meta-string\">&quot;/addUser&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@SendTo(<span class=\"meta-string\">&quot;/topic/public&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addUser</span><span class=\"params\">(<span class=\"meta\">@Payload</span> chatMessage: <span class=\"type\">ChatMessage</span>, simpMessageHeaderAccessor: <span class=\"type\">SimpMessageHeaderAccessor</span>)</span></span>: ChatMessage &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 設定使用者姓名</span></span><br><span class=\"line\">        simpMessageHeaderAccessor.sessionAttributes?.put(<span class=\"string\">&quot;username&quot;</span>, chatMessage.sender)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatMessage</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成後端的 WebSocket 後，接下來我們實作前端聊天室部份，前端聊天室部份會採用 <code>Sockjs</code> 套件簡化 WebSocket 呼叫，而一般使用 <code>Sockjs</code> 會搭配 <code>Stomp</code> 套件一起使用。</p>\n</li>\n<li><p>在 <code>resources/static</code> 資料夾下新增 <code>index.html</code>，內容如下：</p>\n <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Spring Boot WebSocket 聊天室應用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/css/main.css&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Sorry! 您的瀏覽器不支援<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username-page&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;username-page-container&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>輸入聊天室使用者名稱<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usernameForm&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;usernameForm&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;使用者名稱&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;accent username-submit&quot;</span>&gt;</span>開始聊天<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chat-page&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hidden&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chat-container&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chat-header&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Spring Boot WebSocket 聊天室<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;connecting&quot;</span>&gt;</span></span><br><span class=\"line\">                連線中...</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;messageArea&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;messageForm&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;messageForm&quot;</span> <span class=\"attr\">nameForm</span>=<span class=\"string\">&quot;messageForm&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;輸入對話訊息&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>/&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;primary&quot;</span>&gt;</span>送出<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>resources/static/js</code> 資料夾新增 <code>main.js</code> 檔案，內容如下：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> usernamePage = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username-page&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> chatPage = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#chat-page&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> usernameForm = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#usernameForm&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> messageForm = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#messageForm&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> messageInput = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#message&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> messageArea = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#messageArea&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> connectingElement = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.connecting&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stompClient = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> username = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> colors = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;#2196F3&#x27;</span>, <span class=\"string\">&#x27;#32c787&#x27;</span>, <span class=\"string\">&#x27;#00BCD4&#x27;</span>, <span class=\"string\">&#x27;#ff5652&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;#ffc107&#x27;</span>, <span class=\"string\">&#x27;#ff85af&#x27;</span>, <span class=\"string\">&#x27;#FF9800&#x27;</span>, <span class=\"string\">&#x27;#39bbb0&#x27;</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定WebSocket連線</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> connect = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    username = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#name&#x27;</span>).value.trim();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username) &#123;</span><br><span class=\"line\">        usernamePage.classList.add(<span class=\"string\">&#x27;hidden&#x27;</span>);</span><br><span class=\"line\">        chatPage.classList.remove(<span class=\"string\">&#x27;hidden&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> socket = <span class=\"keyword\">new</span> SockJS(<span class=\"string\">&#x27;/ws&#x27;</span>);</span><br><span class=\"line\">        stompClient = Stomp.over(socket);</span><br><span class=\"line\">        stompClient.connect(&#123;&#125;, onConnected, onError);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 連線成功時發出 addUser 請求</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> onConnected = <span class=\"function\">(<span class=\"params\">options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    stompClient.subscribe(<span class=\"string\">&#x27;/topic/public&#x27;</span>, onMessageReceived);</span><br><span class=\"line\">    stompClient.send(<span class=\"string\">&quot;/app/addUser&quot;</span>,</span><br><span class=\"line\">        &#123;&#125;,</span><br><span class=\"line\">        <span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"attr\">sender</span>: username, <span class=\"attr\">type</span>: <span class=\"string\">&#x27;JOIN&#x27;</span>&#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    connectingElement.classList.add(<span class=\"string\">&#x27;hidden&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 無法連線到 WebSocket 時出現錯誤</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> onError = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    connectingElement.textContent = <span class=\"string\">&#x27;無法連到 WebSocket 伺服器&#x27;</span>;</span><br><span class=\"line\">    connectingElement.style.color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 發送對話訊息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sendMessage = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> messageContent = messageInput.value.trim();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(messageContent &amp;&amp; stompClient) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> chatMessage = &#123;</span><br><span class=\"line\">            sender: username,</span><br><span class=\"line\">            content: messageInput.value,</span><br><span class=\"line\">            type: <span class=\"string\">&#x27;CHAT&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        stompClient.send(<span class=\"string\">&quot;/app/sendMessage&quot;</span>, &#123;&#125;, <span class=\"built_in\">JSON</span>.stringify(chatMessage));</span><br><span class=\"line\">        messageInput.value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收 WebSocket 回應進行處理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> onMessageReceived = <span class=\"function\">(<span class=\"params\">payload</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"built_in\">JSON</span>.parse(payload.body);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> messageElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(message.type === <span class=\"string\">&#x27;JOIN&#x27;</span>) &#123;</span><br><span class=\"line\">        messageElement.classList.add(<span class=\"string\">&#x27;event-message&#x27;</span>);</span><br><span class=\"line\">        message.content = message.sender + <span class=\"string\">&#x27; joined!&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message.type === <span class=\"string\">&#x27;LEAVE&#x27;</span>) &#123;</span><br><span class=\"line\">        messageElement.classList.add(<span class=\"string\">&#x27;event-message&#x27;</span>);</span><br><span class=\"line\">        message.content = message.sender + <span class=\"string\">&#x27; left!&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message.type === <span class=\"string\">&#x27;CHAT&#x27;</span>)&#123;</span><br><span class=\"line\">        messageElement.classList.add(<span class=\"string\">&#x27;chat-message&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> avatarElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;i&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> avatarText = <span class=\"built_in\">document</span>.createTextNode(message.sender[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        avatarElement.appendChild(avatarText);</span><br><span class=\"line\">        avatarElement.style[<span class=\"string\">&#x27;background-color&#x27;</span>] = getHashBackgroundColor(message.sender);</span><br><span class=\"line\">        messageElement.appendChild(avatarElement);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> usernameElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> usernameText = <span class=\"built_in\">document</span>.createTextNode(message.sender);</span><br><span class=\"line\">        usernameElement.appendChild(usernameText);</span><br><span class=\"line\">        messageElement.appendChild(usernameElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> textElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> messageText = <span class=\"built_in\">document</span>.createTextNode(message.content);</span><br><span class=\"line\">    textElement.appendChild(messageText);</span><br><span class=\"line\">    messageElement.appendChild(textElement);</span><br><span class=\"line\"></span><br><span class=\"line\">    messageArea.appendChild(messageElement);</span><br><span class=\"line\">    messageArea.scrollTop = messageArea.scrollHeight;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取得姓名象徵顏色</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getHashBackgroundColor = <span class=\"function\">(<span class=\"params\">messageSender</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; messageSender.length; i++) &#123;</span><br><span class=\"line\">        hash = <span class=\"number\">31</span> * hash + messageSender.charCodeAt(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"built_in\">Math</span>.abs(hash % colors.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> colors[index];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定 Submit 事件</span></span><br><span class=\"line\">usernameForm.addEventListener(<span class=\"string\">&#x27;submit&#x27;</span>, connect, <span class=\"literal\">true</span>);</span><br><span class=\"line\">messageForm.addEventListener(<span class=\"string\">&#x27;submit&#x27;</span>, sendMessage, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最後完成結果<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201007/20121179mdbSLkn5lX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201007/20121179mdbSLkn5lX.png\"></p>\n</li>\n</ol>\n<blockquote>\n<p>此文章有提供範例程式碼在 <a href=\"https://github.com/Xiang36/ironman-websocket-example\">Github</a> 供大家參考</p>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[文章] <a href=\"https://zh.wikipedia.org/wiki/WebSocket\">維基百科（WebSocket）</a></li>\n<li>[文章]<a href=\"https://blog.gtwang.org/web-development/websocket-protocol/\">WebSocket 通訊協定簡介：比較 Polling、Long-Polling 與 Streaming 的運作原理）</a></li>\n<li>[文章]<a href=\"https://www.callicoder.com/spring-boot-websocket-chat-example/\">Building a chat application with Spring Boot and WebSocket</a></li>\n<li>[文章]<a href=\"https://codingnote.cc/zh-tw/p/207167\">常用的Websocket技術一覽</a></li>\n</ul>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 29] 遠征 Kotlin × Spring Boot 介紹多資料庫連線配置","url":"/2020/10/11/ironman-2020-29/","content":"<p>在實務開發上，我們有可能會遇到專案的業務需求越來越複雜，會使用的資料庫相對變得比較分散，這時就可以採用多資料來源方式取得資料，而這篇文章將介紹如何在 Spring Boot 使用多資料庫連線配置，我們一樣直接使用實作來體驗如何完成功能：</p>\n<ol>\n<li><p>由於這篇要介紹多資料庫範例，我們選擇常見資料庫（<code>SQL Server</code>、<code>MySQL</code>）進行示範，而這邊為了實作方便，會直接利用 <code>Docker</code> 進行示範，大家可以在電腦內安裝 <code>Docker</code> 與 <code>Docker-Compose</code>，若朋友電腦裡面本身就有 SQL Server 與 MySQL的話，也可以直接修改為自己電腦的資料庫，不需要使用 Docker，而Docker-Compose 配置如下：</p>\n <figure class=\"highlight docker\"><table><tr><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  <span class=\"comment\"># MySQL 配置</span></span><br><span class=\"line\">  ironman_mysql:</span><br><span class=\"line\">    container_name: ironman_mysql</span><br><span class=\"line\">    image: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">3333</span>:<span class=\"number\">3306</span></span><br><span class=\"line\">    command:</span><br><span class=\"line\">      --port <span class=\"number\">3306</span></span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - MYSQL_ROOT_PASSWORD=root</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># SQL Server 配置</span></span><br><span class=\"line\">  ironman_mssql:</span><br><span class=\"line\">    container_name: ironman_mssql</span><br><span class=\"line\">    image: microsoft/mssql-server-linux:<span class=\"number\">2017</span>-latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">3334</span>:<span class=\"number\">1433</span></span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - ACCEPT_EULA=Y</span><br><span class=\"line\">      - SA_PASSWORD=SqlServer123!@<span class=\"comment\">#</span></span><br><span class=\"line\">      - MSSQL_PID=Developer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>資料庫設定完成後，我們可以先連到資料庫建立資料表與資料，SQL 範例如下：</p>\n<ul>\n<li><p><strong>MySQL</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> ironman <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"><span class=\"keyword\">USE</span> ironman;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> article</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">id</span>      <span class=\"built_in\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">    title   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>),</span><br><span class=\"line\">    author  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>),</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> article (title, author) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;[Day 29] 遠征 Kotlin × Spring Boot 介紹多資料庫連線配置&#x27;</span>, <span class=\"string\">&#x27;Devin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> article (title, author) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;[Day 30] 遠征 Kotlin × Spring Boot&#x27;</span>, <span class=\"string\">&#x27;Devin&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>SQL Server</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">IF NOT EXISTS (<span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> sys.databases <span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> = <span class=\"string\">&#x27;ironman&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> ironman</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> sys.objects <span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> = <span class=\"string\">&#x27;userData&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> userData (</span><br><span class=\"line\">        <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> primary <span class=\"keyword\">key</span> <span class=\"keyword\">identity</span> (<span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">        <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> userData (<span class=\"keyword\">name</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Devin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> userData (<span class=\"keyword\">name</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Eric&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>接下來要進入實際專案開發，首先在專案中引入資料庫套件配置，這篇文章將選擇 SQL Server、MySQL作為示範，若大家需要使用其他資料庫，請記得要先設定資料庫配置，本篇資料庫配置設定如下：</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.microsoft.sqlserver:mssql-jdbc&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;mysql:mysql-connector-java&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再來設定 <code>application.yml</code>  YAML檔案，內容主要是設定要連接的兩個資料庫，命名利用 <code>primary</code> 與 <code>secondary</code> 進行區分，此命名會關係到待會設定的 <code>Config</code> 檔案，內容如下：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">primary:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3333/ironman</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">secondary:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:sqlserver://localhost:3334</span></span><br><span class=\"line\">      <span class=\"attr\">databaseName:</span> <span class=\"string\">ironman</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">sa</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">SqlServer123!@#</span></span><br><span class=\"line\">      <span class=\"attr\">driverClassName:</span> <span class=\"string\">com.microsoft.sqlserver.jdbc.SQLServerDriver</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立兩個資料庫關聯的 <code>Entity</code> 與 <code>Repository</code> 檔案，內容如下：</p>\n<ul>\n<li><p><strong>entity / mssql / user.kt</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = <span class=\"meta-string\">&quot;userData&quot;</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(</span><br><span class=\"line\">        <span class=\"meta\">@Id</span></span><br><span class=\"line\">        <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class=\"line\">        <span class=\"meta\">@Column(name = <span class=\"meta-string\">&quot;id&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> id: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Column(name = <span class=\"meta-string\">&quot;name&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> name: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>entity / mysql / article.kt</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = <span class=\"meta-string\">&quot;article&quot;</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span></span>(</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Id</span></span><br><span class=\"line\">        <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class=\"line\">        <span class=\"meta\">@Column(name = <span class=\"meta-string\">&quot;id&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> id: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Column(name = <span class=\"meta-string\">&quot;title&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> title: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Column(name = <span class=\"meta-string\">&quot;author&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> author: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>repository / mssql / UserRepository</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> : <span class=\"type\">JpaRepository</span>&lt;<span class=\"type\">User, Int</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>repository / mysql / ArticleRepository</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ArticleRepository</span> : <span class=\"type\">JpaRepository</span>&lt;<span class=\"type\">Article, Int</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>當我們建立完成與資料庫相關的 <code>Entity</code> 與 <code>Repository</code> 檔案後，就可以來設定多資料庫連線的配置檔案，內容如下：</p>\n<ul>\n<li><p><strong>PrimaryDBConfig</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories(</span></span><br><span class=\"line\"><span class=\"meta\">        basePackages = [<span class=\"meta-string\">&quot;com.ironman.multipledatabase.repository.mysql&quot;</span>],</span></span><br><span class=\"line\"><span class=\"meta\">        entityManagerFactoryRef = <span class=\"meta-string\">&quot;primaryDBEntityManager&quot;</span>,</span></span><br><span class=\"line\"><span class=\"meta\">        transactionManagerRef = <span class=\"meta-string\">&quot;primaryDBTransactionManager&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryDBConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = <span class=\"meta-string\">&quot;spring.datasource.primary&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">primaryDBProperties</span><span class=\"params\">()</span></span>: DataSourceProperties &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DataSourceProperties()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">primaryDBDataSource</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"meta\">@Qualifier(<span class=\"meta-string\">&quot;primaryDBProperties&quot;</span>)</span> properties: <span class=\"type\">DataSourceProperties</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: DataSource &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">primaryDBEntityManager</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            builder: <span class=\"type\">EntityManagerFactoryBuilder</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"meta\">@Qualifier(<span class=\"meta-string\">&quot;primaryDBDataSource&quot;</span>)</span> dataSource: <span class=\"type\">DataSource</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: LocalContainerEntityManagerFactoryBean &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.dataSource(dataSource)</span><br><span class=\"line\">                .packages(<span class=\"string\">&quot;com.ironman.multipledatabase.entity.mysql&quot;</span>)</span><br><span class=\"line\">                .properties(mapOf(<span class=\"string\">&quot;hibernate.hbm2ddl.auto&quot;</span> to <span class=\"string\">&quot;update&quot;</span>))</span><br><span class=\"line\">                .persistenceUnit(<span class=\"string\">&quot;primary&quot;</span>)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">primaryDBTransactionManager</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"meta\">@Qualifier(<span class=\"meta-string\">&quot;primaryDBEntityManager&quot;</span>)</span> primaryDBEntityManager: <span class=\"type\">EntityManagerFactory</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: JpaTransactionManager &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JpaTransactionManager(primaryDBEntityManager)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>SecondaryDBConfig</strong></p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories(</span></span><br><span class=\"line\"><span class=\"meta\">        basePackages = [<span class=\"meta-string\">&quot;com.ironman.multipledatabase.repository.mssql&quot;</span>],</span></span><br><span class=\"line\"><span class=\"meta\">        entityManagerFactoryRef = <span class=\"meta-string\">&quot;secondaryDBEntityManager&quot;</span>,</span></span><br><span class=\"line\"><span class=\"meta\">        transactionManagerRef = <span class=\"meta-string\">&quot;secondaryDBTransactionManager&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondaryDBConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = <span class=\"meta-string\">&quot;spring.datasource.secondary&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">secondaryDBProperties</span><span class=\"params\">()</span></span>: DataSourceProperties &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DataSourceProperties()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">secondaryDBDataSource</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"meta\">@Qualifier(<span class=\"meta-string\">&quot;secondaryDBProperties&quot;</span>)</span> properties: <span class=\"type\">DataSourceProperties</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: DataSource &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">secondaryDBEntityManager</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            builder: <span class=\"type\">EntityManagerFactoryBuilder</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"meta\">@Qualifier(<span class=\"meta-string\">&quot;secondaryDBDataSource&quot;</span>)</span> dataSource: <span class=\"type\">DataSource</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: LocalContainerEntityManagerFactoryBean &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.dataSource(dataSource)</span><br><span class=\"line\">                .packages(<span class=\"string\">&quot;com.ironman.multipledatabase.entity.mssql&quot;</span>)</span><br><span class=\"line\">                .properties(mapOf(<span class=\"string\">&quot;hibernate.hbm2ddl.auto&quot;</span> to <span class=\"string\">&quot;update&quot;</span>))</span><br><span class=\"line\">                .persistenceUnit(<span class=\"string\">&quot;secondary&quot;</span>)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">secondaryDBTransactionManager</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"meta\">@Qualifier(<span class=\"meta-string\">&quot;secondaryDBEntityManager&quot;</span>)</span> primaryDBEntityManager: <span class=\"type\">EntityManagerFactory</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: JpaTransactionManager &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JpaTransactionManager(primaryDBEntityManager)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>當我們設定完資料庫部份後，我們再利用 <code>Controller</code> 建立 API 取得資料庫資料，內容如下：</p>\n<ul>\n<li><p><strong>controller / MssqlUserController</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/users&quot;</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MssqlUserController</span> </span>(</span><br><span class=\"line\">        <span class=\"keyword\">val</span> userRepository: UserRepository</span><br><span class=\"line\">)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAllUser</span><span class=\"params\">()</span></span>: ResponseEntity&lt;Any&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.ok(userRepository.findAll())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>controller / MysqlArticleController</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">&quot;/articles&quot;</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MysqlArticleController</span> </span>(</span><br><span class=\"line\">        <span class=\"keyword\">val</span> storeRepository: ArticleRepository</span><br><span class=\"line\">)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">&quot;/&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAllStore</span><span class=\"params\">()</span></span>: ResponseEntity&lt;Any&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.ok(storeRepository.findAll())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>執行結果如下：<br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201008/20121179W6w4KybFG8.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201008/20121179W6w4KybFG8.png\"><br> <img src=\"https://ithelp.ithome.com.tw/upload/images/20201008/2012117985RMHU753h.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20201008/2012117985RMHU753h.png\"></p>\n</li>\n</ol>\n<blockquote>\n<p>此文章有提供範例程式碼在 <a href=\"https://github.com/Xiang36/ironman-multipledatabase-example\">Github</a> 供大家參考</p>\n</blockquote>\n","categories":["2020-IThome鐵人賽"],"tags":["Spring Boot"]},{"title":"[Day 30] 遠征 Kotlin × Spring Boot 完賽心得分享","url":"/2020/10/11/ironman-2020-30/","content":"<p>終於來到第 30 天文章，其實到了今天還一直在思考今天這篇要寫技術分享還是完賽心得，最後還是選擇寫完賽心得，畢竟在這過程中真的有許多感觸。還記得當初在學期間就經常會關注 IThome 鐵人賽這個網站，每年都可以從眾多參賽者的文章中學習到很多知識，我想這也算是在台灣這邊很難得的一個技術活動，也從來沒想過自己也會有一年參加這項活動，畢竟整整 30 天要持續分享文章，有可能光是想文章標題都是一件難事（其實真的到中後期都是每天在思考今天要講什麼），參加前其實也有想過要事先準備文章內容，但中後期的每一天都會想要再重新調整文章的整體內容。但我想這樣的心境，或許也是一件好事，代表自己是持續在成長的，30天前所設定的文章架構、標題、內容，經過每天的奮戰與思考，才會有了最後這份系列文章。</p>\n<p>自己其實從以前就很想要培養寫文章的習慣，但遲遲沒有開始進行，每次開始總會遇到各種事情而放下這個念頭，不過也覺得自己有一個很妙的點，自己在過去其實經常參加許多資訊相關競賽，大多屬於專案或產品型競賽，這樣的背景也讓自己比較常在撰寫專案企劃或商業計劃書（BP），但是在撰寫學習型文章這件事卻是一個很大的障礙，也非常感謝 IThome 每年都持續辦這個競賽，透過今年這次的鐵人賽，也算是為自己打開寫作習慣這條路，希望自己後續能夠持續下去，透過寫作來強化自己的學習深度。</p>\n<p>在這邊想感謝這次參賽的親朋好友，首先是今年加入技術團隊的好朋友 <a href=\"https://ithelp.ithome.com.tw/users/20118857/ironman\">cailiwu</a>，還記得八月初，我很突然的發起一起參加鐵人賽這個活動，朋友二話不說就一起參加了，謝謝這 30 天的一路陪伴。再來想感謝 <a href=\"https://ithelp.ithome.com.tw/2020-12th-ironman/signup/team/110\">Kotlin 鐵人陣</a> 的大家，自己是從今年五月初就開始持續參加 <a href=\"https://tw.kotlin.tips/study-jams\">Kotlin 線上讀書會</a>的活動，感謝你們非常認真在經營這個社群，覺得這段期間的收穫非常多，而在這次鐵人賽中，也關注到大家很多很精彩的文章分享，謝謝。</p>\n<p>最後想感謝女友的支持，在參加比賽的過程中，老是為了找空閒時間來專心寫文，一直比較沒辦法陪伴妳，非常感謝這陣子的包容與支持。期待自己在未來能夠持續撰寫文章，強化自己的學習與知識，我想這 30 天會成為自己 2020 年很棒的一個回憶！</p>\n","categories":["2020-IThome鐵人賽"]},{"title":"React 讀書會 - 行前準備","url":"/2020/11/02/study-2020-3-01/","content":"<h3 id=\"前言說明\"><a href=\"#前言說明\" class=\"headerlink\" title=\"前言說明\"></a>前言說明</h3><p>自2020年開始，我在公司與同事們成立技術讀書會，而最近我們又要開始進行下一段新的旅程，這次選讀的技術是 React 前端技術，剛好可以銜接上半年我們一起研讀的\b\u001f《JavaScript 技術手冊》書籍，但這次讀書會，我們將讀書會進行方式改為分組進行分享，分享內容則是由我與資深前端工程師來幫忙擬定這次讀書會的6週討論大綱。</p>\n<h3 id=\"討論大綱\"><a href=\"#討論大綱\" class=\"headerlink\" title=\"討論大綱\"></a>討論大綱</h3><ol>\n<li>React Component 設計相關<ul>\n<li>React JSX 語法介紹、使用時機、使用原因</li>\n<li>Component 設計概念與差異</li>\n<li>元件狀態機制 Props、State</li>\n<li>生命週期 Life Cycle</li>\n</ul>\n</li>\n<li>表單實作與事件處理<ul>\n<li>事件處理</li>\n<li>列表渲染</li>\n<li>表單實作</li>\n<li>Wireframe 實作技巧</li>\n</ul>\n</li>\n<li>React Hook 介紹<ul>\n<li>基本介紹、使用原因</li>\n<li>使用方法介紹</li>\n<li>底層實作概念</li>\n<li>\b進階使用技巧</li>\n</ul>\n</li>\n<li>前端狀態管理與路由機制<ul>\n<li>狀態統一管理原因、使用時機</li>\n<li>Flux、Redux、Mobx介紹</li>\n<li>React-Router 介紹與使用方法</li>\n<li>Context API 介紹與使用方法</li>\n</ul>\n</li>\n<li>API 與 Middleware 處理機制\b<ul>\n<li>API 設計概念與串接方法</li>\n<li>Middleware 基本介紹、使用原因、使用時機</li>\n<li>Middleware 底層實作原理</li>\n<li>常見 Middleware 套件（Thunk、Observable、Saga）介紹</li>\n<li>客製化 Middleware 介紹</li>\n</ul>\n</li>\n<li>前端設計與套件工具介紹<ul>\n<li>Webpack 介紹與使用方法</li>\n<li>CSS Module、SCSS 加入與使用介紹</li>\n<li>Styled Component 使用介紹</li>\n</ul>\n</li>\n</ol>\n","categories":["2020讀書會"]}]